<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>include_2mc__control_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_VERSION</name>
      <anchorfile>include_2mc__control_2api_8h.html</anchorfile>
      <anchor>a22df2857d14ed04f3b639527d08f7740</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLIMPORT</name>
      <anchorfile>include_2mc__control_2api_8h.html</anchorfile>
      <anchor>a93d9bb1f3f36bbffb00cf015b0bb0e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLEXPORT</name>
      <anchorfile>include_2mc__control_2api_8h.html</anchorfile>
      <anchor>a3ab2eb8965ce5e6d787aecf3e46d3be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLLOCAL</name>
      <anchorfile>include_2mc__control_2api_8h.html</anchorfile>
      <anchor>a5fd14ed2320e3cbe50d19d4ada5b64a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLAPI</name>
      <anchorfile>include_2mc__control_2api_8h.html</anchorfile>
      <anchor>a167861c5d95139886801b242d6d0115f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_LOCAL</name>
      <anchorfile>include_2mc__control_2api_8h.html</anchorfile>
      <anchor>aaef3a5c95b86a2ae0592bfafaec89185</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>include_2mc__control_2fsm_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_VERSION</name>
      <anchorfile>include_2mc__control_2fsm_2api_8h.html</anchorfile>
      <anchor>a6a20ff82176ab6a5233f93165acadfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLIMPORT</name>
      <anchorfile>include_2mc__control_2fsm_2api_8h.html</anchorfile>
      <anchor>ab0dcbeac9312e33f462e6484a868a52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLEXPORT</name>
      <anchorfile>include_2mc__control_2fsm_2api_8h.html</anchorfile>
      <anchor>a4907a97f0041ceb9c310d2b8cd0c027d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLLOCAL</name>
      <anchorfile>include_2mc__control_2fsm_2api_8h.html</anchorfile>
      <anchor>a1ce3297615a42b33da114e62f6176f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLAPI</name>
      <anchorfile>include_2mc__control_2fsm_2api_8h.html</anchorfile>
      <anchor>abb5c53c99c37c6ca870d1838f76228ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_LOCAL</name>
      <anchorfile>include_2mc__control_2fsm_2api_8h.html</anchorfile>
      <anchor>a44f5f50f69e648fb0b8d592720aeaf50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>include_2mc__control_2fsm_2states_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_VERSION</name>
      <anchorfile>include_2mc__control_2fsm_2states_2api_8h.html</anchorfile>
      <anchor>a2fe6be3f7fd6b98de2dbdcb335b157b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLIMPORT</name>
      <anchorfile>include_2mc__control_2fsm_2states_2api_8h.html</anchorfile>
      <anchor>adb918e5798089061b14f124312865580</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLEXPORT</name>
      <anchorfile>include_2mc__control_2fsm_2states_2api_8h.html</anchorfile>
      <anchor>a16bceb2813abeb80aa1e49f1109e6c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLLOCAL</name>
      <anchorfile>include_2mc__control_2fsm_2states_2api_8h.html</anchorfile>
      <anchor>a113188e6b7bc199d59abd8a7f463d9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLAPI</name>
      <anchorfile>include_2mc__control_2fsm_2states_2api_8h.html</anchorfile>
      <anchor>a4cfcac728c1786a9888c977f8b656ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_LOCAL</name>
      <anchorfile>include_2mc__control_2fsm_2states_2api_8h.html</anchorfile>
      <anchor>a9f940b92f5b7fef9b7af442273630546</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>include_2mc__observers_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLIMPORT</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a0193ed43a7a8a2bca1082d339d28651e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLEXPORT</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a584f0147ac169a854c258384854bd841</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLLOCAL</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a55268a03db41d5270bf2614681e1eb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLAPI</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>adde8be25d8f40acd541ed21395a5c73a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_LOCAL</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a094cf177ee9875b67aca0d123880fe86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLIMPORT</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a5ec028a59707a198d06a6b92110d7ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLEXPORT</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a71f5d19aecb89bc7ff66ea90cbec91d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLLOCAL</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a933db9b3406c8c221ba3ee7f689e7511</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLAPI</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>a5f92e3e5bb50345181ceaa0fdc4ed310</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_LOCAL</name>
      <anchorfile>include_2mc__observers_2api_8h.html</anchorfile>
      <anchor>ad87f4c4e93529fdbfdd4a95ef34bbd7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>include_2mc__planning_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_VERSION</name>
      <anchorfile>include_2mc__planning_2api_8h.html</anchorfile>
      <anchor>aca946837554c98dec168efee18c95e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLIMPORT</name>
      <anchorfile>include_2mc__planning_2api_8h.html</anchorfile>
      <anchor>a7ef3aedb0867986ac977b43fdd7cf21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLEXPORT</name>
      <anchorfile>include_2mc__planning_2api_8h.html</anchorfile>
      <anchor>a6a868413b6c5bddd02aeef2f6a0ef5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLLOCAL</name>
      <anchorfile>include_2mc__planning_2api_8h.html</anchorfile>
      <anchor>aff1ad001b6bf5fdb9fb19cd51c97a75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLAPI</name>
      <anchorfile>include_2mc__planning_2api_8h.html</anchorfile>
      <anchor>a3adede9987330f98fe6a52abdfb955f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_LOCAL</name>
      <anchorfile>include_2mc__planning_2api_8h.html</anchorfile>
      <anchor>a73898c9a3a9215937de16e50d4e504a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>include_2mc__rbdyn_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_VERSION</name>
      <anchorfile>include_2mc__rbdyn_2api_8h.html</anchorfile>
      <anchor>a552577349e8efdac2745cbdd3898f85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLIMPORT</name>
      <anchorfile>include_2mc__rbdyn_2api_8h.html</anchorfile>
      <anchor>a529cb71c3827899033a1e94d10552a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLEXPORT</name>
      <anchorfile>include_2mc__rbdyn_2api_8h.html</anchorfile>
      <anchor>ae269070c4054c9fa40053b5e28ea074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLLOCAL</name>
      <anchorfile>include_2mc__rbdyn_2api_8h.html</anchorfile>
      <anchor>a2956eb566ae27b5965f64bc3c422c703</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLAPI</name>
      <anchorfile>include_2mc__rbdyn_2api_8h.html</anchorfile>
      <anchor>a5f64edebd03a669545de1ba699d6cb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_LOCAL</name>
      <anchorfile>include_2mc__rbdyn_2api_8h.html</anchorfile>
      <anchor>a830b69e4ab5049ef14b25b9a3dd872cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_robots/</path>
    <filename>include_2mc__robots_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_VERSION</name>
      <anchorfile>include_2mc__robots_2api_8h.html</anchorfile>
      <anchor>a12b895bf0b39c259b3eb51ee7782f970</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLIMPORT</name>
      <anchorfile>include_2mc__robots_2api_8h.html</anchorfile>
      <anchor>afab08aefa87854e0f4e002300f42f2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLEXPORT</name>
      <anchorfile>include_2mc__robots_2api_8h.html</anchorfile>
      <anchor>a551f4997282c602cc3b9699950bff0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLLOCAL</name>
      <anchorfile>include_2mc__robots_2api_8h.html</anchorfile>
      <anchor>abd12baa7258deaf7a15d3874f1920e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLAPI</name>
      <anchorfile>include_2mc__robots_2api_8h.html</anchorfile>
      <anchor>aab9f1fcb73f7bb68ce97897257085bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_LOCAL</name>
      <anchorfile>include_2mc__robots_2api_8h.html</anchorfile>
      <anchor>a31fee9d1d5fe536ba8cfac80e376564e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>include_2mc__rtc_2gui_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_VERSION</name>
      <anchorfile>include_2mc__rtc_2gui_2api_8h.html</anchorfile>
      <anchor>a3c227096c22154059e88b20b7cd202bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLIMPORT</name>
      <anchorfile>include_2mc__rtc_2gui_2api_8h.html</anchorfile>
      <anchor>a9365441c6f8e61e9f8c39bb75c617b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLEXPORT</name>
      <anchorfile>include_2mc__rtc_2gui_2api_8h.html</anchorfile>
      <anchor>a14ad7305617c58803f8ce0c7541bb508</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLLOCAL</name>
      <anchorfile>include_2mc__rtc_2gui_2api_8h.html</anchorfile>
      <anchor>a0480d192b9c9ae9d9d88bf17771118b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLAPI</name>
      <anchorfile>include_2mc__rtc_2gui_2api_8h.html</anchorfile>
      <anchor>a0154310cb006fb3f499c367ca3e861a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_LOCAL</name>
      <anchorfile>include_2mc__rtc_2gui_2api_8h.html</anchorfile>
      <anchor>aa7fe5afca945e356848d1a6b156528fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>include_2mc__solver_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_VERSION</name>
      <anchorfile>include_2mc__solver_2api_8h.html</anchorfile>
      <anchor>ae4634b29539fd982b8b83c15830c1c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLIMPORT</name>
      <anchorfile>include_2mc__solver_2api_8h.html</anchorfile>
      <anchor>a85361305f43d765074b5a82afaa82487</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLEXPORT</name>
      <anchorfile>include_2mc__solver_2api_8h.html</anchorfile>
      <anchor>a24ff42006c016a5adc79aec2a1dfc0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLLOCAL</name>
      <anchorfile>include_2mc__solver_2api_8h.html</anchorfile>
      <anchor>ae3c35da4cb012ab2f6caea5696a56dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLAPI</name>
      <anchorfile>include_2mc__solver_2api_8h.html</anchorfile>
      <anchor>a1f670c9ef41bde54578a3afc8fd75445</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_LOCAL</name>
      <anchorfile>include_2mc__solver_2api_8h.html</anchorfile>
      <anchor>ad2b85045fbd2243b5745829691239595</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>include_2mc__tasks_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_VERSION</name>
      <anchorfile>include_2mc__tasks_2api_8h.html</anchorfile>
      <anchor>a47ff1b35f32c422f53ffee9a1a5d2de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLIMPORT</name>
      <anchorfile>include_2mc__tasks_2api_8h.html</anchorfile>
      <anchor>a1ca51f7fba6e50050fa71ee00906116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLEXPORT</name>
      <anchorfile>include_2mc__tasks_2api_8h.html</anchorfile>
      <anchor>a6f58d55d50caa4b695e9ae0db68a84e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLLOCAL</name>
      <anchorfile>include_2mc__tasks_2api_8h.html</anchorfile>
      <anchor>a88d2b44a0ab87ccac98cac02f5bc0220</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLAPI</name>
      <anchorfile>include_2mc__tasks_2api_8h.html</anchorfile>
      <anchor>a54b6b62a72f51c6877ce5f6855eae009</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_LOCAL</name>
      <anchorfile>include_2mc__tasks_2api_8h.html</anchorfile>
      <anchor>a6fad7ce5639c7536227a82e08f06c0e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>include_2mc__trajectory_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_VERSION</name>
      <anchorfile>include_2mc__trajectory_2api_8h.html</anchorfile>
      <anchor>acd63e2a4854ce5d3f1eec2e5f2cf7498</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLIMPORT</name>
      <anchorfile>include_2mc__trajectory_2api_8h.html</anchorfile>
      <anchor>a6dc4322483ff7548be6769a3e2d2ae54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLEXPORT</name>
      <anchorfile>include_2mc__trajectory_2api_8h.html</anchorfile>
      <anchor>a531302b8554807c8aca0fcf931c490f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLLOCAL</name>
      <anchorfile>include_2mc__trajectory_2api_8h.html</anchorfile>
      <anchor>aa1a1e2ac0d81d28e134d91b52199d1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLAPI</name>
      <anchorfile>include_2mc__trajectory_2api_8h.html</anchorfile>
      <anchor>adff5a6c1e965ae6fdc756a2c5187f9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_LOCAL</name>
      <anchorfile>include_2mc__trajectory_2api_8h.html</anchorfile>
      <anchor>a4d2a4bf4b090297efb1f6dfa124b52e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>include_2mc__tvm_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_TVM_DLLIMPORT</name>
      <anchorfile>include_2mc__tvm_2api_8h.html</anchorfile>
      <anchor>af13bce918f1f80f1d2c4fc3093b3758b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TVM_DLLEXPORT</name>
      <anchorfile>include_2mc__tvm_2api_8h.html</anchorfile>
      <anchor>aa3127f3df4c761b7bffd43e8a0879f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TVM_DLLLOCAL</name>
      <anchorfile>include_2mc__tvm_2api_8h.html</anchorfile>
      <anchor>a9d6454dcc16690a604814d2bafcfbb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TVM_DLLAPI</name>
      <anchorfile>include_2mc__tvm_2api_8h.html</anchorfile>
      <anchor>abbd61a50e2e306b709065c31949a254e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TVM_LOCAL</name>
      <anchorfile>include_2mc__tvm_2api_8h.html</anchorfile>
      <anchor>a4674d1b97c9eccb30b123f6150151a0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/plugins/ROS/include/mc_rtc_ros/</path>
    <filename>plugins_2ROS_2include_2mc__rtc__ros_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_ROS_VERSION</name>
      <anchorfile>plugins_2ROS_2include_2mc__rtc__ros_2api_8h.html</anchorfile>
      <anchor>a4c77ffabba6fb012e781847cfb5dca02</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_ROS_DLLIMPORT</name>
      <anchorfile>plugins_2ROS_2include_2mc__rtc__ros_2api_8h.html</anchorfile>
      <anchor>a3cbe6a1ac62448731bc867c7068ba36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_ROS_DLLEXPORT</name>
      <anchorfile>plugins_2ROS_2include_2mc__rtc__ros_2api_8h.html</anchorfile>
      <anchor>aabc0589237f2cf4df48b8ca69df575a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_ROS_DLLLOCAL</name>
      <anchorfile>plugins_2ROS_2include_2mc__rtc__ros_2api_8h.html</anchorfile>
      <anchor>a387309c9381fda92ba227506899eeb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_ROS_DLLAPI</name>
      <anchorfile>plugins_2ROS_2include_2mc__rtc__ros_2api_8h.html</anchorfile>
      <anchor>a17fc85a6fd39970f9a707344763058c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_ROS_LOCAL</name>
      <anchorfile>plugins_2ROS_2include_2mc__rtc__ros_2api_8h.html</anchorfile>
      <anchor>ac6f294a8922c33b67092dbcf4b692c43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/plugins/ROS/include/mc_tasks_ros/</path>
    <filename>plugins_2ROS_2include_2mc__tasks__ros_2api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_ROS_DLLIMPORT</name>
      <anchorfile>plugins_2ROS_2include_2mc__tasks__ros_2api_8h.html</anchorfile>
      <anchor>ad9cb61445fafdd004c409dbab29c15ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_ROS_DLLEXPORT</name>
      <anchorfile>plugins_2ROS_2include_2mc__tasks__ros_2api_8h.html</anchorfile>
      <anchor>a7e3780f3cce3c679104c80e08d8e2694</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_ROS_DLLLOCAL</name>
      <anchorfile>plugins_2ROS_2include_2mc__tasks__ros_2api_8h.html</anchorfile>
      <anchor>af79974efde92fc0dac6467d3c01568ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_ROS_DLLAPI</name>
      <anchorfile>plugins_2ROS_2include_2mc__tasks__ros_2api_8h.html</anchorfile>
      <anchor>aa9127fc040ab12d0ad1fd62b9f562ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_ROS_LOCAL</name>
      <anchorfile>plugins_2ROS_2include_2mc__tasks__ros_2api_8h.html</anchorfile>
      <anchor>a29794f98df087d4fed1ddd7f873a2488</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>client_api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>client__api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_VERSION</name>
      <anchorfile>client__api_8h.html</anchorfile>
      <anchor>ae857da0c370e43bde706be611dd7fd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLIMPORT</name>
      <anchorfile>client__api_8h.html</anchorfile>
      <anchor>ab2b2007b5447424d69ba1ba5554910d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLEXPORT</name>
      <anchorfile>client__api_8h.html</anchorfile>
      <anchor>a135d76578fe99739b25aeb9f883b6303</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLLOCAL</name>
      <anchorfile>client__api_8h.html</anchorfile>
      <anchor>ae5523bd90c6e0b83d5a4c0988b281599</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLAPI</name>
      <anchorfile>client__api_8h.html</anchorfile>
      <anchor>ad7a20267075ce3dd99312af104b78af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_LOCAL</name>
      <anchorfile>client__api_8h.html</anchorfile>
      <anchor>aceaa3c77684597c7804fd3d0b73b331c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompletionCriteria.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>CompletionCriteria_8h</filename>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_control::CompletionCriteria</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>Configuration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>mc__control_2Configuration_8h</filename>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <namespace>mc_control</namespace>
    <member kind="typedef">
      <type>mc_rtc::Configuration</type>
      <name>Configuration</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a6e724381ca619d4c38da5fd7cdbfe9c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Configuration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>mc__rtc_2Configuration_8h</filename>
    <includes id="MessagePackBuilder_8h" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <includes id="deprecated_8h" name="deprecated.h" local="no" imported="no">mc_rtc/deprecated.h</includes>
    <includes id="Gains_8h" name="Gains.h" local="no" imported="no">mc_rbdyn/Gains.h</includes>
    <includes id="rpy__utils_8h" name="rpy_utils.h" local="no" imported="no">mc_rbdyn/rpy_utils.h</includes>
    <class kind="struct">mc_rtc::ConfigurationLoader</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; void &gt;</class>
    <class kind="struct">mc_rtc::internal::_has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::_has_configuration_save_object</class>
    <class kind="struct">mc_rtc::internal::has_configuration_save_object</class>
    <class kind="struct">mc_rtc::Configuration</class>
    <class kind="struct">mc_rtc::Configuration::Exception</class>
    <class kind="struct">mc_rtc::ConfigurationArrayIterator</class>
    <class kind="struct">mc_rtc::ConfigurationFile</class>
    <class kind="struct">fmt::formatter&lt; mc_rtc::Configuration &gt;</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <namespace>fmt</namespace>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>mc__rtc_2Configuration_8h.html</anchorfile>
      <anchor>a24679a5c44564f7b7426cca4533300bf</anchor>
      <arglist>(std::ostream &amp;os, const mc_rtc::Configuration &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>ConfigurationArrayIterator</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a781ea11d3b3f97742187d5910b74edfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>Configuration</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a9b620c9005d103e65363b518ba6dca23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Contact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>mc__control_2Contact_8h</filename>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="mc__rbdyn_2Contact_8h" name="Contact.h" local="no" imported="no">mc_rbdyn/Contact.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="class">mc_control::Contact</class>
    <class kind="struct">std::hash&lt; mc_control::Contact &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_control::Contact &gt;</class>
    <namespace>mc_control</namespace>
    <namespace>std</namespace>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::unordered_set&lt; Contact, std::hash&lt; Contact &gt;, std::equal_to&lt; Contact &gt;, Eigen::aligned_allocator&lt; Contact &gt; &gt;</type>
      <name>ContactSet</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>ac55a4e95c7c3aaab29499a0abe565e3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Contact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>mc__rbdyn_2Contact_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="struct">mc_solver::QPContactPtr</class>
    <class kind="struct">mc_solver::QPContactPtrWPoints</class>
    <class kind="struct">mc_rbdyn::Contact</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; sva::PTransformd &gt;</type>
      <name>computePoints</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a736c36f68b3eff9f08124c8b1a58cba3</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;robotSurface, const mc_rbdyn::Surface &amp;envSurface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Contact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/lipm_stabilizer/</path>
    <filename>mc__tasks_2lipm__stabilizer_2Contact_8h</filename>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="include_2mc__tasks_2api_8h" name="api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::lipm_stabilizer::internal::Contact</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::ContactDescription</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_tasks::lipm_stabilizer::ContactState &gt;</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
    <namespace>mc_tasks::lipm_stabilizer::internal</namespace>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXd &gt;</type>
      <name>HrepXd</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>af644950088ef46324f20a7214021a824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ContactDescription, Eigen::aligned_allocator&lt; ContactDescription &gt; &gt;</type>
      <name>ContactDescriptionVector</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a4ca092c9a2df0b34b399ff21a8bc938f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Left</name>
      <anchorfile>mc__tasks_2lipm__stabilizer_2Contact_8h.html</anchorfile>
      <anchor>aa149c1d1da2ae1c94f1ae91f4919625a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ControllerClient.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>ControllerClient_8h</filename>
    <includes id="ControllerServer_8h" name="ControllerServer.h" local="no" imported="no">mc_control/ControllerServer.h</includes>
    <includes id="client__api_8h" name="client_api.h" local="no" imported="no">mc_control/client_api.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="plot_2types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_control::ElementId</class>
    <class kind="struct">mc_control::ControllerClient</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>ControllerLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>ControllerLoader_8h</filename>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="class">mc_control::ControllerLoader</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>ControllerServer.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>ControllerServer_8h</filename>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <class kind="struct">mc_control::ControllerServer</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>Controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>Controller_8h</filename>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="Executor_8h" name="Executor.h" local="no" imported="no">mc_control/fsm/Executor.h</includes>
    <includes id="EndEffectorTask_8h" name="EndEffectorTask.h" local="no" imported="no">mc_tasks/EndEffectorTask.h</includes>
    <includes id="PostureTask_8h" name="PostureTask.h" local="no" imported="no">mc_tasks/PostureTask.h</includes>
    <class kind="class">mc_control::fsm::Controller</class>
    <class kind="struct">mc_control::fsm::details::BackendSpecificController</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
    <namespace>mc_control::fsm::details</namespace>
    <member kind="typedef">
      <type>mc_control::Contact</type>
      <name>Contact</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a52d7fbb8d8e312077694e5c761ddac8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_control::ContactSet</type>
      <name>ContactSet</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>ae900416c9a809910247882838e0d5599</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Executor.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>Executor_8h</filename>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="StateFactory_8h" name="StateFactory.h" local="no" imported="no">mc_control/fsm/StateFactory.h</includes>
    <includes id="TransitionMap_8h" name="TransitionMap.h" local="no" imported="no">mc_control/fsm/TransitionMap.h</includes>
    <class kind="class">mc_control::fsm::Executor</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>PythonState.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>PythonState_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::PythonState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>State.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>State_8h</filename>
    <includes id="include_2mc__control_2fsm_2api_8h" name="api.h" local="no" imported="no">mc_control/fsm/api.h</includes>
    <includes id="include_2mc__control_2fsm_2states_2api_8h" name="api.h" local="no" imported="no">mc_control/fsm/states/api.h</includes>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="PostureTask_8h" name="PostureTask.h" local="no" imported="no">mc_tasks/PostureTask.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="class">mc_control::fsm::State</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FSM_STATE_API</name>
      <anchorfile>State_8h.html</anchorfile>
      <anchor>a3d9a843e054d57012b5f40fbab9ca357</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPORT_SINGLE_STATE</name>
      <anchorfile>State_8h.html</anchorfile>
      <anchor>afc0c9094c9775d1a72401d17cd60d6be</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; State &gt;</type>
      <name>StatePtr</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a4c42d903de4c4a1e5ad50c37bc2d547a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_DLLAPI</type>
      <name>Controller</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a3d06e24faff23eaa588f3820e74042b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StateFactory.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>StateFactory_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="class">mc_control::fsm::StateFactory</class>
    <class kind="struct">mc_control::fsm::StateFactory::StateConfiguration</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>AddRemoveContact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>AddRemoveContact_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::AddRemoveContactState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_STATE_DLLAPI</type>
      <name>AddRemoveContactStateImpl</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a2deb94750a61f8f86801bd02f4149d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EnableController.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>EnableController_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::EnableControllerState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Grippers.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>Grippers_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="generic__gripper_8h" name="generic_gripper.h" local="no" imported="no">mc_control/generic_gripper.h</includes>
    <class kind="struct">mc_control::fsm::Grippers</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>HalfSitting.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>HalfSitting_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::HalfSittingState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Message.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>Message_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::MessageState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Meta.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>Meta_8h</filename>
    <includes id="Executor_8h" name="Executor.h" local="no" imported="no">mc_control/fsm/Executor.h</includes>
    <class kind="struct">mc_control::fsm::MetaState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>MetaTasks.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>MetaTasks_8h</filename>
    <includes id="CompletionCriteria_8h" name="CompletionCriteria.h" local="no" imported="no">mc_control/CompletionCriteria.h</includes>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_control::fsm::MetaTasksState</class>
    <class kind="struct">mc_control::fsm::MetaTasksState::TaskCriteria</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Parallel.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>Parallel_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::ParallelState</class>
    <class kind="struct">mc_control::fsm::ParallelState::DelayedState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Pause.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>Pause_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::PauseState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Posture.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>Posture_8h</filename>
    <includes id="CompletionCriteria_8h" name="CompletionCriteria.h" local="no" imported="no">mc_control/CompletionCriteria.h</includes>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="PostureTask_8h" name="PostureTask.h" local="no" imported="no">mc_tasks/PostureTask.h</includes>
    <class kind="struct">mc_control::fsm::PostureState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>StabilizerStandingState.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>StabilizerStandingState_8h</filename>
    <includes id="State_8h" name="State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="Pendulum_8h" name="Pendulum.h" local="no" imported="no">mc_planning/Pendulum.h</includes>
    <includes id="mc__tasks_2lipm__stabilizer_2Contact_8h" name="Contact.h" local="no" imported="no">mc_tasks/lipm_stabilizer/Contact.h</includes>
    <class kind="struct">mc_control::fsm::StabilizerStandingState</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>TasksController.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>fsm_2TasksController_8h</filename>
    <includes id="Controller_8h" name="Controller.h" local="no" imported="no">mc_control/fsm/Controller.h</includes>
    <includes id="TasksQPSolver_8h" name="TasksQPSolver.h" local="no" imported="no">mc_solver/TasksQPSolver.h</includes>
    <class kind="struct">mc_control::fsm::TasksController</class>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>TasksController.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>TasksController_8h</filename>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="TasksQPSolver_8h" name="TasksQPSolver.h" local="no" imported="no">mc_solver/TasksQPSolver.h</includes>
    <class kind="struct">mc_control::TasksController</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>Transition.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>Transition_8h</filename>
    <includes id="include_2mc__control_2fsm_2api_8h" name="api.h" local="no" imported="no">mc_control/fsm/api.h</includes>
    <class kind="class">mc_control::fsm::Transition</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>TransitionMap.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>TransitionMap_8h</filename>
    <includes id="StateFactory_8h" name="StateFactory.h" local="no" imported="no">mc_control/fsm/StateFactory.h</includes>
    <includes id="Transition_8h" name="Transition.h" local="no" imported="no">mc_control/fsm/Transition.h</includes>
    <class kind="class">mc_control::fsm::TransitionMap</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>TVMController.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>fsm_2TVMController_8h</filename>
    <includes id="Controller_8h" name="Controller.h" local="no" imported="no">mc_control/fsm/Controller.h</includes>
    <includes id="TVMQPSolver_8h" name="TVMQPSolver.h" local="no" imported="no">mc_solver/TVMQPSolver.h</includes>
    <class kind="struct">mc_control::fsm::TVMController</class>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>TVMController.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>TVMController_8h</filename>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="TVMQPSolver_8h" name="TVMQPSolver.h" local="no" imported="no">mc_solver/TVMQPSolver.h</includes>
    <class kind="struct">mc_control::TVMController</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>generic_gripper.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>generic__gripper_8h</filename>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="RobotModule_8h" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <class kind="struct">mc_control::Gripper</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_control</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Gripper &gt;</type>
      <name>GripperPtr</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a67d3b51822d3e7d0c56d9af675f9eaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reference_wrapper&lt; Gripper &gt;</type>
      <name>GripperRef</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a39b3dee4f4017bab0f389d9bfd7877dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalPlugin.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>GlobalPlugin_8h</filename>
    <includes id="mc__global__controller_8h" name="mc_global_controller.h" local="no" imported="no">mc_control/mc_global_controller.h</includes>
    <class kind="struct">mc_control::GlobalPlugin</class>
    <class kind="struct">mc_control::GlobalPlugin::GlobalPluginConfiguration</class>
    <namespace>mc_control</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GLOBAL_PLUGIN_API</name>
      <anchorfile>GlobalPlugin_8h.html</anchorfile>
      <anchor>adda9065a64d1bb53f70cc10616e220fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalPlugin_fwd.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>GlobalPlugin__fwd_8h</filename>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <namespace>mc_control</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GlobalPlugin, mc_rtc::ObjectLoader&lt; GlobalPlugin &gt;::ObjectDeleter &gt;</type>
      <name>GlobalPluginPtr</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a077624dc5665df1a3e145d0283e10c78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalPluginLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>GlobalPluginLoader_8h</filename>
    <includes id="GlobalPlugin_8h" name="GlobalPlugin.h" local="no" imported="no">mc_control/GlobalPlugin.h</includes>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="class">mc_control::GlobalPluginLoader</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalPluginMacros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>GlobalPluginMacros_8h</filename>
    <includes id="GlobalPlugin_8h" name="GlobalPlugin.h" local="no" imported="no">mc_control/GlobalPlugin.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GLOBAL_PLUGIN_CHECK_VERSION</name>
      <anchorfile>GlobalPluginMacros_8h.html</anchorfile>
      <anchor>a031a20be905df8b02fe3a919564fa57f</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPORT_MC_RTC_PLUGIN</name>
      <anchorfile>GlobalPluginMacros_8h.html</anchorfile>
      <anchor>a60707c92a995568bdfdb187f6d76074e</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>mc__controller_8h</filename>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CONTROLLER_CHECK_VERSION</name>
      <anchorfile>mc__controller_8h.html</anchorfile>
      <anchor>a53b7790e199f0eb693195a9e0f3183fa</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONTROLLER_CONSTRUCTOR</name>
      <anchorfile>mc__controller_8h.html</anchorfile>
      <anchor>abe63c9c89a7762fc5ef9a7589218978c</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MULTI_CONTROLLERS_CONSTRUCTOR</name>
      <anchorfile>mc__controller_8h.html</anchorfile>
      <anchor>a2606b401f367e0b10c4d3d48a8a1234b</anchor>
      <arglist>(NAME0, NEWCTL0, NAME1, NEWCTL1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMPLE_CONTROLLER_CONSTRUCTOR</name>
      <anchorfile>mc__controller_8h.html</anchorfile>
      <anchor>ae12249535408100bcdf1007ef0eb8fb8</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_global_controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>mc__global__controller_8h</filename>
    <includes id="ControllerServer_8h" name="ControllerServer.h" local="no" imported="no">mc_control/ControllerServer.h</includes>
    <includes id="GlobalPlugin__fwd_8h" name="GlobalPlugin_fwd.h" local="no" imported="no">mc_control/GlobalPlugin_fwd.h</includes>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="RobotModule_8h" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <class kind="struct">mc_control::MCGlobalController</class>
    <class kind="struct">mc_control::MCGlobalController::GlobalConfiguration</class>
    <namespace>mc_control</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_ROBOTS_ACCESSOR</name>
      <anchorfile>mc__global__controller_8h.html</anchorfile>
      <anchor>aaf0a11741b6fb186ec99a9d2616dbf1a</anchor>
      <arglist>(NAME, PTR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_ROBOTS_ACCESSOR</name>
      <anchorfile>mc__global__controller_8h.html</anchorfile>
      <anchor>aaf0a11741b6fb186ec99a9d2616dbf1a</anchor>
      <arglist>(NAME, PTR)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_python_controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>mc__python__controller_8h</filename>
    <includes id="MCController_8h" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <class kind="struct">mc_control::PythonRWCallback</class>
    <class kind="struct">mc_control::MCPythonController</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>MCController.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>MCController_8h</filename>
    <includes id="mc__control_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_control/Configuration.h</includes>
    <includes id="mc__control_2Contact_8h" name="Contact.h" local="no" imported="no">mc_control/Contact.h</includes>
    <includes id="ObserverPipeline_8h" name="ObserverPipeline.h" local="no" imported="no">mc_observers/ObserverPipeline.h</includes>
    <includes id="RobotConverter_8h" name="RobotConverter.h" local="no" imported="no">mc_rbdyn/RobotConverter.h</includes>
    <includes id="Robots_8h" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="DataStore_8h" name="DataStore.h" local="no" imported="no">mc_rtc/DataStore.h</includes>
    <includes id="gui_8h" name="gui.h" local="no" imported="no">mc_rtc/gui.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <includes id="unique__ptr_8h" name="unique_ptr.h" local="no" imported="no">mc_rtc/unique_ptr.h</includes>
    <includes id="CollisionsConstraint_8h" name="CollisionsConstraint.h" local="no" imported="no">mc_solver/CollisionsConstraint.h</includes>
    <includes id="CompoundJointConstraint_8h" name="CompoundJointConstraint.h" local="no" imported="no">mc_solver/CompoundJointConstraint.h</includes>
    <includes id="ContactConstraint_8h" name="ContactConstraint.h" local="no" imported="no">mc_solver/ContactConstraint.h</includes>
    <includes id="DynamicsConstraint_8h" name="DynamicsConstraint.h" local="no" imported="no">mc_solver/DynamicsConstraint.h</includes>
    <includes id="KinematicsConstraint_8h" name="KinematicsConstraint.h" local="no" imported="no">mc_solver/KinematicsConstraint.h</includes>
    <includes id="QPSolver_8h" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="PostureTask_8h" name="PostureTask.h" local="no" imported="no">mc_tasks/PostureTask.h</includes>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <class kind="class">mc_control::ControllerResetData</class>
    <class kind="struct">mc_control::ControllerParameters</class>
    <class kind="class">mc_control::MCController</class>
    <class kind="struct">mc_control::MCController::DeprecatedAnchorFrame</class>
    <class kind="struct">mc_control::details::BackendSpecificController</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_control::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ADD_PARAMETER</name>
      <anchorfile>MCController_8h.html</anchorfile>
      <anchor>a1e047de867e9db669dc83c611266fd98</anchor>
      <arglist>(TYPE, NAME, DEFAULT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONTROLLER_MODULE_API</name>
      <anchorfile>MCController_8h.html</anchorfile>
      <anchor>a26817757133aa8127df9f7c6a90bafb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimulationContactPair.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>SimulationContactPair_8h</filename>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <includes id="SCHAddon_8h" name="SCHAddon.h" local="no" imported="no">mc_rbdyn/SCHAddon.h</includes>
    <includes id="surface__hull_8h" name="surface_hull.h" local="no" imported="no">mc_rbdyn/surface_hull.h</includes>
    <class kind="struct">mc_control::SimulationContactPair</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>ExponentialMovingAverage.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>ExponentialMovingAverage_8h</filename>
    <includes id="clamp_8h" name="clamp.h" local="no" imported="no">mc_filter/utils/clamp.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_filter::ExponentialMovingAverage</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>LeakyIntegrator.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>LeakyIntegrator_8h</filename>
    <includes id="clamp_8h" name="clamp.h" local="no" imported="no">mc_filter/utils/clamp.h</includes>
    <class kind="struct">mc_filter::LeakyIntegrator</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>LowPass.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>LowPass_8h</filename>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_filter::LowPass</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>LowPassCompose.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>LowPassCompose_8h</filename>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_filter::LowPassCompose</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>LowPassFiniteDifferences.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>LowPassFiniteDifferences_8h</filename>
    <includes id="LowPass_8h" name="LowPass.h" local="no" imported="no">mc_filter/LowPass.h</includes>
    <class kind="struct">mc_filter::LowPassFiniteDifferences</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>StationaryOffset.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>StationaryOffset_8h</filename>
    <includes id="ExponentialMovingAverage_8h" name="ExponentialMovingAverage.h" local="no" imported="no">mc_filter/ExponentialMovingAverage.h</includes>
    <class kind="struct">mc_filter::StationaryOffset</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>clamp.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/utils/</path>
    <filename>clamp_8h</filename>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <namespace>mc_filter</namespace>
    <namespace>mc_filter::utils</namespace>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>adfd3c18de5d65e94ce24d479f30dab1b</anchor>
      <arglist>(double value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ab8d9ca10808c933f3408d9b3f0fd72ab</anchor>
      <arglist>(double &amp;value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clampAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ae558cb782558a6fe59c9975f5e9dc2b4</anchor>
      <arglist>(double value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ac413b7125d296374adc252995e63570d</anchor>
      <arglist>(double &amp;value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a644eea0a16a707328be39ddd79f967f5</anchor>
      <arglist>(const VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a27751a2cc46af2d62717f6f52c518382</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clampAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>aab0443f3755eb02422bb0ed23308f220</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a7ee9282ad316cf4eef418c7060fcfcf9</anchor>
      <arglist>(VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a4de43cd1afd6571c2b390ac00c3ed252</anchor>
      <arglist>(VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ab82d5e06d06a98e2087aadce7be029ab</anchor>
      <arglist>(VectorT &amp;vector, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>aae7592fcc8c4adee0d0108bc9ffba659</anchor>
      <arglist>(VectorT &amp;vector, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodySensorObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>BodySensorObserver_8h</filename>
    <includes id="Observer_8h" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="include_2mc__observers_2api_8h" name="api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_observers::BodySensorObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>EncoderObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>EncoderObserver_8h</filename>
    <includes id="Observer_8h" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="include_2mc__observers_2api_8h" name="api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_observers::EncoderObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicInertialObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>KinematicInertialObserver_8h</filename>
    <includes id="LowPass_8h" name="LowPass.h" local="no" imported="no">mc_filter/LowPass.h</includes>
    <includes id="KinematicInertialPoseObserver_8h" name="KinematicInertialPoseObserver.h" local="no" imported="no">mc_observers/KinematicInertialPoseObserver.h</includes>
    <includes id="include_2mc__observers_2api_8h" name="api.h" local="no" imported="no">mc_observers/api.h</includes>
    <class kind="struct">mc_observers::KinematicInertialObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicInertialPoseObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>KinematicInertialPoseObserver_8h</filename>
    <includes id="Observer_8h" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="include_2mc__observers_2api_8h" name="api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_observers::KinematicInertialPoseObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>Observer.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>Observer_8h</filename>
    <includes id="include_2mc__observers_2api_8h" name="api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <class kind="struct">mc_observers::Observer</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_observers</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OBSERVER_MODULE_API</name>
      <anchorfile>Observer_8h.html</anchorfile>
      <anchor>a721e422633105cbc8e8e38736212705c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; mc_observers::Observer &gt;</type>
      <name>ObserverPtr</name>
      <anchorfile>namespacemc__observers.html</anchorfile>
      <anchor>a45c5f50ee1e5bcc4959faef24b334643</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObserverLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>ObserverLoader_8h</filename>
    <includes id="Observer_8h" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="include_2mc__observers_2api_8h" name="api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="class">mc_observers::ObserverLoader</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>ObserverMacros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>ObserverMacros_8h</filename>
    <includes id="Observer_8h" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>OBSERVER_MODULE_CHECK_VERSION</name>
      <anchorfile>ObserverMacros_8h.html</anchorfile>
      <anchor>aee019e14ca218a864623e4ecbf736679</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPORT_OBSERVER_MODULE</name>
      <anchorfile>ObserverMacros_8h.html</anchorfile>
      <anchor>af6dc028023a125205a51522a9667d755</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObserverPipeline.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>ObserverPipeline_8h</filename>
    <includes id="Observer_8h" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="include_2mc__observers_2api_8h" name="api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <includes id="type__name_8h" name="type_name.h" local="no" imported="no">mc_rtc/type_name.h</includes>
    <class kind="struct">mc_observers::ObserverPipeline</class>
    <class kind="struct">mc_observers::ObserverPipeline::PipelineObserver</class>
    <namespace>mc_control</namespace>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>Pendulum.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>Pendulum_8h</filename>
    <includes id="include_2mc__planning_2api_8h" name="api.h" local="no" imported="no">mc_planning/api.h</includes>
    <class kind="struct">mc_planning::Pendulum</class>
    <namespace>mc_planning</namespace>
  </compound>
  <compound kind="file">
    <name>Base.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Base_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Base</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>BodySensor.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>BodySensor_8h</filename>
    <includes id="Device_8h" name="Device.h" local="no" imported="no">mc_rbdyn/Device.h</includes>
    <includes id="deprecated_8h" name="deprecated.h" local="no" imported="no">mc_rtc/deprecated.h</includes>
    <class kind="struct">mc_rbdyn::BodySensor</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::vector&lt; BodySensor, Eigen::aligned_allocator&lt; BodySensor &gt; &gt;</type>
      <name>BodySensorVector</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a728d731db2806e7673f67b958970e558</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>accbb9a0b34219e39b1dad5d93f5fa05d</anchor>
      <arglist>(const mc_rbdyn::BodySensor &amp;lhs, const mc_rbdyn::BodySensor &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Collision.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Collision_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Collision</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aca0a2bc620d221c02c834716d875c1e0</anchor>
      <arglist>(std::ostream &amp;os, const Collision &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompoundJointConstraintDescription.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>CompoundJointConstraintDescription_8h</filename>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="struct">mc_rbdyn::CompoundJointConstraintDescription</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::CompoundJointConstraintDescription &gt;</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::vector&lt; CompoundJointConstraintDescription, Eigen::aligned_allocator&lt; CompoundJointConstraintDescription &gt; &gt;</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a96a35f8f44c0b0eb301fabc4af2bd978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>configuration_io.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>configuration__io_8h</filename>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="Base_8h" name="Base.h" local="no" imported="no">mc_rbdyn/Base.h</includes>
    <includes id="BodySensor_8h" name="BodySensor.h" local="no" imported="no">mc_rbdyn/BodySensor.h</includes>
    <includes id="Collision_8h" name="Collision.h" local="no" imported="no">mc_rbdyn/Collision.h</includes>
    <includes id="Flexibility_8h" name="Flexibility.h" local="no" imported="no">mc_rbdyn/Flexibility.h</includes>
    <includes id="ForceSensor_8h" name="ForceSensor.h" local="no" imported="no">mc_rbdyn/ForceSensor.h</includes>
    <includes id="JointSensor_8h" name="JointSensor.h" local="no" imported="no">mc_rbdyn/JointSensor.h</includes>
    <includes id="PolygonInterpolator_8h" name="PolygonInterpolator.h" local="no" imported="no">mc_rbdyn/PolygonInterpolator.h</includes>
    <includes id="RobotModule_8h" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="Springs_8h" name="Springs.h" local="no" imported="no">mc_rbdyn/Springs.h</includes>
    <includes id="polygon__utils_8h" name="polygon_utils.h" local="no" imported="no">mc_rbdyn/polygon_utils.h</includes>
    <includes id="CylindricalSurface_8h" name="CylindricalSurface.h" local="no" imported="no">mc_rbdyn/CylindricalSurface.h</includes>
    <includes id="GripperSurface_8h" name="GripperSurface.h" local="no" imported="no">mc_rbdyn/GripperSurface.h</includes>
    <includes id="PlanarSurface_8h" name="PlanarSurface.h" local="no" imported="no">mc_rbdyn/PlanarSurface.h</includes>
    <includes id="mc__rbdyn_2Contact_8h" name="Contact.h" local="no" imported="no">mc_rbdyn/Contact.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModule &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModulePtr &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::Contact &gt;</class>
    <namespace>mc_rtc</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_IO</name>
      <anchorfile>configuration__io_8h.html</anchorfile>
      <anchor>a839325e1d657147f6c746b3043b0b1b0</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>contact_transform.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>contact__transform_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>planar</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aca49bff3651cf81d0b834813b80fcdf6</anchor>
      <arglist>(const double &amp;T, const double &amp;B, const double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>cylindrical</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a44fdec158ad0a6005388d1f2296b154f</anchor>
      <arglist>(const double &amp;T, const double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>planarParam</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ad2a0e2d6fd6cdece777a838b76a7c1da</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;B, double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>cylindricalParam</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a611ca01f8c4f76581c96c8df0202f195</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; double &gt;</type>
      <name>jointParam</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ac6670e00a7e663e03a4709533a706e89</anchor>
      <arglist>(const Surface &amp;r1Surface, const Surface &amp;r2Surface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CylindricalSurface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>CylindricalSurface_8h</filename>
    <includes id="Surface_8h" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <class kind="struct">mc_rbdyn::CylindricalSurface</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>Device.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Device_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Device</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Device &gt;</type>
      <name>DevicePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a356f67585abd89ae94368d4644d6e865</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Device</type>
      <name>Sensor</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a243aca157f29f1aebb2c1210ac166a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DevicePtr</type>
      <name>SensorPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aa1e86054c466a23bfdcb3470f71c8aad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Flexibility.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Flexibility_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Flexibility</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>ForceSensor.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>ForceSensor_8h</filename>
    <includes id="Device_8h" name="Device.h" local="no" imported="no">mc_rbdyn/Device.h</includes>
    <class kind="struct">mc_rbdyn::ForceSensor</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::detail</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5aa4dab41fa3cd48e13c4fd628bcb630</anchor>
      <arglist>(const mc_rbdyn::ForceSensor &amp;lhs, const mc_rbdyn::ForceSensor &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Frame.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>mc__rbdyn_2Frame_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <includes id="hat_8h" name="hat.h" local="no" imported="no">mc_rbdyn/hat.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="shared_8h" name="shared.h" local="no" imported="no">mc_rtc/shared.h</includes>
    <class kind="struct">mc_rbdyn::Frame</class>
    <class kind="struct">mc_rbdyn::Frame::NewFrameToken</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>Frame.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>mc__tvm_2Frame_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2Frame_8h" name="Frame.h" local="no" imported="no">mc_rbdyn/Frame.h</includes>
    <class kind="struct">mc_tvm::Frame</class>
    <class kind="struct">mc_tvm::Frame::NewFrameToken</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>mc__rbdyn_2fwd_8h</filename>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robots &gt;</type>
      <name>RobotsPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ac024daf249dfc12f828218d5c2410b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ae201c3229c7e6f97eebcda8db1d4233d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Robot &gt;</type>
      <name>ConstRobotPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a628807423df2a6107db3c5c63eb98d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotFrame &gt;</type>
      <name>RobotFramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5a52a2394099019321a0411da30ea5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const RobotFrame &gt;</type>
      <name>ConstRobotFramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a1d750a36f101823e43d108ec5c8231cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Frame &gt;</type>
      <name>FramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a6124c67ac9b136813eae7227f70c17cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Frame &gt;</type>
      <name>ConstFramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a2dbebe10445fe21fb342ac391a10ba24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fwd.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>mc__tvm_2fwd_8h</filename>
    <namespace>mc_tvm</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CoM &gt;</type>
      <name>CoMPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a6b3e6f3b517f90f44e4056830bb66218</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Convex &gt;</type>
      <name>ConvexPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a2056a33d9e4c876c1715009a59dded59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Frame &gt;</type>
      <name>FramePtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>afd0f97cca283c1511c87e76f5dee4cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Momentum &gt;</type>
      <name>MomentumPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a36f851b703f67948d4d0bd33f4f65a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a7c567e7ae320072cd16633637c1ed14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RobotFrame &gt;</type>
      <name>RobotFramePtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>ae9d6c0748e1cd84c1140cc266e6c0f14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Gains.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Gains_8h</filename>
    <class kind="struct">mc_rbdyn::Gains</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>Gains&lt; 2 &gt;</type>
      <name>Gains2d</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a579a5a84c1619ddaae2108661c3241f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Gains&lt; 3 &gt;</type>
      <name>Gains3d</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a568b6e5798e01953165c11cd12fe415b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Gains&lt; 6 &gt;</type>
      <name>Gains6d</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a63313c08848a1cdd1461b077c1a83a4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GripperSurface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>GripperSurface_8h</filename>
    <includes id="Surface_8h" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <class kind="struct">mc_rbdyn::GripperSurface</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>hat.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>hat_8h</filename>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>hat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>adfd1b3b7507cf3de890aeb3eca8376d0</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointSensor.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>JointSensor_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::JointSensor</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a8925faa2c281c5667b4227aee573c835</anchor>
      <arglist>(const JointSensor &amp;lhs, const JointSensor &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StabilizerConfiguration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/lipm_stabilizer/</path>
    <filename>StabilizerConfiguration_8h</filename>
    <includes id="Gains_8h" name="Gains.h" local="no" imported="no">mc_rbdyn/Gains.h</includes>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="ZMPCCConfiguration_8h" name="ZMPCCConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/ZMPCCConfiguration.h</includes>
    <includes id="clamp_8h" name="clamp.h" local="no" imported="no">mc_filter/utils/clamp.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::FDQPWeights</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::SafetyThresholds</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::FDQPWeights &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::SafetyThresholds &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration &gt;</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &gt;</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::lipm_stabilizer</namespace>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>ZMPCCConfiguration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/lipm_stabilizer/</path>
    <filename>ZMPCCConfiguration_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &gt;</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::lipm_stabilizer</namespace>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>Mimic.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Mimic_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Mimic</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>acc171bbf6f9fa58525ac71fa8c54a2f4</anchor>
      <arglist>(const Mimic &amp;lhs, const Mimic &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PlanarSurface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>PlanarSurface_8h</filename>
    <includes id="Surface_8h" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <class kind="struct">mc_rbdyn::PlanarSurface</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>polygon_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>polygon__utils_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::QuadraticGenerator</class>
    <class kind="struct">mc_rbdyn::Plane</class>
    <namespace>geos</namespace>
    <namespace>geos::geom</namespace>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Plane &gt;</type>
      <name>planes_from_polygon</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a3313c1739e7847d2155cd1e8eb248c1e</anchor>
      <arglist>(const std::shared_ptr&lt; geos::geom::Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>points_from_polygon</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a8b64034329a5f248185cf1904c0732a0</anchor>
      <arglist>(std::shared_ptr&lt; geos::geom::Geometry &gt; geometry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolygonInterpolator.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>PolygonInterpolator_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::PolygonInterpolator</class>
    <namespace>geos</namespace>
    <namespace>geos::geom</namespace>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>Robot.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>mc__rbdyn_2Robot_8h</filename>
    <includes id="RobotData_8h" name="RobotData.h" local="no" imported="no">mc_rbdyn/RobotData.h</includes>
    <includes id="mc__rbdyn_2RobotFrame_8h" name="RobotFrame.h" local="no" imported="no">mc_rbdyn/RobotFrame.h</includes>
    <includes id="RobotModule_8h" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="Surface_8h" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <includes id="generic__gripper_8h" name="generic_gripper.h" local="no" imported="no">mc_control/generic_gripper.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <class kind="struct">mc_rbdyn::LoadRobotParameters</class>
    <class kind="struct">mc_rbdyn::Robot</class>
    <class kind="struct">mc_rbdyn::Robot::NewRobotToken</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_LOAD_ROBOT_PARAMETER_SETTER</name>
      <anchorfile>mc__rbdyn_2Robot_8h.html</anchorfile>
      <anchor>ae0f739acfdd73fed13231f4d3314bc7d</anchor>
      <arglist>(T, NAME)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI const mc_rbdyn::Robot &amp;</type>
      <name>robotFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>ga70b316b2f0c0caf547e160e74c2a029d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string MC_RBDYN_DLLAPI</type>
      <name>robotNameFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>ga40325ac769295d23f270976eead26245</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int MC_RBDYN_DLLAPI</type>
      <name>robotIndexFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>gaf9b711ec2baa5684b8f422d740464b5f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Robot.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>mc__rtc_2gui_2Robot_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_rtc::gui::details::RobotImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::details</namespace>
    <member kind="function">
      <type>details::RobotImpl&lt; GetT &gt;</type>
      <name>Robot</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a62100aa06fcd2571172fe1f3f2d1183a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Robot.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>mc__tvm_2Robot_8h</filename>
    <includes id="CoM_8h" name="CoM.h" local="no" imported="no">mc_tvm/CoM.h</includes>
    <includes id="Limits_8h" name="Limits.h" local="no" imported="no">mc_tvm/Limits.h</includes>
    <includes id="Momentum_8h" name="Momentum.h" local="no" imported="no">mc_tvm/Momentum.h</includes>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_tvm::Robot</class>
    <class kind="struct">mc_tvm::Robot::NewRobotToken</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>RobotConverter.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>RobotConverter_8h</filename>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <includes id="RobotConverterConfig_8h" name="RobotConverterConfig.h" local="no" imported="no">mc_rbdyn/RobotConverterConfig.h</includes>
    <class kind="struct">mc_rbdyn::RobotConverter</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>RobotConverterConfig.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>RobotConverterConfig_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::RobotConverterConfig</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_CONVERTER_PROPERTY</name>
      <anchorfile>RobotConverterConfig_8h.html</anchorfile>
      <anchor>ae27e0b8a058ed1e00902d106a877ffe7</anchor>
      <arglist>(NAME)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RobotData.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>RobotData_8h</filename>
    <includes id="generic__gripper_8h" name="generic_gripper.h" local="no" imported="no">mc_control/generic_gripper.h</includes>
    <includes id="BodySensor_8h" name="BodySensor.h" local="no" imported="no">mc_rbdyn/BodySensor.h</includes>
    <includes id="Flexibility_8h" name="Flexibility.h" local="no" imported="no">mc_rbdyn/Flexibility.h</includes>
    <includes id="ForceSensor_8h" name="ForceSensor.h" local="no" imported="no">mc_rbdyn/ForceSensor.h</includes>
    <includes id="JointSensor_8h" name="JointSensor.h" local="no" imported="no">mc_rbdyn/JointSensor.h</includes>
    <includes id="Springs_8h" name="Springs.h" local="no" imported="no">mc_rbdyn/Springs.h</includes>
    <class kind="struct">mc_rbdyn::RobotData</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotData &gt;</type>
      <name>RobotDataPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a33ca728cc2ff802237e8135754f359a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RobotFrame.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>mc__rbdyn_2RobotFrame_8h</filename>
    <includes id="mc__rbdyn_2Frame_8h" name="Frame.h" local="no" imported="no">mc_rbdyn/Frame.h</includes>
    <class kind="struct">mc_rbdyn::RobotFrame</class>
    <class kind="struct">mc_rbdyn::RobotFrame::NewRobotFrameToken</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>RobotFrame.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>mc__tvm_2RobotFrame_8h</filename>
    <includes id="mc__tvm_2Frame_8h" name="Frame.h" local="no" imported="no">mc_tvm/Frame.h</includes>
    <includes id="mc__rbdyn_2RobotFrame_8h" name="RobotFrame.h" local="no" imported="no">mc_rbdyn/RobotFrame.h</includes>
    <class kind="struct">mc_tvm::RobotFrame</class>
    <class kind="struct">mc_tvm::RobotFrame::NewRobotFrameToken</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>RobotLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>RobotLoader_8h</filename>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <includes id="RobotConverter_8h" name="RobotConverter.h" local="no" imported="no">mc_rbdyn/RobotConverter.h</includes>
    <includes id="RobotModule_8h" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="io__utils_8h" name="io_utils.h" local="no" imported="no">mc_rtc/io_utils.h</includes>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="struct">mc_rbdyn::details::are_strings</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T &gt;</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T, Args... &gt;</class>
    <class kind="class">mc_rbdyn::RobotLoader</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::details</namespace>
    <member kind="function">
      <type>std::conditional&lt; std::is_same&lt; std::string, T &gt;::value, const std::string &amp;, std::string &gt;::type</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rbdyn_1_1details.html</anchorfile>
      <anchor>a71fcd7fe46e75452f9c6302bb1c40412</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RobotModule.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>RobotModule_8h</filename>
    <includes id="BodySensor_8h" name="BodySensor.h" local="no" imported="no">mc_rbdyn/BodySensor.h</includes>
    <includes id="Collision_8h" name="Collision.h" local="no" imported="no">mc_rbdyn/Collision.h</includes>
    <includes id="CompoundJointConstraintDescription_8h" name="CompoundJointConstraintDescription.h" local="no" imported="no">mc_rbdyn/CompoundJointConstraintDescription.h</includes>
    <includes id="Flexibility_8h" name="Flexibility.h" local="no" imported="no">mc_rbdyn/Flexibility.h</includes>
    <includes id="ForceSensor_8h" name="ForceSensor.h" local="no" imported="no">mc_rbdyn/ForceSensor.h</includes>
    <includes id="JointSensor_8h" name="JointSensor.h" local="no" imported="no">mc_rbdyn/JointSensor.h</includes>
    <includes id="Mimic_8h" name="Mimic.h" local="no" imported="no">mc_rbdyn/Mimic.h</includes>
    <includes id="RobotConverterConfig_8h" name="RobotConverterConfig.h" local="no" imported="no">mc_rbdyn/RobotConverterConfig.h</includes>
    <includes id="Springs_8h" name="Springs.h" local="no" imported="no">mc_rbdyn/Springs.h</includes>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="StabilizerConfiguration_8h" name="StabilizerConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/StabilizerConfiguration.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">mc_rtc/constants.h</includes>
    <includes id="deprecated_8h" name="deprecated.h" local="no" imported="no">mc_rtc/deprecated.h</includes>
    <class kind="struct">mc_rbdyn::DevicePtrVector</class>
    <class kind="struct">mc_rbdyn::VisualMap</class>
    <class kind="struct">mc_rbdyn::RobotModule</class>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper</class>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper::Safety</class>
    <class kind="struct">mc_rbdyn::RobotModule::FrameDescription</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_API</name>
      <anchorfile>RobotModule_8h.html</anchorfile>
      <anchor>a983157fccbdda235351228ec75cbd167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; sch::S_Object &gt;</type>
      <name>S_ObjectPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ac3517607389b845ee6ffdee65cbc8a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotModule &gt;</type>
      <name>RobotModulePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>af67e459a90b9a864418fca7d55d959a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RobotModule, Eigen::aligned_allocator&lt; RobotModule &gt; &gt;</type>
      <name>RobotModuleVector</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a95605f5cb57b7c5b39027072bedbbc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotModule::bounds_t</type>
      <name>urdf_limits_to_bounds</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ae02615325b483661411e4eb7d76e0522</anchor>
      <arglist>(const rbd::parsers::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI bool</type>
      <name>check_module_compatibility</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a8ac23895f52ccc0e6ea9f77dfc83c84a</anchor>
      <arglist>(const RobotModule &amp;lhs, const RobotModule &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>abaf5b2b5f77f9658f757b3a1dbdcf030</anchor>
      <arglist>(const RobotModule::Gripper::Safety &amp;lhs, const RobotModule::Gripper::Safety &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5e07749ee4441c7ee3c8d1b9508f6126</anchor>
      <arglist>(const RobotModule::Gripper &amp;lhs, const RobotModule::Gripper &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RobotModuleMacros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>RobotModuleMacros_8h</filename>
    <includes id="RobotModule_8h" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_CHECK_VERSION</name>
      <anchorfile>RobotModuleMacros_8h.html</anchorfile>
      <anchor>a8ff1f95ceab073746f8203ca23fbb3cd</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_COMMON</name>
      <anchorfile>RobotModuleMacros_8h.html</anchorfile>
      <anchor>aefdd7a13affe8001b4bf38b8e94fcd50</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_DEFAULT_CONSTRUCTOR</name>
      <anchorfile>RobotModuleMacros_8h.html</anchorfile>
      <anchor>a61416168a2a0e73c18a99a7da049df9a</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_CANONIC_CONSTRUCTOR</name>
      <anchorfile>RobotModuleMacros_8h.html</anchorfile>
      <anchor>a835eb9cb28d7a07e5fb285241d7e7b08</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Robots.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Robots_8h</filename>
    <includes id="mc__rbdyn_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <includes id="iterators_8h" name="iterators.h" local="no" imported="no">mc_rtc/iterators.h</includes>
    <includes id="shared_8h" name="shared.h" local="no" imported="no">mc_rtc/shared.h</includes>
    <class kind="struct">mc_rbdyn::Robots</class>
    <class kind="struct">mc_rbdyn::Robots::NewRobotsToken</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobot</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a7ac28a8438587660a42d241937783322</anchor>
      <arglist>(const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobot</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a023b9824634ace45cf7ebb23a5abdc00</anchor>
      <arglist>(const std::string &amp;name, const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobots</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a4db76cbebcf7d350a4b7182cccfbe399</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobotAndEnv</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aa833d20a49375cc17cd9b18370531657</anchor>
      <arglist>(const RobotModule &amp;module, const RobotModule &amp;envModule)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobotFromUrdf</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a23af9e4069ba5394163c390df9d48dba</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, const rbd::parsers::ParserParameters &amp;parser_params={}, const LoadRobotParameters &amp;load_params={})</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rpy_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>rpy__utils_8h</filename>
    <includes id="pragma_8h" name="pragma.h" local="no" imported="no">mc_rtc/pragma.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5f178afee4c03533ae15c4dc04c143e2</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a04f15be86a9827b0d076764f344406ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>afa2b9eed96e67a1bdb6abf90bb597063</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a4626f965b6c407b0bd14e10f98ec42b9</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromMat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a0948fb6dc9382e116f65c76261d26ea0</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromQuat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a058cd1f189f02e2c4986b6aacffa8195</anchor>
      <arglist>(const Eigen::Quaterniond &amp;quat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCHAddon.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>SCHAddon_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>sch</namespace>
    <namespace>sch::mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>transform</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a3c0ffcdf6b05980ab8ca56474c431bc7</anchor>
      <arglist>(S_Object &amp;obj, const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI STP_BV *</type>
      <name>STPBV</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a30354c6b845b9f2c2bf59342c84f9e0d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI S_Polyhedron *</type>
      <name>Polyhedron</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a1d8bc5539da072c12d1f76bc317f8af3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI double</type>
      <name>distance</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a8e193a456c2d3dab3ad5f12ed049e3b1</anchor>
      <arglist>(CD_Pair &amp;pair, Eigen::Vector3d &amp;p1, Eigen::Vector3d &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Springs.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Springs_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Springs</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>Surface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>Surface_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Surface</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>SurfacePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a848cf0b2e8f6ca6f18ceba1769d9a426</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>surface_hull.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>surface__hull_8h</filename>
    <includes id="pragma_8h" name="pragma.h" local="no" imported="no">mc_rtc/pragma.h</includes>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RTC_diagnostic_push</type>
      <name>MC_RTC_diagnostic_ignored</name>
      <anchorfile>surface__hull_8h.html</anchorfile>
      <anchor>a39ac8d618c1d38040aa4b12ef2fd64f5</anchor>
      <arglist>(GCC, &quot;-Wsign-conversion&quot;) MC_RTC_diagnostic_pop namespace sch</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>surface_to_sch</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>adf1399b68c68126e373f564e95bc7531</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;surface, const double &amp;depth=0.01, const unsigned int &amp;slice=8)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>sch_polyhedron</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a3db1776d4f8f36e1eb2a8c51bc157867</anchor>
      <arglist>(const std::vector&lt; sva::PTransformd &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>planar_hull</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a96cab2abc78656a41b2b56987c5fbbfa</anchor>
      <arglist>(const mc_rbdyn::PlanarSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>cylindrical_hull</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>adcd59f0c2e8c9cd94a6f9800c164e723</anchor>
      <arglist>(const mc_rbdyn::CylindricalSurface &amp;surface, const unsigned int &amp;slice)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>gripper_hull</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a70b7277a0499a32774e608f8def99043</anchor>
      <arglist>(const mc_rbdyn::GripperSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>surface_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>surface__utils_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; std::shared_ptr&lt; Surface &gt; &gt;</type>
      <name>readRSDFFromDir</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a01a984b0ca29b3b20b799b01e7239a9b</anchor>
      <arglist>(const std::string &amp;dirname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMP.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>ZMP_8h</filename>
    <includes id="include_2mc__rbdyn_2api_8h" name="api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a329453006944dae96fa60d86dca66db8</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a16ead89124e40e3331ca5342b6bff282</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aa9d4155584b04e51fdb5c24f5739fc24</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>add217737ef65a4059123036de289c029</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>clock.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>clock_8h</filename>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::chrono::duration&lt; double, std::milli &gt;</type>
      <name>duration_ms</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>afd4119022924596532a073fc5a0c6f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::chrono::duration&lt; double, std::micro &gt;</type>
      <name>duration_us</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>adc728153d578b83ef5eef7a24396ffed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock &gt;::type</type>
      <name>clock</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a5a9a29b4e1cc43e334c4ca10059ef277</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConfigurationHelpers.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>ConfigurationHelpers_8h</filename>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <namespace>mc_rtc</namespace>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>ac1107b5d5bcf197a41add86ce445c866</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key, const std::vector&lt; T &gt; &amp;defaultVec)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a9c308b4400fb83031251be1f6ab0adb2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constants.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>constants_8h</filename>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::constants</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_PI</name>
      <anchorfile>constants_8h.html</anchorfile>
      <anchor>aebdd4427aa2148313c07b0eedad449ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>toDeg</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a9790fd3b6c0100cac0f0f7d86c4bec83</anchor>
      <arglist>(const double rad)</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>toRad</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a42486cc28b8ed4721ee34ec2e1be876b</anchor>
      <arglist>(const double degrees)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>GRAVITY</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a04b344c34834432afcfcc1ac86bff22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>gravity</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>acf271123cee2ac958b9ae0f9220ea422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>vertical</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>aaaeaab7136aa7d17fa172fde905c2cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>PI</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a8cb2b2837ea283890b185cfef0631602</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataStore.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>DataStore_8h</filename>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="type__name_8h" name="type_name.h" local="no" imported="no">mc_rtc/type_name.h</includes>
    <includes id="utils__api_8h" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <class kind="struct">mc_rtc::internal::lambda_traits</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...) const &gt;</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...)&gt;</class>
    <class kind="struct">mc_rtc::internal::args_t</class>
    <class kind="struct">mc_rtc::internal::Allocator</class>
    <class kind="struct">mc_rtc::internal::Allocator&lt; T, typename T::eigen_aligned_operator_new_marker_type &gt;</class>
    <class kind="struct">mc_rtc::DataStore</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a759676405e1815363e6d9094dd1919b1</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a0f0cc0f5914bc62d93b19fda0ed53e75</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_name</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>ae1593091ff32313db1baa24bf770172c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_name</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a149f9b7b1184a0044b4f351e534e26ef</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>debug_8h</filename>
    <includes id="utils__api_8h" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <namespace>mc_rtc</namespace>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>debug</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a0bd63387904206fef1971ac84987b3bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deprecated.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>deprecated_8h</filename>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI void</type>
      <name>deprecated</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a44519212b524404c86c6a6f354d58d2c</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;old, const std::string &amp;replace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gui.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>gui_8h</filename>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="ArrayInput_8h" name="ArrayInput.h" local="no" imported="no">mc_rtc/gui/ArrayInput.h</includes>
    <includes id="ArrayLabel_8h" name="ArrayLabel.h" local="no" imported="no">mc_rtc/gui/ArrayLabel.h</includes>
    <includes id="Arrow_8h" name="Arrow.h" local="no" imported="no">mc_rtc/gui/Arrow.h</includes>
    <includes id="Button_8h" name="Button.h" local="no" imported="no">mc_rtc/gui/Button.h</includes>
    <includes id="Checkbox_8h" name="Checkbox.h" local="no" imported="no">mc_rtc/gui/Checkbox.h</includes>
    <includes id="ComboInput_8h" name="ComboInput.h" local="no" imported="no">mc_rtc/gui/ComboInput.h</includes>
    <includes id="DataComboInput_8h" name="DataComboInput.h" local="no" imported="no">mc_rtc/gui/DataComboInput.h</includes>
    <includes id="Force_8h" name="Force.h" local="no" imported="no">mc_rtc/gui/Force.h</includes>
    <includes id="Form_8h" name="Form.h" local="no" imported="no">mc_rtc/gui/Form.h</includes>
    <includes id="IntegerInput_8h" name="IntegerInput.h" local="no" imported="no">mc_rtc/gui/IntegerInput.h</includes>
    <includes id="Label_8h" name="Label.h" local="no" imported="no">mc_rtc/gui/Label.h</includes>
    <includes id="NumberInput_8h" name="NumberInput.h" local="no" imported="no">mc_rtc/gui/NumberInput.h</includes>
    <includes id="NumberSlider_8h" name="NumberSlider.h" local="no" imported="no">mc_rtc/gui/NumberSlider.h</includes>
    <includes id="Point3D_8h" name="Point3D.h" local="no" imported="no">mc_rtc/gui/Point3D.h</includes>
    <includes id="Polygon_8h" name="Polygon.h" local="no" imported="no">mc_rtc/gui/Polygon.h</includes>
    <includes id="Polyhedron_8h" name="Polyhedron.h" local="no" imported="no">mc_rtc/gui/Polyhedron.h</includes>
    <includes id="mc__rtc_2gui_2Robot_8h" name="Robot.h" local="no" imported="no">mc_rtc/gui/Robot.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="no" imported="no">mc_rtc/gui/Rotation.h</includes>
    <includes id="Schema_8h" name="Schema.h" local="no" imported="no">mc_rtc/gui/Schema.h</includes>
    <includes id="StringInput_8h" name="StringInput.h" local="no" imported="no">mc_rtc/gui/StringInput.h</includes>
    <includes id="Table_8h" name="Table.h" local="no" imported="no">mc_rtc/gui/Table.h</includes>
    <includes id="Trajectory_8h" name="Trajectory.h" local="no" imported="no">mc_rtc/gui/Trajectory.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">mc_rtc/gui/Transform.h</includes>
    <includes id="Visual_8h" name="Visual.h" local="no" imported="no">mc_rtc/gui/Visual.h</includes>
    <includes id="XYTheta_8h" name="XYTheta.h" local="no" imported="no">mc_rtc/gui/XYTheta.h</includes>
    <includes id="plot_8h" name="plot.h" local="no" imported="no">mc_rtc/gui/plot.h</includes>
  </compound>
  <compound kind="file">
    <name>ArrayInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>ArrayInput_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::ArrayInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ad70775c90f4b00f10abc4c5a5721e557</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a7f24f6599b905f3caf6ad3ec29def6bf</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArrayLabel.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>ArrayLabel_8h</filename>
    <includes id="Label_8h" name="Label.h" local="no" imported="no">mc_rtc/gui/Label.h</includes>
    <class kind="struct">mc_rtc::gui::ArrayLabelImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a308b0967f9f6dc43f0f27bcc7d1c2b69</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ab51ab91bf57f9e53c1b5c69ab3d8bc61</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Arrow.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Arrow_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::ArrowROImpl</class>
    <class kind="struct">mc_rtc::gui::ArrowImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aae7d8d2d90a01712f0f57ba5f5ec0faf</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ab5cef94f254edfaaa52e300ef9d9287b</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a910fc94e100370b4eaa72737398268aa</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a35479664be1d4b8d4c55baf5e76e16ae</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Button.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Button_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::ButtonImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ButtonImpl&lt; Callback &gt;</type>
      <name>Button</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a7d2e7edd5eaf913a973c519cdd6affa2</anchor>
      <arglist>(const std::string &amp;name, Callback cb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Checkbox.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Checkbox_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::CheckboxImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>CheckboxImpl&lt; GetT, Callback &gt;</type>
      <name>Checkbox</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>afc7e12ae3accc04250d14da90634986b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Callback cb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ComboInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>ComboInput_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::ComboInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>ComboInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aea7948a0427bfd1acd2a28803e5559e1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataComboInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>DataComboInput_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::DataComboInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>DataComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>DataComboInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a5baa34dd8ac370b60f3ffbf0b2fd9dda</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traits.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/details/</path>
    <filename>traits_8h</filename>
    <class kind="struct">mc_rtc::gui::details::NotAGetter</class>
    <class kind="struct">mc_rtc::gui::details::ReturnTypeImpl</class>
    <class kind="struct">mc_rtc::gui::details::ReturnTypeImpl&lt; GetT, false &gt;</class>
    <class kind="struct">mc_rtc::gui::details::ReturnType</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T &gt;</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T, Args... &gt;</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::details</namespace>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a437b4050328d7178f5872223cf9f7f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ReturnType&lt; GetT &gt;::type</type>
      <name>ReturnTypeT</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a62d70a1c5467de8404eceee15a80da68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_getter_impl</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a8e445bc0e47af1ff42f00cec4cbacbf7</anchor>
      <arglist>(void_t&lt; decltype(std::declval&lt; GetT &gt;()())&gt; *)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_getter_impl</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a664fd97ecf7ee798c1fcace58d4f8a21</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_getter</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a3f24a46e2245c7951863c943009a6b3c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>elements.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>elements_8h</filename>
    <includes id="MessagePackBuilder_8h" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <includes id="include_2mc__rtc_2gui_2api_8h" name="api.h" local="no" imported="no">mc_rtc/gui/api.h</includes>
    <class kind="struct">mc_rtc::gui::Element</class>
    <class kind="struct">mc_rtc::gui::DataElement</class>
    <class kind="struct">mc_rtc::gui::CallbackElement</class>
    <class kind="struct">mc_rtc::gui::CommonInputImpl</class>
    <class kind="struct">mc_rtc::gui::VoidCallbackElement</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Elements</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a32d283e5c35e7fd7dcddbc0199bfdc06</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ab021df6aac4654c454f46c77646e745f">Label</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93bead7e77b18cbfc7d0c892eb65a69f">ArrayLabel</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a87b7760f14fbff78d8819291f36ab9a0">Button</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4f8222964f9a317cef99dddc23a121bd">Checkbox</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a6e2d1c6d37623990d2d3e0919ee03ff1">StringInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad9da16a5098cfbf3002491c43df151af">IntegerInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7be1677ccab64a74bebea1ab86131da8">NumberInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2e9c5f285f5ff6be9348942eac1cc6ad">NumberSlider</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ed2cbbe9de17e308d54422d43f3deaf">ArrayInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad7e38bc04789bd7093fa285ba7a91f4d">ComboInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06aa8aea7afab217ab8095ef9c7404aa6c9">DataComboInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a1685c4cb9754df6a8c65c8564d8d0d74">Point3D</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2c1f43c429c5e00feaef7ba3327375dc">Trajectory</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06af1a42bd417390fc63b030a519624607a">Rotation</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ff4148554480a37f85efd299df04850">Transform</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7146a60667b422e69fd050fe1df6859a">Schema</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad359c6df99b25183d81f7d728b71de0e">Form</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a9eb6b78a99cdb6ffd3d40d18621d9f80">Force</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a0f4e1aaabd074689b7d3ead824d1ee8e">Arrow</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93b34e4f6ff555f9cc248bae9cd00386">XYTheta</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a51c45b795d5d18a3e4e0c37e8b20a141">Table</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a5d1eca158c00250d9c4c32d947b7c433">Robot</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4557e77491fe3dbd9a6055aeb0ed00d7">Visual</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a94c8141fc670449195562629a2055edf">PolyhedronTrianglesList</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a35ddbf0f6429fc2aabd5fadc20766153">PolyhedronVerticesTriangles</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>Force.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Force_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::ForceROImpl</class>
    <class kind="struct">mc_rtc::gui::ForceImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a1dfaa55db99fac62693744326d7f1cb9</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ae5e645b29b00acb907a3080e35a66697</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aed7593a02cc0bcc3b045e2c85a3a2284</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>af532dce0703aff08a435a2c53182de1b</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Form.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Form_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::FormImpl</class>
    <class kind="struct">mc_rtc::gui::FormElement</class>
    <class kind="struct">mc_rtc::gui::internal::CallbackOrValue</class>
    <class kind="struct">mc_rtc::gui::internal::CallbackOrValue&lt; T, void &gt;</class>
    <class kind="struct">mc_rtc::gui::internal::FormDataInput</class>
    <class kind="struct">mc_rtc::gui::internal::FormArrayInput</class>
    <class kind="struct">mc_rtc::gui::FormComboInput</class>
    <class kind="struct">mc_rtc::gui::FormDataComboInput</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_DATA_INPUT_HELPER</name>
      <anchorfile>Form_8h.html</anchorfile>
      <anchor>a062345796d2fda83f914c01ae308ae33</anchor>
      <arglist>(DATAT, ELEMENT, FNAME)</arglist>
    </member>
    <member kind="function">
      <type>internal::FormArrayInput&lt; T &gt;</type>
      <name>FormArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a7dfdb12d58d770f35ea3c3643d2ac95c</anchor>
      <arglist>(const std::string &amp;name, bool required, bool fixed_size=false)</arglist>
    </member>
    <member kind="function">
      <type>internal::FormArrayInput&lt; T &gt;</type>
      <name>FormArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a373b1db44b534128d823f218885daaa4</anchor>
      <arglist>(const std::string &amp;name, bool required, const T &amp;value, bool fixed_size=true)</arglist>
    </member>
    <member kind="function">
      <type>internal::FormArrayInput&lt; details::ReturnTypeT&lt; Callback &gt;, Callback &gt;</type>
      <name>FormArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aa4362ee6c9e772360facce9dea5d1874</anchor>
      <arglist>(const std::string &amp;name, bool required, Callback callback, bool fixed_size=true)</arglist>
    </member>
    <member kind="function">
      <type>FormImpl&lt; Callback &gt;</type>
      <name>Form</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a94d2215e324dad2adb958327c16bf167</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IntegerInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>IntegerInput_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::IntegerInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>IntegerInputImpl&lt; GetT, SetT &gt;</type>
      <name>IntegerInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ac4f13804b0853d4e3ee9d53afed5b06c</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Label.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Label_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::LabelImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>LabelImpl&lt; GetT &gt;</type>
      <name>Label</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a4b4617f09036971e7ccbf6917ee37c19</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NumberInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>NumberInput_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::NumberInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>NumberInputImpl&lt; GetT, SetT &gt;</type>
      <name>NumberInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a42ba0a1ea0c4890a7941cf76892e1268</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NumberSlider.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>NumberSlider_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::NumberSliderImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>NumberSliderImpl&lt; GetT, SetT &gt;</type>
      <name>NumberSlider</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a5c6714af47a8cb199c7345ed1c2e8ffe</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn, double min, double max)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plot.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>plot_8h</filename>
    <includes id="Abscissa_8h" name="Abscissa.h" local="no" imported="no">mc_rtc/gui/plot/Abscissa.h</includes>
    <includes id="AbscissaOrdinate_8h" name="AbscissaOrdinate.h" local="no" imported="no">mc_rtc/gui/plot/AbscissaOrdinate.h</includes>
    <includes id="Ordinate_8h" name="Ordinate.h" local="no" imported="no">mc_rtc/gui/plot/Ordinate.h</includes>
    <includes id="plot_2Polygon_8h" name="Polygon.h" local="no" imported="no">mc_rtc/gui/plot/Polygon.h</includes>
    <includes id="Polygons_8h" name="Polygons.h" local="no" imported="no">mc_rtc/gui/plot/Polygons.h</includes>
  </compound>
  <compound kind="file">
    <name>Abscissa.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>Abscissa_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="plot_2types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Abscissa</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a13155e82e2012b946c5c973369b1db56</anchor>
      <arglist>(AxisConfiguration config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a243fda4292af83b9a3c37610efb76e2f</anchor>
      <arglist>(std::string_view legend, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbscissaOrdinate.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>AbscissaOrdinate_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="plot_2types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinateWithColor</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::AbscissaOrdinate&lt; GetXT, GetYT &gt;</type>
      <name>XY</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>ab22cf8c8dfe0090e06c4a4ddd484d82a</anchor>
      <arglist>(std::string_view name, GetXT get_x_fn, GetYT get_y_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::AbscissaOrdinateWithColor&lt; GetXT, GetYT, GetColor &gt;</type>
      <name>XY</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a7b441029a734fc7579954b5cd15122a8</anchor>
      <arglist>(std::string_view name, GetXT get_x_fn, GetYT get_y_fn, GetColor get_color_fn, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ordinate.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>Ordinate_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="plot_2types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Ordinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::OrdinateWithColor</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Ordinate&lt; GetT &gt;</type>
      <name>Y</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a09e783ef208faafb14fb04a4d269619a</anchor>
      <arglist>(std::string_view name, GetT get_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::OrdinateWithColor&lt; GetT, GetColor &gt;</type>
      <name>Y</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a6c606d5a78632224ad064015a385e81c</anchor>
      <arglist>(std::string_view name, GetT get_fn, GetColor get_color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Polygon.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>plot_2Polygon_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="plot_2types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygon</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Polygon&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a455aeb83363d1c76669333ae6827f638</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Polygon.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Polygon_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::PolygonImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ac7c7c596bdb09e8c01e26e8fb53ce360</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a2b137bae8372a9a84cdb28508e7de1dd</anchor>
      <arglist>(const std::string &amp;name, const Color &amp;color, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aed41b5cb5e5b9e7fff1670617e2584be</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Polygons.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>Polygons_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="plot_2types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygons</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Polygons&lt; GetT &gt;</type>
      <name>Polygons</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a2bfb0562e6093e2274530cb22f523030</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>plot_2types_8h</filename>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::Range</class>
    <class kind="struct">mc_rtc::gui::plot::AxisConfiguration</class>
    <class kind="struct">mc_rtc::gui::plot::PolygonDescription</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Plot</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>ae8d436e1212bee55dfdb14d50b0d6be9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9aeb6d8ae6f20283755b339c0dc273988b">Standard</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9a74c53bcd3dcb2bb79993b2fec37d362a">XY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a6e2b70125fa1d433838b9a8f2bf28c4d</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dac9812e629ac3822b86f7c19704983d0e">Abscissa</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da5d32a72e2819aaf62362fcc862b37c5e">Ordinate</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4daa7a7e14b2a005870ba134e6c92bb7b51">Polygons</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dab83f39f54c4bd7f3a02f9a45fd996031">AbscissaOrdinate</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_Abscissa</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a73e5c8e2228efe9d85770fa3233df148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>ad9dd006fddf621ad45bc2ed39819cb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a807bb49afba6fffd36b8eaeb1f305805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a4670673e25f4957cc8b1d6933601fbb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a1e919d3536d792111197f12de304db37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Solid</name>
      <anchorfile>plot_2types_8h.html</anchorfile>
      <anchor>ae070f931bda093c33a301115abc450b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Dotted</name>
      <anchorfile>plot_2types_8h.html</anchorfile>
      <anchor>af050e39a625ecaa0d27537968bbeeaff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Dashed</name>
      <anchorfile>plot_2types_8h.html</anchorfile>
      <anchor>a3aa6973802ff89463140e58e4978b222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Left</name>
      <anchorfile>plot_2types_8h.html</anchorfile>
      <anchor>aa149c1d1da2ae1c94f1ae91f4919625a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>types_8h</filename>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="include_2mc__rtc_2gui_2api_8h" name="api.h" local="no" imported="no">mc_rtc/gui/api.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_rtc::gui::Color</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::Color &gt;</class>
    <class kind="struct">mc_rtc::gui::LineConfig</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::LineConfig &gt;</class>
    <class kind="struct">mc_rtc::gui::ArrowConfig</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::ArrowConfig &gt;</class>
    <class kind="struct">mc_rtc::gui::ForceConfig</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::ForceConfig &gt;</class>
    <class kind="struct">mc_rtc::gui::PointConfig</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::PointConfig &gt;</class>
    <class kind="struct">mc_rtc::gui::PolyhedronConfig</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::PolyhedronConfig &gt;</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="enumeration">
      <type></type>
      <name>LineStyle</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a23166295a3983f35cb0fa510b4c156c9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a23166295a3983f35cb0fa510b4c156c9ae41480b6bbfbf7407974a88d3d34f4fa">Solid</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a23166295a3983f35cb0fa510b4c156c9a90c09393a4c0970bc9a6703ad527781c">Dotted</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>Point3D.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Point3D_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::Point3DROImpl</class>
    <class kind="struct">mc_rtc::gui::Point3DImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ac40c7c59cc19e0fe7be9d8a5a8564f74</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0c1802e2d8623ee22fffc408e69eaf56</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ad2db10f53541f7b6a925d724023de7ee</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a6a9e684830b60a463c848a290d2b910b</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Polyhedron.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Polyhedron_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::details::PolyhedronTrianglesListImpl</class>
    <class kind="struct">mc_rtc::gui::details::PolyhedronVerticesTrianglesImpl</class>
    <class kind="struct">mc_rtc::gui::details::ColoredPolyhedronImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::details</namespace>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a1cadd149b5d41c11735dbd88babe8682</anchor>
      <arglist>(const std::string &amp;name, GetTrianglesT get_triangles_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0844bcf3f749bc2c3bcfb36bab3248b7</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetTrianglesT get_triangles_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a81c80807fb522ea42e550d8afef97d96</anchor>
      <arglist>(const std::string &amp;name, GetVerticesOrTrianglesT get_vertices_or_triangles_fn, GetTrianglesOrColorsT get_triangles_or_colors_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a67f435aeffc46d95c478578d86aef732</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetVerticesOrTrianglesT get_vertices_or_triangles_fn, GetTrianglesOrColorsT get_triangles_or_colors_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ColoredPolyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a5171220f7e195ae9fab9affc5b648973</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetTrianglesT get_triangles_fn, GetColorT get_color_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a8f62834ebdac62261d49bf4582df541c</anchor>
      <arglist>(const std::string &amp;name, GetVerticesT get_vertices_fn, GetTrianglesT get_triangles_fn, GetColorT get_color_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0074155dfebc9c355c338024df640aa5</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetVerticesT get_vertices_fn, GetTrianglesT get_triangles_fn, GetColorT get_color_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rotation.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Rotation_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::RotationROImpl</class>
    <class kind="struct">mc_rtc::gui::RotationImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>RotationROImpl&lt; GetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a9dc809d7e99978fe3f5e2439d1a20771</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>RotationImpl&lt; GetT, SetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a6440392ea4b48778f6d4012e0400ee5b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Schema.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Schema_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::SchemaImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>SchemaImpl&lt; Callback &gt;</type>
      <name>Schema</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0c892f6b2ba9e06d4bda32a16b76b75b</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;schema, Callback cb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StateBuilder.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>StateBuilder_8h</filename>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="plot_8h" name="plot.h" local="no" imported="no">mc_rtc/gui/plot.h</includes>
    <class kind="struct">mc_rtc::gui::StateBuilder</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ElementsStacking</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a649ddcaedb769dede3922fa845e71ca4</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a649ddcaedb769dede3922fa845e71ca4a06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a649ddcaedb769dede3922fa845e71ca4ac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>StringInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>StringInput_8h</filename>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::StringInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>StringInputImpl&lt; GetT, SetT &gt;</type>
      <name>StringInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a4f8c1eb018c71e856f48cee90d7ea65d</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Table.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Table_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::details::TableImpl</class>
    <class kind="struct">mc_rtc::gui::details::FormattedTableImpl</class>
    <class kind="struct">mc_rtc::gui::details::StaticTableImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::details</namespace>
    <member kind="function">
      <type>details::StaticTableImpl&lt; GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a05cd899ebf8c1a1bf56acd3f44ce0b57</anchor>
      <arglist>(const std::string &amp;name, std::vector&lt; std::string &gt; header, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::StaticTableImpl&lt; GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a2d55934be28cf780ebdd662095eb5d1a</anchor>
      <arglist>(const std::string &amp;name, std::vector&lt; std::string &gt; header, std::vector&lt; std::string &gt; format, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::TableImpl&lt; GetHeader, GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a25d7b1c4f525b8357ff241d726e506b2</anchor>
      <arglist>(const std::string &amp;name, GetHeader get_header_fn, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::FormattedTableImpl&lt; GetHeader, GetFormat, GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a6785282ae9524556f7069b9a87076eef</anchor>
      <arglist>(const std::string &amp;name, GetHeader get_header_fn, GetFormat get_format_fn, GetData get_data_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Trajectory.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Trajectory_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::TrajectoryImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a062a5442d4cabf7a31d7f83008751a6a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aa175899f8868d419050975dc9f79ed97</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transform.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Transform_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::TransformROImpl</class>
    <class kind="struct">mc_rtc::gui::TransformImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>TransformROImpl&lt; GetT &gt;</type>
      <name>Transform</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aa5342b74063b005e6a03efd66adef74e</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TransformImpl&lt; GetT, SetT &gt;</type>
      <name>Transform</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a96cb90761dce6d6e3441d779e7184847</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Visual.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>Visual_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <includes id="configuration__io_8h" name="configuration_io.h" local="no" imported="no">mc_rbdyn/configuration_io.h</includes>
    <includes id="MessagePackBuilder_8h" name="MessagePackBuilder.h" local="yes" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <class kind="struct">mc_rtc::gui::details::VisualImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::details</namespace>
    <member kind="function">
      <type>details::VisualImpl&lt; GetVisual, GetPos &gt;</type>
      <name>Visual</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a1cf7a01c7c66698472b6299464cd40c5</anchor>
      <arglist>(const std::string &amp;name, GetVisual get_visual_fn, GetPos get_pos_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XYTheta.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>XYTheta_8h</filename>
    <includes id="traits_8h" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="elements_8h" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::XYThetaROImpl</class>
    <class kind="struct">mc_rtc::gui::XYThetaImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>XYThetaROImpl&lt; GetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aaaa2ebe2ecb490f266fe541318646561</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>XYThetaImpl&lt; GetT, SetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a98fa40132858d1d9c0091acb36ce9f32</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>io__utils_8h</filename>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::io</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rtc_1_1io.html</anchorfile>
      <anchor>af24adad562092ccd4f760a38c86fcf95</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
      <docanchor file="namespacemc__rtc_1_1io">to_string</docanchor>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rtc_1_1io.html</anchorfile>
      <anchor>a38fc0c2f37aa3befdc6ab09b25c11f1f</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const unsigned precision=std::numeric_limits&lt; typename Container::value_type &gt;::digits10)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rtc_1_1io.html</anchorfile>
      <anchor>a288c60b8869f856d23c8a94ac085438e</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterators.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>iterators_8h</filename>
    <class kind="struct">mc_rtc::SharedPtrVectorIterator</class>
    <class kind="struct">mc_rtc::SharedPtrVectorConstIterator</class>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>loader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>loader_8h</filename>
    <includes id="DataStore_8h" name="DataStore.h" local="no" imported="no">mc_rtc/DataStore.h</includes>
    <includes id="loader__api_8h" name="loader_api.h" local="no" imported="no">mc_rtc/loader_api.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="class">mc_rtc::ObjectLoader</class>
    <class kind="class">mc_rtc::LoaderException</class>
    <class kind="class">mc_rtc::LTDLMutex</class>
    <class kind="class">mc_rtc::LTDLHandle</class>
    <class kind="class">mc_rtc::Loader</class>
    <class kind="class">mc_rtc::ObjectLoader</class>
    <class kind="struct">mc_rtc::ObjectLoader::ObjectDeleter</class>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; LTDLHandle &gt;</type>
      <name>LTDLHandlePtr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a04f4430d990b320f494b3a21112c7e3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader_api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>loader__api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_VERSION</name>
      <anchorfile>loader__api_8h.html</anchorfile>
      <anchor>a20b4289ae8266a5d45b7799ebc1c2cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLIMPORT</name>
      <anchorfile>loader__api_8h.html</anchorfile>
      <anchor>ab10c7ea7ab2d8c66f1766d42f4271e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLEXPORT</name>
      <anchorfile>loader__api_8h.html</anchorfile>
      <anchor>a6d2514a2d7cbf1461637d19c84d4e190</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLLOCAL</name>
      <anchorfile>loader__api_8h.html</anchorfile>
      <anchor>a124acbd88de464891bac5a0d4753f3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLAPI</name>
      <anchorfile>loader__api_8h.html</anchorfile>
      <anchor>a4b7b7ab74d91ada84566764639f2f8c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_LOCAL</name>
      <anchorfile>loader__api_8h.html</anchorfile>
      <anchor>acf2b4c50e45b046a77958363021c3f17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlatLog.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>FlatLog_8h</filename>
    <includes id="log_2utils_8h" name="utils.h" local="no" imported="no">mc_rtc/log/utils.h</includes>
    <includes id="utils__api_8h" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <class kind="struct">mc_rtc::log::FlatLog</class>
    <class kind="struct">mc_rtc::log::FlatLog::record</class>
    <class kind="struct">mc_rtc::log::FlatLog::entry</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
  </compound>
  <compound kind="file">
    <name>iterate_binary_log.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>iterate__binary__log_8h</filename>
    <includes id="MessagePackBuilder_8h" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <includes id="FlatLog_8h" name="FlatLog.h" local="no" imported="no">mc_rtc/log/FlatLog.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double)&gt;</type>
      <name>binary_log_callback</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a2e5bbb4664bc287ec78732a63a7cd646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(mc_rtc::MessagePackBuilder &amp;, const std::vector&lt; std::string &gt; &amp;)&gt;</type>
      <name>copy_callback</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9c09aed839e3ee87a5be3e286a3e8903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double, const copy_callback &amp;, const char *, uint64_t)&gt;</type>
      <name>binary_log_copy_callback</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a1c86e8f30b914960080029679897a749</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>ae939074ac3cce1fde0bb5e0ea7e90c86</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_copy_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a51b18863af2ea7f3e981b32be6b2174f</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logger.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>Logger_8h</filename>
    <includes id="log_2utils_8h" name="utils.h" local="no" imported="no">mc_rtc/log/utils.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="utils__api_8h" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <class kind="struct">mc_rtc::Logger</class>
    <class kind="struct">mc_rtc::Logger::KeyAddedEvent</class>
    <class kind="struct">mc_rtc::Logger::KeyRemovedEvent</class>
    <namespace>mc_rtc</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOG_HELPER</name>
      <anchorfile>Logger_8h.html</anchorfile>
      <anchor>af8dabb8648cae440b76989b1316f2d58</anchor>
      <arglist>(NAME, MEMBER)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOG_GETTER</name>
      <anchorfile>Logger_8h.html</anchorfile>
      <anchor>a0f292ca53baa48d5044772065cc899b4</anchor>
      <arglist>(NAME, METHOD)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>log_2utils_8h</filename>
    <includes id="MessagePackBuilder_8h" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <class kind="struct">mc_rtc::log::GetLogType</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; std::vector&lt; double, A &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; std::array&lt; double, N &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; Eigen::Ref&lt; Type, Options, StrideType &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::is_serializable</class>
    <class kind="struct">mc_rtc::log::is_serializable_member</class>
    <class kind="struct">mc_rtc::log::is_serializable_member&lt; MemberT T::* &gt;</class>
    <class kind="struct">mc_rtc::log::is_serializable_getter</class>
    <class kind="struct">mc_rtc::log::is_serializable_getter&lt; MethodRetT(T::*)() const &gt;</class>
    <class kind="struct">mc_rtc::log::callback_is_serializable</class>
    <class kind="struct">mc_rtc::log::callback_is_serializable&lt; T, void_t&lt; typename std::result_of&lt; T()&gt;::type &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::LogWriter</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IMPL_MAPPING</name>
      <anchorfile>log_2utils_8h.html</anchorfile>
      <anchor>a5e23e6dc4a586d5ce355088cf563b4b9</anchor>
      <arglist>(CPPT, ENUMV)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a50801f83a6ed3945d8cc199c9b3c4ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogType</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>ae623e7dc6e6722fd48752713664b3549</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ac26f15e86e3de4c398a8273272aba034">Bool</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a310554dc6901f24b84131602f5aa7728">Int8_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a52b8419558c2745bb3f452f5dba89c0e">Int16_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a31da5bff69db770ab36fc4197417eb6e">Int32_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a6ee9244c64454706197c23f12163b3e4">Int64_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549aaa8a6d419e8de319fc0fb8151154a3c8">Uint8_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a2cf01fdc4d5b4b49bd5531cea84517ae">Uint16_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a114753c09137e486b349fb7ded3a738e">Uint32_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a752da4dabeb6a21c46c62388107f2b53">Uint64_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a22ae0e2b89e5e3d477f988cc36d3272b">Float</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ad909d38d705ce75386dd86e611a82f5b">Double</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a27118326006d3829667a400ad23d5d98">String</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ae9b0a766c9aba1f88f69157593dcade3">Vector2d</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549abd18c4378a1b42df9061eb5bd43755c9">Vector3d</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ada57d50e3cb02d10e15d0dab71fb846f">Vector6d</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ab2e07f7f9214839944e939b29de2252b">VectorXd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a9dea906d4e9243ea050120f8f4a1f1c9">Quaterniond</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a2ec69636c565a422c59d7fc675bcd836">PTransformd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a9fd99a0871090c0c75a35ac57944e044">ForceVecd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a08efd42d00b69280268271026472b237">MotionVecd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a18f1829c8dab599745c7d5bc84585aa2">VectorDouble</enumvalue>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>LogTypeNames</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9979086ae04c2369f6ea39d42ec2fcb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>LogTypeName</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a6351f9d1bb2bb7f8f3508cc9f0e36e5e</anchor>
      <arglist>(LogType t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9aa92bc1668b9218bf395ae4fc92e795</anchor>
      <arglist>(bool, Bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a4a530e246a423018eb4757de9a38fe0a</anchor>
      <arglist>(int8_t, Int8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a701b7606804a3db8de4c0e7a52d928c0</anchor>
      <arglist>(int16_t, Int16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a2bf6ab72f6469b3269f31e5bba5a2e53</anchor>
      <arglist>(int32_t, Int32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a8bfaf29781e441da25c30cbeba3acf09</anchor>
      <arglist>(int64_t, Int64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9e592f5c13ba9f39d5b1a71a53bdfd8e</anchor>
      <arglist>(uint8_t, Uint8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a70fc3b45c7d5e2602b6c0967efa4b4f0</anchor>
      <arglist>(uint16_t, Uint16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a5725243119abb09aa142128b7fc9f40f</anchor>
      <arglist>(uint32_t, Uint32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>ad6b297b2129cec68c11ffa52c448d8ae</anchor>
      <arglist>(uint64_t, Uint64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a7349ebfd4a26447bfa3c1d087924b8ed</anchor>
      <arglist>(float, Float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a254cbef473857a8f7300c4893e025070</anchor>
      <arglist>(double, Double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a209c2c06d48dddd58e98eb20b6537fbf</anchor>
      <arglist>(std::string, String)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a3832207f7dfe9bb0a76bd55c40141aa0</anchor>
      <arglist>(Eigen::Vector2d, Vector2d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a8a95695038f7381e9ff63fb77021fe22</anchor>
      <arglist>(Eigen::Vector3d, Vector3d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>abde1c442a27ca22960f0a2c42c12e1e5</anchor>
      <arglist>(Eigen::Vector6d, Vector6d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a40e42a14f68a8cacf3f5c14bdc235422</anchor>
      <arglist>(Eigen::VectorXd, VectorXd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a77ff7d3e9889df9292a6575c95b473a8</anchor>
      <arglist>(Eigen::Quaterniond, Quaterniond)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a85a6ea306358c1ae94b79e65b22cb252</anchor>
      <arglist>(sva::PTransformd, PTransformd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a42e9d70a432b1bc02a1f5dcff729bfb5</anchor>
      <arglist>(sva::ForceVecd, ForceVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a70d34eabb941deeb9f0dea2280ae1201</anchor>
      <arglist>(sva::MotionVecd, MotionVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>aae268af9ba09c4178e3d3711b5e3a32a</anchor>
      <arglist>(sva::ImpedanceVecd, MotionVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a924ed0ac7a53f8d0f36281e6e9d337a5</anchor>
      <arglist>(mc_rbdyn::Gains2d, Vector2d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a5dc69800593dae0a5002db3668e9294d</anchor>
      <arglist>(mc_rbdyn::Gains3d, Vector3d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>aa0c490e185c40165c27a46a5a22517f3</anchor>
      <arglist>(mc_rbdyn::Gains6d, Vector6d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>utils_8h</filename>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
  </compound>
  <compound kind="file">
    <name>logging.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>logging_8h</filename>
    <includes id="utils__api_8h" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
    <namespace>mc_rtc::log::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MC_FMT_STREAMED</name>
      <anchorfile>logging_8h.html</anchorfile>
      <anchor>a3f0e2902b9317d3be03056aaf139412d</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_STACKTRACE_LINK</name>
      <anchorfile>logging_8h.html</anchorfile>
      <anchor>a25cda0d096362eae64cebfb4843453ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_ERROR</name>
      <anchorfile>logging_8h.html</anchorfile>
      <anchor>ac6c926a2075cbaa39c4e9d12a2cac7e2</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_WARNING</name>
      <anchorfile>logging_8h.html</anchorfile>
      <anchor>ad8493c09711c1562481e104d334694db</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_INFO</name>
      <anchorfile>logging_8h.html</anchorfile>
      <anchor>a63a6359b81688166256710bf0ea161df</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_SUCCESS</name>
      <anchorfile>logging_8h.html</anchorfile>
      <anchor>ada5a572b2a8b25bcd9f471bc5c3c0787</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_ERROR_AND_THROW</name>
      <anchorfile>logging_8h.html</anchorfile>
      <anchor>ae0e43eaf4d638a83e59084a107b3b62f</anchor>
      <arglist>(exception_type, args)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>success</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a4be6522543b254e76db5d80f58a4e290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>info</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a2e57684e4d69b10eb5c9f41cf59c11ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>cerr</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>aa8cc2cc8dc25d49fa533f32a67f73c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI void</type>
      <name>notify</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a825688a25acf02d7518a7a1f19c83e04</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI void</type>
      <name>disable_notifications</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a61a4f2b21a3c9e57114e8d852bc125ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error_and_throw</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a2bad497e8a4c7a7f29f7ab908c83274e</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>critical</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a82d6969aa78c74fbe4716532661ea0d8</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>aa189b2ec856ad8f96d632d635efc05ce</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9e944001fd155fd1621157e450cf3d06</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a0d3a4bb8b582e5c1795b8ae9cd5f3ec9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>success</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a4493319384c54d938a70d54193ed2dbc</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a54ebcc7be85c707e724b30af37292667</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_NONE</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>ab85e3cb123f11bf1f9290abe17a7d49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_BLUE</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a15b005678017d9608ff8f599e34e41de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_GREEN</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a7ab584d4904b2b1695ae2cb04ca984ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_PURPLE</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>aeb1d99e566cb5c454074579fcfa712f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_RED</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a9003469324d75c8934d51654d98ef862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessagePackBuilder.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>MessagePackBuilder_8h</filename>
    <includes id="utils__api_8h" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <includes id="Gains_8h" name="Gains.h" local="no" imported="no">mc_rbdyn/Gains.h</includes>
    <class kind="struct">mc_rtc::MessagePackBuilder</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_like</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>acba6fe117d8807e358abe0a19f91362c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integral_v</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a71205a048e877fdade723bb88b6bbbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int8_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a1916e10919c876ca3ec9601e5fa6110d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int16_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>aea3a30b04f5e1536751b6b0eb2a2d8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int32_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>afdbadbf7cd608469cc1b986f907b0590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int64_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a5d81455351f259d743932cff9fb14442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint8_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>aabd034adefcd3f66b71c74173a942cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint16_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a11741a3b42edf962a451b31c84ec9c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint32_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a8f487774ba8a847c81c631e8c44509b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint64_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>aaa486786eded3072808be5972a79c15a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pragma.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>pragma_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_PP_ID</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>af3a2e2d6c980d07a49970e25c5d41480</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_STRINGIFY_</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>ae64eef40bbdd1c92469f30e64b774e04</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_STRINGIFY</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>ae40018a9e89fd64d3d3f790ca47cfa7f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_PRAGMA</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a8b26cd59b48fd7f9a75f848ec1963e65</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_WN</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>aa077be087e9b5e0e80d29ceb922af636</anchor>
      <arglist>(fun,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_0</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a4af0974096a7f82dbf9a9d12ed30a90a</anchor>
      <arglist>(fun)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_1</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>aec845bab774899526515c76978058a55</anchor>
      <arglist>(fun, X, Y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_2</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>aa5c3a443aa863d55c2eddad4de772b85</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_3</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>aa30117a8c590694c7766b22ceef74b0d</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_4</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a6803324242017bdb17050394560aeb5a</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_5</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>af448ba39ad2935ff76446bc1979522da</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_6</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a313ee4f04812fed7e80a7704f2170a87</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_7</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a11c29fa750e184bef82b6be408687315</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_8</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>ac00f36990364a7007d671684da1574b8</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_9</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>ab032378e87b8c10476e9aee3cc528e4a</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP2_10</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>aa9db95d32724926b4d70ab2a9f946bd6</anchor>
      <arglist>(fun, X, Y,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GET_MACRO</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a7bc988f4aa0896d1c3894abe5f5dbd13</anchor>
      <arglist>(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, NAME,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MAP_TWO_ARGS</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a68ae92d9a7368007a7f93d6e5bee5454</anchor>
      <arglist>(fun,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GCC_diagnostic_ignored</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>abb0fdda60b84f4da1bf5f29993d5ac52</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_ClangOnly_diagnostic_ignored</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>ac787813b16519f3f73b107be57393b2c</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GCCOnly_diagnostic_ignored</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a2134aaaf2025a8052f43fee929131bf1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_MSVC_diagnostic_ignored</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a02fba0b09122a66e1ebc4148d27ae52a</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_diagnostic_ignored_</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a50f154e9e60e5f9860cc22930076d527</anchor>
      <arglist>(c, w)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_diagnostic_ignored</name>
      <anchorfile>pragma_8h.html</anchorfile>
      <anchor>a3f03fcd513350b95f4c858ab704d09e7</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shared.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>shared_8h</filename>
    <class kind="struct">mc_rtc::shared</class>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>type_name.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>type__name_8h</filename>
    <includes id="utils__api_8h" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI std::string</type>
      <name>demangle</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>af017e274f3cf4699850fdbf753d07fa2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_name</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a8fb61bc6391bc9cd0ef2aa0efff2d641</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unique_ptr.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>unique__ptr_8h</filename>
    <class kind="class">mc_rtc::unique_ptr</class>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>heatmap.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/utils/</path>
    <filename>heatmap_8h</filename>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::utils</namespace>
    <member kind="function">
      <type>T</type>
      <name>heatmap</name>
      <anchorfile>namespacemc__rtc_1_1utils.html</anchorfile>
      <anchor>a82fe941770f36f355a999699984b5943</anchor>
      <arglist>(double minimum, double maximum, double value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils_api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>utils__api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_VERSION</name>
      <anchorfile>utils__api_8h.html</anchorfile>
      <anchor>a46af0212489d0be9e68321c07f865e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLIMPORT</name>
      <anchorfile>utils__api_8h.html</anchorfile>
      <anchor>a8c714e5ec4642ad2fbeb874ec1ea290c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLEXPORT</name>
      <anchorfile>utils__api_8h.html</anchorfile>
      <anchor>a59b21389e495a6b42899eea7452bde3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLLOCAL</name>
      <anchorfile>utils__api_8h.html</anchorfile>
      <anchor>ac847eca5b9bc55005276d08214aad7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLAPI</name>
      <anchorfile>utils__api_8h.html</anchorfile>
      <anchor>a797d67eb3213978212928ed90cf0dff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_LOCAL</name>
      <anchorfile>utils__api_8h.html</anchorfile>
      <anchor>af3c7cdf1557399d0a6334aef3b20a746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>void_ptr.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>void__ptr_8h</filename>
    <class kind="struct">mc_rtc::void_ptr_caster</class>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; void, void(*)(void *)&gt;</type>
      <name>void_ptr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a180392c9544bd202410478d8a4fb623d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void_ptr</type>
      <name>make_void_ptr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>aa0b92b93372ae4db1cf2eb6ee6cd0828</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void_ptr</type>
      <name>make_void_ptr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a05e165ab46d424a119034202cbc79999</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundedSpeedConstr.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>BoundedSpeedConstr_8h</filename>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="class">mc_solver::BoundedSpeedConstr</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionsConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>CollisionsConstraint_8h</filename>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="Collision_8h" name="Collision.h" local="no" imported="no">mc_rbdyn/Collision.h</includes>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="class">mc_solver::CollisionsConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>CoMIncPlaneConstr.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>CoMIncPlaneConstr_8h</filename>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="deprecated_8h" name="deprecated.h" local="no" imported="no">mc_rtc/deprecated.h</includes>
    <includes id="polygon__utils_8h" name="polygon_utils.h" local="no" imported="no">mc_rbdyn/polygon_utils.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="class">mc_solver::CoMIncPlaneConstr</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>CompoundJointConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>CompoundJointConstraint_8h</filename>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="CompoundJointConstraintDescription_8h" name="CompoundJointConstraintDescription.h" local="no" imported="no">mc_rbdyn/CompoundJointConstraintDescription.h</includes>
    <includes id="Robots_8h" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="struct">mc_solver::details::CompoundJointConstraint</class>
    <class kind="struct">mc_solver::CompoundJointConstraint</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::details</namespace>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescription</type>
      <name>CompoundJointConstraintDescription</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>afa4d95156100f691a3f35392f403217f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescriptionVector</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a2503fc4f7d91a2f6c53349f2a12effd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstraintSet.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>ConstraintSet_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <class kind="class">mc_solver::ConstraintSet</class>
    <namespace>mc_solver</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a9bce96d8d352ebedfffce2e42e0300ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstraintSetLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>ConstraintSetLoader_8h</filename>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="GenericLoader_8h" name="GenericLoader.h" local="no" imported="no">mc_solver/GenericLoader.h</includes>
    <class kind="struct">mc_solver::ConstraintSetLoader</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>ContactConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>ContactConstraint_8h</filename>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="class">mc_solver::ContactConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicsConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>DynamicsConstraint_8h</filename>
    <includes id="KinematicsConstraint_8h" name="KinematicsConstraint.h" local="no" imported="no">mc_solver/KinematicsConstraint.h</includes>
    <includes id="DynamicFunction_8h" name="DynamicFunction.h" local="no" imported="no">mc_tvm/DynamicFunction.h</includes>
    <class kind="class">mc_solver::DynamicsConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>EqualityConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>EqualityConstraint_8h</filename>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">mc_solver/utils/Constraint.h</includes>
    <class kind="class">mc_solver::utils::EqualityConstraint</class>
    <class kind="class">mc_solver::EqualityConstraintRobot</class>
    <class kind="class">mc_solver::EqualityConstraintLambda</class>
    <class kind="class">mc_solver::EqualityConstraintForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>GenericLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>GenericLoader_8h</filename>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="QPSolver_8h" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <class kind="struct">mc_solver::GenericLoader</class>
    <class kind="struct">mc_solver::GenericLoader::Handle</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>GenInequalityConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>GenInequalityConstraint_8h</filename>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">mc_solver/utils/Constraint.h</includes>
    <class kind="class">mc_solver::utils::GenInequalityConstraint</class>
    <class kind="class">mc_solver::GenInequalityConstraintRobot</class>
    <class kind="class">mc_solver::GenInequalityConstraintLambda</class>
    <class kind="class">mc_solver::GenInequalityConstraintForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>InequalityConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>InequalityConstraint_8h</filename>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">mc_solver/utils/Constraint.h</includes>
    <class kind="class">mc_solver::utils::InequalityConstraint</class>
    <class kind="class">mc_solver::InequalityConstraintRobot</class>
    <class kind="class">mc_solver::InequalityConstraintLambda</class>
    <class kind="class">mc_solver::InequalityConstraintForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicsConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>KinematicsConstraint_8h</filename>
    <includes id="Robots_8h" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="ConstraintSet_8h" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="class">mc_solver::KinematicsConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>QPSolver_8h</filename>
    <includes id="include_2mc__solver_2api_8h" name="api.h" local="no" imported="no">mc_solver/api.h</includes>
    <includes id="include_2mc__control_2api_8h" name="api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="mc__rbdyn_2Contact_8h" name="Contact.h" local="no" imported="no">mc_rbdyn/Contact.h</includes>
    <includes id="Robots_8h" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="pragma_8h" name="pragma.h" local="no" imported="no">mc_rtc/pragma.h</includes>
    <class kind="class">mc_solver::QPSolver</class>
    <class kind="struct">mc_solver::QPSolver::ControllerToken</class>
    <class kind="struct">fmt::formatter&lt; mc_solver::QPSolver::Backend &gt;</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_solver</namespace>
    <namespace>fmt</namespace>
    <member kind="function">
      <type>MC_RTC_diagnostic_push</type>
      <name>MC_RTC_diagnostic_ignored</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a619a755cd27458e3c3e0203be40caf76</anchor>
      <arglist>(GCC, &quot;-Wattributes&quot;) enum class MC_SOLVER_DLLAPI FeedbackType</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TasksQPSolver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>TasksQPSolver_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <class kind="struct">mc_solver::TasksQPSolver</class>
    <namespace>mc_solver</namespace>
    <member kind="function">
      <type>TasksQPSolver &amp;</type>
      <name>tasks_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a872e96c8071f94103eb253899e73347f</anchor>
      <arglist>(QPSolver &amp;solver) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TasksQPSolver &amp;</type>
      <name>tasks_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a5abdc1715119d0de677d6942c18c88d3</anchor>
      <arglist>(const QPSolver &amp;solver) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TVMQPSolver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>TVMQPSolver_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="clock_8h" name="clock.h" local="no" imported="no">mc_rtc/clock.h</includes>
    <class kind="struct">mc_solver::TVMQPSolver</class>
    <namespace>mc_solver</namespace>
    <member kind="function">
      <type>TVMQPSolver &amp;</type>
      <name>tvm_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>aa8880c7b3b89f3256f848c45c4baf87e</anchor>
      <arglist>(QPSolver &amp;solver) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TVMQPSolver &amp;</type>
      <name>tvm_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>ad9b799fc8f7724cfac400ee9f2c1c0df</anchor>
      <arglist>(const QPSolver &amp;solver) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>Constraint_8h</filename>
    <includes id="Update_8h" name="Update.h" local="no" imported="no">mc_solver/utils/Update.h</includes>
    <class kind="class">mc_solver::utils::Constraint</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>ContactWrenchMatrixToLambdaMatrix.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>ContactWrenchMatrixToLambdaMatrix_8h</filename>
    <includes id="QPSolver_8h" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="include_2mc__solver_2api_8h" name="api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="struct">mc_solver::utils::ContactWrenchMatrixToLambdaMatrix</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>Update.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>Update_8h</filename>
    <includes id="ContactWrenchMatrixToLambdaMatrix_8h" name="ContactWrenchMatrixToLambdaMatrix.h" local="no" imported="no">mc_solver/utils/ContactWrenchMatrixToLambdaMatrix.h</includes>
    <includes id="UpdateNrVars_8h" name="UpdateNrVars.h" local="no" imported="no">mc_solver/utils/UpdateNrVars.h</includes>
    <class kind="struct">mc_solver::utils::UpdateTag</class>
    <class kind="struct">mc_solver::utils::Update</class>
    <class kind="struct">mc_solver::utils::IsUpdate</class>
    <class kind="struct">mc_solver::utils::UpdateForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsRobot &gt;</type>
      <name>UpdateRobot</name>
      <anchorfile>namespacemc__solver_1_1utils.html</anchorfile>
      <anchor>a3fef857fcf6a819b7f8061f33248d0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsLambda &gt;</type>
      <name>UpdateLambda</name>
      <anchorfile>namespacemc__solver_1_1utils.html</anchorfile>
      <anchor>a51609ca39a4099935af3983ff08a0c50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UpdateNrVars.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>UpdateNrVars_8h</filename>
    <includes id="include_2mc__solver_2api_8h" name="api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="struct">mc_solver::utils::UpdateNrVarsData</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsRobot</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsLambda</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>AddRemoveContactTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>AddRemoveContactTask_8h</filename>
    <includes id="Robots_8h" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="BoundedSpeedConstr_8h" name="BoundedSpeedConstr.h" local="no" imported="no">mc_solver/BoundedSpeedConstr.h</includes>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="include_2mc__tasks_2api_8h" name="api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::AddRemoveContactTask</class>
    <class kind="struct">mc_tasks::AddContactTask</class>
    <class kind="struct">mc_tasks::RemoveContactTask</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>AdmittanceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>AdmittanceTask_8h</filename>
    <includes id="clamp_8h" name="clamp.h" local="no" imported="no">mc_filter/utils/clamp.h</includes>
    <includes id="TransformTask_8h" name="TransformTask.h" local="no" imported="no">mc_tasks/TransformTask.h</includes>
    <class kind="struct">mc_tasks::force::AdmittanceTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>BSplineTrajectoryTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>BSplineTrajectoryTask_8h</filename>
    <includes id="SplineTrajectoryTask_8h" name="SplineTrajectoryTask.h" local="no" imported="no">mc_tasks/SplineTrajectoryTask.h</includes>
    <includes id="BSpline_8h" name="BSpline.h" local="no" imported="no">mc_trajectory/BSpline.h</includes>
    <class kind="struct">mc_tasks::BSplineTrajectoryTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>ComplianceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>ComplianceTask_8h</filename>
    <includes id="EndEffectorTask_8h" name="EndEffectorTask.h" local="no" imported="no">mc_tasks/EndEffectorTask.h</includes>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_tasks::force::ComplianceTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>CoMTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>CoMTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::CoMTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>CoPTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>CoPTask_8h</filename>
    <includes id="DampingTask_8h" name="DampingTask.h" local="no" imported="no">mc_tasks/DampingTask.h</includes>
    <class kind="struct">mc_tasks::force::CoPTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>DampingTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>DampingTask_8h</filename>
    <includes id="AdmittanceTask_8h" name="AdmittanceTask.h" local="no" imported="no">mc_tasks/AdmittanceTask.h</includes>
    <class kind="struct">mc_tasks::force::DampingTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>EndEffectorTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>EndEffectorTask_8h</filename>
    <includes id="OrientationTask_8h" name="OrientationTask.h" local="no" imported="no">mc_tasks/OrientationTask.h</includes>
    <includes id="PositionTask_8h" name="PositionTask.h" local="no" imported="no">mc_tasks/PositionTask.h</includes>
    <class kind="struct">mc_tasks::EndEffectorTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>ExactCubicTrajectoryTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>ExactCubicTrajectoryTask_8h</filename>
    <includes id="SplineTrajectoryTask_8h" name="SplineTrajectoryTask.h" local="no" imported="no">mc_tasks/SplineTrajectoryTask.h</includes>
    <includes id="ExactCubic_8h" name="ExactCubic.h" local="no" imported="no">mc_trajectory/ExactCubic.h</includes>
    <class kind="struct">mc_tasks::ExactCubicTrajectoryTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>FirstOrderImpedanceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>FirstOrderImpedanceTask_8h</filename>
    <includes id="ImpedanceTask_8h" name="ImpedanceTask.h" local="no" imported="no">mc_tasks/ImpedanceTask.h</includes>
    <class kind="struct">mc_tasks::force::FirstOrderImpedanceTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>GazeTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>GazeTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::GazeTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>ImpedanceGains.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>ImpedanceGains_8h</filename>
    <includes id="include_2mc__tasks_2api_8h" name="api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="struct">mc_tasks::force::details::ImpedanceVecd</class>
    <class kind="struct">mc_tasks::force::ImpedanceGains</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_tasks::force::ImpedanceGains &gt;</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
    <namespace>mc_tasks::force::details</namespace>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>ImpedanceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>ImpedanceTask_8h</filename>
    <includes id="ImpedanceGains_8h" name="ImpedanceGains.h" local="no" imported="no">mc_tasks/ImpedanceGains.h</includes>
    <includes id="TransformTask_8h" name="TransformTask.h" local="no" imported="no">mc_tasks/TransformTask.h</includes>
    <includes id="LowPass_8h" name="LowPass.h" local="no" imported="no">mc_filter/LowPass.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">mc_rtc/constants.h</includes>
    <class kind="struct">mc_tasks::force::ImpedanceTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>StabilizerTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/lipm_stabilizer/</path>
    <filename>StabilizerTask_8h</filename>
    <includes id="ExponentialMovingAverage_8h" name="ExponentialMovingAverage.h" local="no" imported="no">mc_filter/ExponentialMovingAverage.h</includes>
    <includes id="LeakyIntegrator_8h" name="LeakyIntegrator.h" local="no" imported="no">mc_filter/LeakyIntegrator.h</includes>
    <includes id="LowPass_8h" name="LowPass.h" local="no" imported="no">mc_filter/LowPass.h</includes>
    <includes id="LowPassCompose_8h" name="LowPassCompose.h" local="no" imported="no">mc_filter/LowPassCompose.h</includes>
    <includes id="StationaryOffset_8h" name="StationaryOffset.h" local="no" imported="no">mc_filter/StationaryOffset.h</includes>
    <includes id="StabilizerConfiguration_8h" name="StabilizerConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/StabilizerConfiguration.h</includes>
    <includes id="deprecated_8h" name="deprecated.h" local="no" imported="no">mc_rtc/deprecated.h</includes>
    <includes id="CoMTask_8h" name="CoMTask.h" local="no" imported="no">mc_tasks/CoMTask.h</includes>
    <includes id="CoPTask_8h" name="CoPTask.h" local="no" imported="no">mc_tasks/CoPTask.h</includes>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="OrientationTask_8h" name="OrientationTask.h" local="no" imported="no">mc_tasks/OrientationTask.h</includes>
    <includes id="mc__tasks_2lipm__stabilizer_2Contact_8h" name="Contact.h" local="no" imported="no">mc_tasks/lipm_stabilizer/Contact.h</includes>
    <includes id="ZMPCC_8h" name="ZMPCC.h" local="no" imported="no">mc_tasks/lipm_stabilizer/ZMPCC.h</includes>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask::ExternalWrench</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask::EnumClassHash</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</type>
      <name>ZMPCCConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a61ba26bc4aeec5031be001df091b4b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>StabilizerConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a8e6d2236262d21dcc7ab589b6d6844ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::FDQPWeights</type>
      <name>FDQPWeights</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a6237f0269786bf01feaf316a6259b712</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::SafetyThresholds</type>
      <name>SafetyThresholds</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a5f51d2adfa451cd98a1b3f3b2ed68ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration</type>
      <name>DCMBiasEstimatorConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>aa199242c8c0d202153b338771c1a5ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration</type>
      <name>ExternalWrenchConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a8a1b1cfcd83c685c2836975375af2251</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>StabilizerTask::computeWrenchOffsetAndCoefficient&lt;&amp;StabilizerTask::ExternalWrench::target &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>ac38a37625b74268c51a9ae8efa42b3d8</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, Eigen::Vector3d &amp;offset_gamma, double &amp;coef_kappa) const</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>StabilizerTask::computeWrenchOffsetAndCoefficient&lt;&amp;StabilizerTask::ExternalWrench::measured &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>acdaf79a7c1b60d8b1c1aee6805951e0b</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, Eigen::Vector3d &amp;offset_gamma, double &amp;coef_kappa) const</arglist>
    </member>
    <member kind="function">
      <type>template sva::ForceVecd</type>
      <name>StabilizerTask::computeExternalWrenchSum&lt;&amp;StabilizerTask::ExternalWrench::target &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>ae21f6735cfe70bc1be33b8d4013434b3</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;, const Eigen::Vector3d &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>template sva::ForceVecd</type>
      <name>StabilizerTask::computeExternalWrenchSum&lt;&amp;StabilizerTask::ExternalWrench::measured &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a0d8b50c213771d3e5677471854ada3cd</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;, const Eigen::Vector3d &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMPCC.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/lipm_stabilizer/</path>
    <filename>ZMPCC_8h</filename>
    <includes id="LeakyIntegrator_8h" name="LeakyIntegrator.h" local="no" imported="no">mc_filter/LeakyIntegrator.h</includes>
    <includes id="ZMPCCConfiguration_8h" name="ZMPCCConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/ZMPCCConfiguration.h</includes>
    <class kind="struct">mc_tasks::lipm_stabilizer::ZMPCC</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
  </compound>
  <compound kind="file">
    <name>LookAtFrameTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>LookAtFrameTask_8h</filename>
    <includes id="LookAtTask_8h" name="LookAtTask.h" local="no" imported="no">mc_tasks/LookAtTask.h</includes>
    <class kind="struct">mc_tasks::LookAtFrameTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>LookAtSurfaceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>LookAtSurfaceTask_8h</filename>
    <includes id="LookAtFrameTask_8h" name="LookAtFrameTask.h" local="no" imported="no">mc_tasks/LookAtFrameTask.h</includes>
    <namespace>mc_tasks</namespace>
    <member kind="typedef">
      <type>LookAtFrameTask</type>
      <name>LookAtSurfaceTask</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>ace28b694118e322db35e47ac966047b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LookAtTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>LookAtTask_8h</filename>
    <includes id="VectorOrientationTask_8h" name="VectorOrientationTask.h" local="no" imported="no">mc_tasks/VectorOrientationTask.h</includes>
    <class kind="struct">mc_tasks::LookAtTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>MetaTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>MetaTask_8h</filename>
    <includes id="include_2mc__tasks_2api_8h" name="api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <includes id="mc__rtc_2Configuration_8h" name="Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <includes id="QPSolver_8h" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="include_2mc__solver_2api_8h" name="api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="struct">mc_tasks::MetaTask</class>
    <namespace>mc_control</namespace>
    <namespace>mc_solver</namespace>
    <namespace>mc_tasks</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaTask &gt;</type>
      <name>MetaTaskPtr</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>a3ce36af538f25151dc006eb3d50e8b3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetaTaskLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>MetaTaskLoader_8h</filename>
    <includes id="GenericLoader_8h" name="GenericLoader.h" local="no" imported="no">mc_solver/GenericLoader.h</includes>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_tasks::MetaTaskLoader</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>MomentumTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>MomentumTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::MomentumTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>OrientationTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>OrientationTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::OrientationTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>PositionBasedVisServoTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>PositionBasedVisServoTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::PositionBasedVisServoTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>PositionTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>PositionTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <includes id="PositionFunction_8h" name="PositionFunction.h" local="no" imported="no">mc_tvm/PositionFunction.h</includes>
    <class kind="struct">mc_tasks::PositionTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>PostureTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>PostureTask_8h</filename>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="struct">mc_tasks::PostureTask</class>
    <namespace>mc_tasks</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PostureTask &gt;</type>
      <name>PostureTaskPtr</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>a20b4cf1d7ce78ab29822e5d5d6616489</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RelativeEndEffectorTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>RelativeEndEffectorTask_8h</filename>
    <includes id="EndEffectorTask_8h" name="EndEffectorTask.h" local="no" imported="no">mc_tasks/EndEffectorTask.h</includes>
    <includes id="include_2mc__tasks_2api_8h" name="api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::RelativeEndEffectorTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>SmoothTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>SmoothTask_8h</filename>
    <class kind="struct">mc_tasks::SmoothTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>SplineTrajectoryTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>SplineTrajectoryTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <includes id="InterpolatedRotation_8h" name="InterpolatedRotation.h" local="no" imported="no">mc_trajectory/InterpolatedRotation.h</includes>
    <includes id="SequenceInterpolator_8h" name="SequenceInterpolator.h" local="no" imported="no">mc_trajectory/SequenceInterpolator.h</includes>
    <class kind="struct">mc_tasks::SplineTrajectoryTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceTransformTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>SurfaceTransformTask_8h</filename>
    <includes id="TransformTask_8h" name="TransformTask.h" local="no" imported="no">mc_tasks/TransformTask.h</includes>
    <namespace>mc_tasks</namespace>
    <member kind="typedef">
      <type>TransformTask</type>
      <name>SurfaceTransformTask</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>a68fe384fc8c455a604bb80d86aca6f46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tasks_traits.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>tasks__traits_8h</filename>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_GETTER_DETECTOR</name>
      <anchorfile>tasks__traits_8h.html</anchorfile>
      <anchor>a2b52bc2b4bf90f7a1c7986eea4aebaa7</anchor>
      <arglist>(GETTER)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_SETTER_DETECTOR</name>
      <anchorfile>tasks__traits_8h.html</anchorfile>
      <anchor>a7787070cd53e37929bb3715fbdac8407</anchor>
      <arglist>(SETTER)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_GETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a3879d2140f4289cb5858a8420ca5a18e</anchor>
      <arglist>(refVel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_SETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a93b74a0597cdef0fbdec07692eb06f0a</anchor>
      <arglist>(refVel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_GETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a56a0daa6cee99be6277169bd4c4387aa</anchor>
      <arglist>(refAccel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_SETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a96a3a6b9106c2dc4dfa8f22d301302c3</anchor>
      <arglist>(refAccel)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_refVel_v</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a76f0d5b92ab362dcfc65d4183f34998a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_refAccel_v</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a980685e35817ee139bf44bec647b744b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>always_false_v</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>afc5e9c803ae12160c8d3e863dcbb33ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryTaskGeneric.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>TrajectoryTaskGeneric_8h</filename>
    <includes id="MetaTask_8h" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="TVMTrajectoryTaskGeneric_8h" name="TVMTrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TVMTrajectoryTaskGeneric.h</includes>
    <includes id="Robots_8h" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="void__ptr_8h" name="void_ptr.h" local="no" imported="no">mc_rtc/void_ptr.h</includes>
    <class kind="struct">mc_tasks::TrajectoryTaskGeneric</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>TransformTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>TransformTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <includes id="mc__rbdyn_2RobotFrame_8h" name="RobotFrame.h" local="no" imported="no">mc_rbdyn/RobotFrame.h</includes>
    <class kind="struct">mc_tasks::TransformTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>TVMTrajectoryTaskGeneric.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>TVMTrajectoryTaskGeneric_8h</filename>
    <includes id="tasks__traits_8h" name="tasks_traits.h" local="no" imported="no">mc_tasks/tasks_traits.h</includes>
    <includes id="TVMQPSolver_8h" name="TVMQPSolver.h" local="no" imported="no">mc_solver/TVMQPSolver.h</includes>
    <class kind="struct">mc_tasks::details::TVMTrajectoryTaskGeneric</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::details</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TVMTrajectoryTaskGeneric &gt;</type>
      <name>TVMTrajectoryTaskGenericPtr</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a4a3797f114f4b0cc6f3bbec5cefd0d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ref_vel</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>adc966662844095b73bed36f7e5bd0232</anchor>
      <arglist>(void *task, const Eigen::VectorXd &amp;refVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ref_accel</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>af42f3e8fb984722d3f40522533610f9a</anchor>
      <arglist>(void *task, const Eigen::VectorXd &amp;refAccel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorOrientationTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>VectorOrientationTask_8h</filename>
    <includes id="TrajectoryTaskGeneric_8h" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::VectorOrientationTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>BSpline.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>BSpline_8h</filename>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="Spline_8h" name="Spline.h" local="no" imported="no">mc_trajectory/Spline.h</includes>
    <includes id="include_2mc__trajectory_2api_8h" name="api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::BSpline</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>ExactCubic.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>ExactCubic_8h</filename>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="Spline_8h" name="Spline.h" local="no" imported="no">mc_trajectory/Spline.h</includes>
    <includes id="include_2mc__trajectory_2api_8h" name="api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::ExactCubic</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolatedRotation.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>InterpolatedRotation_8h</filename>
    <includes id="StateBuilder_8h" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="Spline_8h" name="Spline.h" local="no" imported="no">mc_trajectory/Spline.h</includes>
    <includes id="include_2mc__trajectory_2api_8h" name="api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::InterpolatedRotation</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>LinearInterpolation.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>LinearInterpolation_8h</filename>
    <class kind="struct">mc_trajectory::LinearInterpolation</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>SequenceInterpolator.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>SequenceInterpolator_8h</filename>
    <includes id="logging_8h" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="LinearInterpolation_8h" name="LinearInterpolation.h" local="no" imported="no">mc_trajectory/LinearInterpolation.h</includes>
    <class kind="struct">mc_trajectory::SequenceInterpolator</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>Spline.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>Spline_8h</filename>
    <includes id="include_2mc__trajectory_2api_8h" name="api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::Spline</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>spline_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>spline__utils_8h</filename>
    <includes id="include_2mc__trajectory_2api_8h" name="api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <namespace>mc_trajectory</namespace>
    <member kind="function">
      <type>MC_TRAJECTORY_DLLAPI Eigen::MatrixXd</type>
      <name>generateInterpolatedWaypoints</name>
      <anchorfile>namespacemc__trajectory.html</anchorfile>
      <anchor>a9fbcf4dd49d2e09b5d33208fae44f11b</anchor>
      <arglist>(const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;stop, unsigned int nrWP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CollisionFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>CollisionFunction_8h</filename>
    <includes id="Convex_8h" name="Convex.h" local="no" imported="no">mc_tvm/Convex.h</includes>
    <class kind="class">mc_tvm::CollisionFunction</class>
    <class kind="struct">mc_tvm::CollisionFunction::ObjectData</class>
    <namespace>mc_tvm</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CollisionFunction &gt;</type>
      <name>CollisionFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>aa6335c40b8165a9482acfa7d6595f293</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoM.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>CoM_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="shared_8h" name="shared.h" local="no" imported="no">mc_rtc/shared.h</includes>
    <class kind="struct">mc_tvm::CoM</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>CoMFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>CoMFunction_8h</filename>
    <includes id="CoM_8h" name="CoM.h" local="no" imported="no">mc_tvm/CoM.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::CoMFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>CoMInConvexFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>CoMInConvexFunction_8h</filename>
    <includes id="CoM_8h" name="CoM.h" local="no" imported="no">mc_tvm/CoM.h</includes>
    <includes id="mc__tvm_2Robot_8h" name="Robot.h" local="no" imported="no">mc_tvm/Robot.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::CoMInConvexFunction</class>
    <namespace>mc_tvm</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CoMInConvexFunction &gt;</type>
      <name>CoMInConvexFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a235c942b4a62a637f7ab48d5355090bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompoundJointFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>CompoundJointFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="CompoundJointConstraintDescription_8h" name="CompoundJointConstraintDescription.h" local="no" imported="no">mc_rbdyn/CompoundJointConstraintDescription.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::CompoundJointFunction</class>
    <namespace>mc_tvm</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CompoundJointFunction &gt;</type>
      <name>CompoundJointFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a20900d9e7637f3028a3e1ea59dd2f496</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>ContactFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="class">mc_tvm::ContactFunction</class>
    <namespace>mc_tvm</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; mc_tvm::ContactFunction &gt;</type>
      <name>ContactFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a00b8935e036238598507530122aa6b80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Convex.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>Convex_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="RobotModule_8h" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::Convex</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>DynamicFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::DynamicFunction</class>
    <class kind="struct">mc_tvm::DynamicFunction::ForceContact</class>
    <namespace>mc_tvm</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DynamicFunction &gt;</type>
      <name>DynamicFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>af181c4775ffd6123afe1286668ccc6d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrameVelocity.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>FrameVelocity_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::FrameVelocity</class>
    <namespace>mc_tvm</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; FrameVelocity &gt;</type>
      <name>FrameVelocityPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a617a72af19f2c7df9c68c994dfa922f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GazeFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>GazeFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::GazeFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>JointsSelectorFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>JointsSelectorFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="class">mc_tvm::JointsSelectorFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>Limits.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>Limits_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <class kind="struct">mc_tvm::Limits</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>Momentum.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>Momentum_8h</filename>
    <includes id="CoM_8h" name="CoM.h" local="no" imported="no">mc_tvm/CoM.h</includes>
    <class kind="struct">mc_tvm::Momentum</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>MomentumFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>MomentumFunction_8h</filename>
    <includes id="Momentum_8h" name="Momentum.h" local="no" imported="no">mc_tvm/Momentum.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::MomentumFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>OrientationFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>OrientationFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="class">mc_tvm::OrientationFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>PositionBasedVisServoFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>PositionBasedVisServoFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="struct">mc_tvm::PositionBasedVisServoFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>PositionFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>PositionFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="class">mc_tvm::PositionFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>PostureFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>PostureFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="class">mc_tvm::PostureFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>TransformFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>TransformFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="class">mc_tvm::TransformFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>VectorOrientationFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tvm/</path>
    <filename>VectorOrientationFunction_8h</filename>
    <includes id="include_2mc__tvm_2api_8h" name="api.h" local="no" imported="no">mc_tvm/api.h</includes>
    <includes id="mc__tvm_2fwd_8h" name="fwd.h" local="no" imported="no">mc_tvm/fwd.h</includes>
    <includes id="mc__rbdyn_2fwd_8h" name="fwd.h" local="no" imported="no">mc_rbdyn/fwd.h</includes>
    <class kind="class">mc_tvm::VectorOrientationFunction</class>
    <namespace>mc_tvm</namespace>
  </compound>
  <compound kind="file">
    <name>ros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/plugins/ROS/include/mc_rtc/</path>
    <filename>ros_8h</filename>
    <includes id="deprecated_8h" name="deprecated.h" local="no" imported="no">mc_rtc/deprecated.h</includes>
    <includes id="ros_2ros_8h" name="ros.h" local="no" imported="no">mc_rtc_ros/ros.h</includes>
  </compound>
  <compound kind="file">
    <name>ros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/plugins/ROS/include/mc_rtc_ros/</path>
    <filename>ros_2ros_8h</filename>
    <includes id="plugins_2ROS_2include_2mc__rtc__ros_2api_8h" name="api.h" local="no" imported="no">mc_rtc_ros/api.h</includes>
    <class kind="struct">mc_rtc::ROSBridge</class>
    <class kind="struct">mc_rtc::RobotPublisher</class>
    <namespace>ros</namespace>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>LookAtTFTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/plugins/ROS/include/mc_tasks/</path>
    <filename>LookAtTFTask_8h</filename>
    <includes id="deprecated_8h" name="deprecated.h" local="no" imported="no">mc_rtc/deprecated.h</includes>
    <includes id="ros_2LookAtTFTask_8h" name="LookAtTFTask.h" local="no" imported="no">mc_tasks_ros/LookAtTFTask.h</includes>
  </compound>
  <compound kind="file">
    <name>LookAtTFTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/plugins/ROS/include/mc_tasks_ros/</path>
    <filename>ros_2LookAtTFTask_8h</filename>
    <includes id="plugins_2ROS_2include_2mc__tasks__ros_2api_8h" name="api.h" local="no" imported="no">mc_tasks_ros/api.h</includes>
    <includes id="LookAtTask_8h" name="LookAtTask.h" local="no" imported="no">mc_tasks/LookAtTask.h</includes>
    <class kind="struct">mc_tasks::LookAtTFTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/</path>
    <filename>README_8md</filename>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::_has_configuration_load_object</name>
    <filename>structmc__rtc_1_1internal_1_1__has__configuration__load__object.html</filename>
    <member kind="function" static="yes">
      <type>static std::true_type</type>
      <name>test</name>
      <anchorfile>structmc__rtc_1_1internal_1_1__has__configuration__load__object.html</anchorfile>
      <anchor>a7df8b2b030c0677a4cea0ea0a86c3e22</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::false_type</type>
      <name>test</name>
      <anchorfile>structmc__rtc_1_1internal_1_1__has__configuration__load__object.html</anchorfile>
      <anchor>aaf07ac07f94d666ac90926acc0816ee5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::_has_configuration_save_object</name>
    <filename>structmc__rtc_1_1internal_1_1__has__configuration__save__object.html</filename>
    <member kind="function" static="yes">
      <type>static std::true_type</type>
      <name>test</name>
      <anchorfile>structmc__rtc_1_1internal_1_1__has__configuration__save__object.html</anchorfile>
      <anchor>a2620f7e45fb564c548f34b045d2694e7</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::false_type</type>
      <name>test</name>
      <anchorfile>structmc__rtc_1_1internal_1_1__has__configuration__save__object.html</anchorfile>
      <anchor>a4baa69ec78f3c15e6563f9416632b4c3</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Abscissa</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Abscissa</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</anchorfile>
      <anchor>a57a4c02713024e53ec4043123cab4c50</anchor>
      <arglist>(AxisConfiguration config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</anchorfile>
      <anchor>ad46e2e46e2c4e130880c831cf3df8d07</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</anchorfile>
      <anchor>a435960d9655c3bb2667207c9f032ee4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Abscissa &amp;</type>
      <name>range</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</anchorfile>
      <anchor>a86d5bd8a471e0f85217fd8a6872c89ca</anchor>
      <arglist>(const Range &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>Abscissa &amp;</type>
      <name>min</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</anchorfile>
      <anchor>aabf95601f4cd3af4b63249bd327f2148</anchor>
      <arglist>(double min)</arglist>
    </member>
    <member kind="function">
      <type>Abscissa &amp;</type>
      <name>max</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</anchorfile>
      <anchor>a190355057411d2e31f821dbb45afcf96</anchor>
      <arglist>(double max)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Abscissa.html</anchorfile>
      <anchor>a74de98c8a1157861357192b66f451241</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::AbscissaOrdinate</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</filename>
    <templarg>GetXT</templarg>
    <templarg>GetYT</templarg>
    <member kind="function">
      <type></type>
      <name>AbscissaOrdinate</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>af3f4ab107c57033a656a21089b96aa0f</anchor>
      <arglist>(std::string_view name, GetXT get_x_fn, GetYT get_y_fn, Color color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>a3356c8e13777a41231e4a53f60a0e14c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>a2e706b62c33208c260b9f4c4b0569f83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbscissaOrdinate &amp;</type>
      <name>style</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>a9298450fcf5a9549db2df14dc6223e4a</anchor>
      <arglist>(Style style)</arglist>
    </member>
    <member kind="function">
      <type>AbscissaOrdinate &amp;</type>
      <name>side</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>ac412c96504ea09d32b3f19e18e0fca0b</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>a13fb99d2e08099b6c7d7738e8bdd31fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>af7bfde3739ae017ceb6db526762ca6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetXT</type>
      <name>get_x_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>a06bb63c46c89243d82cbcb4a7323a3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetYT</type>
      <name>get_y_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>ade656f6138f2fd579ad5670c5afac13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>color_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>a86c83c91843a11a26a3404ddb7b4437b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::array&lt; double, 2 &gt; &gt;</type>
      <name>cache_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>a5ebd8b842d24f72c96bd9a19d4274e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Style</type>
      <name>style_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>ad56c269ffbd0cbf144af4b4ff066bd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Side</type>
      <name>side_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinate.html</anchorfile>
      <anchor>ae33beeb0efca412dd64fcbad5e984c48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::AbscissaOrdinateWithColor</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinateWithColor.html</filename>
    <templarg>GetXT</templarg>
    <templarg>GetYT</templarg>
    <templarg>GetColor</templarg>
    <base>mc_rtc::gui::plot::impl::AbscissaOrdinate</base>
    <member kind="function">
      <type></type>
      <name>AbscissaOrdinateWithColor</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinateWithColor.html</anchorfile>
      <anchor>a7e96cb8a2ee39eb14b2280b51f23168e</anchor>
      <arglist>(std::string_view name, GetXT get_x, GetYT get_y, GetColor color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1AbscissaOrdinateWithColor.html</anchorfile>
      <anchor>a3d6f033510ac8d8a5a05b56adf3c19e2</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::AddContactTask</name>
    <filename>structmc__tasks_1_1AddContactTask.html</filename>
    <base>mc_tasks::AddRemoveContactTask</base>
    <member kind="function">
      <type></type>
      <name>AddContactTask</name>
      <anchorfile>structmc__tasks_1_1AddContactTask.html</anchorfile>
      <anchor>ae6e667b644d14474374570f60a1a8f6f</anchor>
      <arglist>(mc_rbdyn::Robots &amp;robots, std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt; constSpeedConstr, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddContactTask</name>
      <anchorfile>structmc__tasks_1_1AddContactTask.html</anchorfile>
      <anchor>a3300a38ebe7922a02dec8a5efb99d718</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::AddRemoveContactState</name>
    <filename>structmc__control_1_1fsm_1_1AddRemoveContactState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type></type>
      <name>AddRemoveContactState</name>
      <anchorfile>structmc__control_1_1fsm_1_1AddRemoveContactState.html</anchorfile>
      <anchor>acc53f1acf266f32644d1a6c3b7c996a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AddRemoveContactState</name>
      <anchorfile>structmc__control_1_1fsm_1_1AddRemoveContactState.html</anchorfile>
      <anchor>a42e535cede2f88a26609cb298ae9d62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1AddRemoveContactState.html</anchorfile>
      <anchor>a2e3305b90c679d3f53a5d1473dd557f3</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1AddRemoveContactState.html</anchorfile>
      <anchor>a88a669bde8f5bcdfb31560b7f4e3d39c</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1AddRemoveContactState.html</anchorfile>
      <anchor>a40c9854b8c479f9a572ef9c1795eb516</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; AddRemoveContactStateImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>structmc__control_1_1fsm_1_1AddRemoveContactState.html</anchorfile>
      <anchor>a8921148d58f33c039fe655ad12c6fbb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::AddRemoveContactTask</name>
    <filename>structmc__tasks_1_1AddRemoveContactTask.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type></type>
      <name>AddRemoveContactTask</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>ab82ee19830fb670624e5c3734950e61a</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt; constSpeedConstr, const mc_rbdyn::Contact &amp;contact, double direction, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddRemoveContactTask</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>ada37890a73d853a1ce3c257a76c8f545</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const mc_rbdyn::Contact &amp;contact, double direction, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>direction</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a6cc87c0025db4a70501d92f6c24b09e8</anchor>
      <arglist>(double direction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a92268af15885043be699e14dc3683fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>ae60e21511e6e1379af325184a7459781</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a48baadecb63cdda817bda05f6e8f1bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a94e15cb317d7a258015b7eabfb2a1109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>velError</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>ac356d531abfb403e1d7f66fcb3189bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a95ba024725a064ab1d2fbdbc0e1bf37f</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a731e2ddc31ca25b93858b1b99ef79abe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a78a2cc264c6e0952eb2eb6bcd98fec94</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>aedf7fdb3cd7157deb1c56bc19bf31573</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a80e20812e1b3b7e192fd2b70cb28e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>aa5772dda1ca644ea76a477785ea3689d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>envIndex</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a466fe1204c2688efd1d657068e2522ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt;</type>
      <name>constSpeedConstr</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>ab421f9378ae251f53925cf179825626e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::SurfacePtr</type>
      <name>robotSurf</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a8d89224afad8769166c3208789e447e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>robotBodyIndex</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a9fe42ac857795cdd634819a17a5238b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>targetTf</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a7dac96a0da2ff21be423cc30af924827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>bodyId</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a8846f1a33c20ed70bf425b49027aba12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Matrix6d</type>
      <name>dofMat</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a29761b946089c0fee472a0e72a4a165b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector6d</type>
      <name>speedMat</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>aa3f4a2997b3c4112f628b0023bf5b668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>ac46066f1cc163f34fcbb8c45e7593536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stiffness_</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>ad4c4be286affbb126d787a5356e7bf96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight_</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a24cf1f1758dde72e116fc9038e9ccf3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>speed_</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>afcdad65af3391e9059dbfac1db885679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>direction_</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>aa408d0703b72d18dc3337fe383bcd840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>targetSpeed</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>acdd2290d6e07d8778d1bb92feb96d973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::void_ptr</type>
      <name>impl_</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>aa8bfc9dfa1a28c979fbdd675542a07f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>targetVelWeight</name>
      <anchorfile>structmc__tasks_1_1AddRemoveContactTask.html</anchorfile>
      <anchor>a2b3721e007480a543c292855d83ee315</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::AdmittanceTask</name>
    <filename>structmc__tasks_1_1force_1_1AdmittanceTask.html</filename>
    <base>mc_tasks::TransformTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>AdmittanceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>aeb260767d5027918e1931e5365f5ecf3</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdmittanceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>adc9e5dddfd6c66644832803aa5187181</anchor>
      <arglist>(const std::string &amp;robotSurface, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a052349477335695173c7765bbac00210</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>admittance</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>abaa1066a123da76ad55c064c860b96d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>admittance</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a856da07a6437955a17e20b42ef8de0d0</anchor>
      <arglist>(const sva::ForceVecd &amp;admittance)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>surfacePose</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a3958c43db37f34168e7b0b370d8edf23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>targetPose</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a78745a07e09888ac0774f99fb5e82041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetPose</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>aafc8ff52e25c57da0c710ef842cdd6a0</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_target)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>poseError</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>abe93dbf1a3b1401e71ba92c861d55aa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>targetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>ae8a55ef8c9d0173de5004c2dc8c3f1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetWrenchW</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>aef645fa9420f6fbef7e29b6bf3d15888</anchor>
      <arglist>(const sva::ForceVecd &amp;wrenchW)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>ab0d0b00e2dea87d27d130d2c88f1361c</anchor>
      <arglist>(const sva::ForceVecd &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>measuredWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>ac887e6bd95fbafc40c1c4e4465b95b7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxLinearVel</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a99d636ebeb1f79aa4cc09409cb1456a1</anchor>
      <arglist>(const Eigen::Vector3d &amp;maxLinearVel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>maxLinearVel</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>ae394a1ad7aa50fc7d7f4e395ce0f0a86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxAngularVel</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a1a82a23ac354e6e380ecd7803e790d27</anchor>
      <arglist>(const Eigen::Vector3d &amp;maxAngularVel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>maxAngularVel</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>af29e748101d2e7dad31dec1da2a3763f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velFilterGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a40e25a8a37d85dfbde690b2c20e84717</anchor>
      <arglist>(double gain)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>velFilterGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>af5601de3a1b4f06b0a5dad6a249465a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVelB</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a530f67ea3aaa3fc0437aa72940de1143</anchor>
      <arglist>(const sva::MotionVecd &amp;velB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a11f68c4af2082ba57141752b3036e0f1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>aebc49ae7f9bf32ddfc48b8c64b238ff2</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a7340c5f14c1ba117ec60046742b3e9ad</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>ad8f353f9df118e8fc859bc5ee80a41c9</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a9e4af3978acf95b18cb58842898ff266</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>maxAngularVel_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>afad98878cf6e7f64980a3b743ed76a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>maxLinearVel_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>af4e15b0d348fae4b9f335f30e2a077b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timestep_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>ae1d5d0caedd77b293454ad6209ff6617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>velFilterGain_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>adbd26fcf85307988eedde6314fa066b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>admittance_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>afec1507c00f7ab6e535c856c4e6c258e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>targetWrench_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a3433b288829da956de5f93c99dc12870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>wrenchError_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>af66ad4d439b2cdfd9b6dc8bf7603cef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>feedforwardVelB_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a626218531c0140a6ce6b3efa2c2b840b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>refVelB_</name>
      <anchorfile>structmc__tasks_1_1force_1_1AdmittanceTask.html</anchorfile>
      <anchor>a2eeb8d4440242d2c4526226e15efaf87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::Allocator</name>
    <filename>structmc__rtc_1_1internal_1_1Allocator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::Allocator&lt; T, typename T::eigen_aligned_operator_new_marker_type &gt;</name>
    <filename>structmc__rtc_1_1internal_1_1Allocator_3_01T_00_01typename_01T_1_1eigen__aligned__operator__new__marker__type_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::details::are_strings</name>
    <filename>structmc__rbdyn_1_1details_1_1are__strings.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::details::are_strings&lt; T &gt;</name>
    <filename>structmc__rbdyn_1_1details_1_1are__strings_3_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::details::are_strings&lt; T, Args... &gt;</name>
    <filename>structmc__rbdyn_1_1details_1_1are__strings_3_01T_00_01Args_8_8_8_01_4.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::args_t</name>
    <filename>structmc__rtc_1_1internal_1_1args__t.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::decay&lt; T &gt;::type</type>
      <name>decay_t</name>
      <anchorfile>structmc__rtc_1_1internal_1_1args__t.html</anchorfile>
      <anchor>a5b8154625caf14c4dcc919d071c7ba46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; is_arithmetic, decay_t, T &gt;::type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1internal_1_1args__t.html</anchorfile>
      <anchor>a0b4ee875f9490a7d6bef544143160904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_arithmetic</name>
      <anchorfile>structmc__rtc_1_1internal_1_1args__t.html</anchorfile>
      <anchor>a63d9d0405b36451f9c9441f71e3642f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrayInputImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ArrayInputImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>ArrayInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayInputImpl.html</anchorfile>
      <anchor>aa25c4430a4386d5d792f4cb6614f87bb</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayInputImpl.html</anchorfile>
      <anchor>ac26b5be350a65134eda4f0719f2328d8</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayInputImpl.html</anchorfile>
      <anchor>aec0a1f87e9dbf0e954634ca4d9e17922</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayInputImpl.html</anchorfile>
      <anchor>a91070d8d8f19e1ee2ae32c3438184647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayInputImpl.html</anchorfile>
      <anchor>a497495027c99ecdbbb5c015283d008a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayInputImpl.html</anchorfile>
      <anchor>ac0959fbabfc2ed01f4c312d1f807791f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrayLabelImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ArrayLabelImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::LabelImpl</base>
    <member kind="function">
      <type></type>
      <name>ArrayLabelImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayLabelImpl.html</anchorfile>
      <anchor>a11eeb4f728745ce49936ade3b34d4efe</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayLabelImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayLabelImpl.html</anchorfile>
      <anchor>aad484a9e2c383641335beb67a978c088</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayLabelImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayLabelImpl.html</anchorfile>
      <anchor>a02d3815aeb09dea7b6fa6a19d1128fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayLabelImpl.html</anchorfile>
      <anchor>a94beffccdc20b934bba9da0653e84961</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayLabelImpl.html</anchorfile>
      <anchor>ad160afb68a84367222d9ddaf3da0e5d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrayLabelImpl.html</anchorfile>
      <anchor>adb6228965c592d3ef019d87703f41aaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrowConfig</name>
    <filename>structmc__rtc_1_1gui_1_1ArrowConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>ArrowConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>afee2c97534d0d32230344946009da5fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a596d68e4143fa44e40e6a78f5c35c87f</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>aa6c4a9f2dcf5a907df36d24c9160f620</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a225bae119da5006ad51eba798e35585f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a553dacc510a40dbc94a7d512e817c096</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>saveConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>acf8019c338e97faf680284f470a5ffbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a8d9de052a5467447e3241d1222fd6fb1</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a4f03733ede37fe30d20a308f6d7d5abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>head_diam</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a26256e219f431d46b0294dae46f9a080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>head_len</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a79bdd719f1213d5d0649b7ea1182b559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>shaft_diam</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a863ad38d78a492d921944bd9093a8f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>afa8c14add2dbeefbebee6a86217bfc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>start_point_scale</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>ad8499dc509f0c00ce757ed3bb46e2797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>end_point_scale</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a8769d2834d86e27f4dfcfac6dcb1a44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowConfig.html</anchorfile>
      <anchor>a7a0b446420b034cf38470ae68b35ed7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrowImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ArrowImpl.html</filename>
    <templarg>GetStart</templarg>
    <templarg>SetStart</templarg>
    <templarg>GetEnd</templarg>
    <templarg>SetEnd</templarg>
    <base>mc_rtc::gui::ArrowROImpl</base>
    <member kind="function">
      <type></type>
      <name>ArrowImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowImpl.html</anchorfile>
      <anchor>aa433a79021362f7338be283a44f58cf6</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowImpl.html</anchorfile>
      <anchor>a477913abc68cc99cddaf4496166dc412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowImpl.html</anchorfile>
      <anchor>a3d992464bca9a200b481434aecc0c7a5</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowImpl.html</anchorfile>
      <anchor>a106e8180fe61c6a91023ffb29f06ee98</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrowROImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ArrowROImpl.html</filename>
    <templarg>GetStart</templarg>
    <templarg>GetEnd</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>ArrowROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowROImpl.html</anchorfile>
      <anchor>a2931391d13181c75b69b122a0977a4a3</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowROImpl.html</anchorfile>
      <anchor>ab3973c42d423404df611627b43a1197f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowROImpl.html</anchorfile>
      <anchor>a7840f5c07db4b91e69e7a4b54fcc1a4f</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder, bool ro=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowROImpl.html</anchorfile>
      <anchor>a057d3112dd2282d30d59514ce55fdb3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ArrowROImpl.html</anchorfile>
      <anchor>a20358219220c836e9e56f425c9f33390</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::AxisConfiguration</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</filename>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>a6a8051c2000069f6e38ef3f25d8a4086</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>a6b6025a1158b29480ad8e3a917fefd28</anchor>
      <arglist>(std::string_view name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>a82913efc5cd9675f38e17f98bde85e7f</anchor>
      <arglist>(Range range)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>ac5dc5aa65f1fbf1cb927b0983b857aaf</anchor>
      <arglist>(std::string_view name, Range range)</arglist>
    </member>
    <member kind="function">
      <type>AxisConfiguration &amp;</type>
      <name>min</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>af4a1ad6155619aa6f1d2ab8feec617c3</anchor>
      <arglist>(double min)</arglist>
    </member>
    <member kind="function">
      <type>AxisConfiguration &amp;</type>
      <name>max</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>a57dec2715d846f093cfdd059378880f9</anchor>
      <arglist>(double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>adc3e755435f954a7e418d469533b08cc</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>a4b812f4837d01d6a931c415e518f67fb</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>a639c7393b6f1f870cb1a6128ba9536ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range</type>
      <name>range</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1AxisConfiguration.html</anchorfile>
      <anchor>a1d461d7275261bd5c496e415a523bd89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::details::BackendSpecificController</name>
    <filename>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</filename>
    <templarg>backend</templarg>
    <templarg>SolverT</templarg>
    <base>mc_control::fsm::Controller</base>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a7970ea4e48202086110b5585cb26edc9</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr rm, double dt, const mc_rtc::Configuration &amp;config, ControllerParameters params={})</arglist>
    </member>
    <member kind="function">
      <type>const SolverT &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a82c05dcf942cd6f8a9b48123b6914d9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SolverT &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a351fd95ea4e4f75558ecaa83ee4a0ad1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::details::BackendSpecificController</name>
    <filename>structmc__control_1_1details_1_1BackendSpecificController.html</filename>
    <templarg>backend</templarg>
    <templarg>SolverT</templarg>
    <base>mc_control::MCController</base>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a7b078345ecbff2a8f41fae6d26bc96eb</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr robot, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>aad914289fe9207eeb5e6fb071043469e</anchor>
      <arglist>(const std::vector&lt; mc_rbdyn::RobotModulePtr &gt; &amp;robots, double dt, const mc_rtc::Configuration &amp;config={}, ControllerParameters params={})</arglist>
    </member>
    <member kind="function">
      <type>const SolverT &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a1d32e86f2fb490c21d8497abce18022f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SolverT &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a78544ce201aacb5211694794212d11ca</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BackendSpecificController&lt; MCController::Backend::Tasks, mc_solver::TasksQPSolver &gt;</name>
    <filename>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</filename>
    <base>mc_control::fsm::Controller</base>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a7970ea4e48202086110b5585cb26edc9</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr rm, double dt, const mc_rtc::Configuration &amp;config, ControllerParameters params={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_solver::TasksQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a82c05dcf942cd6f8a9b48123b6914d9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::TasksQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a351fd95ea4e4f75558ecaa83ee4a0ad1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BackendSpecificController&lt; MCController::Backend::Tasks, mc_solver::TasksQPSolver &gt;</name>
    <filename>structmc__control_1_1details_1_1BackendSpecificController.html</filename>
    <base>mc_control::MCController</base>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a7b078345ecbff2a8f41fae6d26bc96eb</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr robot, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>aad914289fe9207eeb5e6fb071043469e</anchor>
      <arglist>(const std::vector&lt; mc_rbdyn::RobotModulePtr &gt; &amp;robots, double dt, const mc_rtc::Configuration &amp;config={}, ControllerParameters params={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_solver::TasksQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a1d32e86f2fb490c21d8497abce18022f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::TasksQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a78544ce201aacb5211694794212d11ca</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BackendSpecificController&lt; MCController::Backend::TVM, mc_solver::TVMQPSolver &gt;</name>
    <filename>structmc__control_1_1details_1_1BackendSpecificController.html</filename>
    <base>mc_control::MCController</base>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a7b078345ecbff2a8f41fae6d26bc96eb</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr robot, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>aad914289fe9207eeb5e6fb071043469e</anchor>
      <arglist>(const std::vector&lt; mc_rbdyn::RobotModulePtr &gt; &amp;robots, double dt, const mc_rtc::Configuration &amp;config={}, ControllerParameters params={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_solver::TVMQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a1d32e86f2fb490c21d8497abce18022f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::TVMQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a78544ce201aacb5211694794212d11ca</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BackendSpecificController&lt; MCController::Backend::TVM, mc_solver::TVMQPSolver &gt;</name>
    <filename>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</filename>
    <base>mc_control::fsm::Controller</base>
    <member kind="function">
      <type></type>
      <name>BackendSpecificController</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a7970ea4e48202086110b5585cb26edc9</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr rm, double dt, const mc_rtc::Configuration &amp;config, ControllerParameters params={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_solver::TVMQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a82c05dcf942cd6f8a9b48123b6914d9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::TVMQPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1fsm_1_1details_1_1BackendSpecificController.html</anchorfile>
      <anchor>a351fd95ea4e4f75558ecaa83ee4a0ad1</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Base</name>
    <filename>structmc__rbdyn_1_1Base.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>baseName</name>
      <anchorfile>structmc__rbdyn_1_1Base.html</anchorfile>
      <anchor>a29e3501c76c5f562000ea4c144bcb92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>structmc__rbdyn_1_1Base.html</anchorfile>
      <anchor>ae50130e4a7f74e88220617d3080c65ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b0_s</name>
      <anchorfile>structmc__rbdyn_1_1Base.html</anchorfile>
      <anchor>a4fed34226bcc4165ddc6f39fab4dfacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Joint::Type</type>
      <name>baseType</name>
      <anchorfile>structmc__rbdyn_1_1Base.html</anchorfile>
      <anchor>aefd54756f82332b9155a61cea33d8cc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::BodySensor</name>
    <filename>structmc__rbdyn_1_1BodySensor.html</filename>
    <base>mc_rbdyn::Device</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>BodySensor</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a0ccd7feb3cb52abec8d65b3da9df4989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BodySensor</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a44f050d481291a6015f3a5423e5098fe</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BodySensor</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a53b8def2da6127d7a84f7e5488d5350e</anchor>
      <arglist>(const BodySensor &amp;bs)</arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a464df9c5722e155018cebbb60edbbe1a</anchor>
      <arglist>(const BodySensor &amp;bs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BodySensor</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a481adcb82e3dac378ba4c1bd0fee37d4</anchor>
      <arglist>(BodySensor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>ac39771d679356af14ab9b5e8a738bfbb</anchor>
      <arglist>(BodySensor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BodySensor</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>ab9ffa63a5396c7eb000ea7fbf716d086</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>parentBody</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>ab5d6323b65ec6e712804d0c8590c8b55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_s</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>adb95b5d1ba5be5b51912cfc058f2371d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a2be6a3b9c958d75d4c4310418356e014</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a644c0b250aaa8890d6b8f9ea26f2afb6</anchor>
      <arglist>(const Eigen::Vector3d &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Quaterniond &amp;</type>
      <name>orientation</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>abcf42c2151733e3ef80c9594cb37a43a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a9544ac0b6bb997b65db638bf52b2d5a3</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>linearVelocity</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>ad01dc341ccff4cab51488c3cbffe21ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearVelocity</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a0df07b5cdfd86d18be2227182bb2aec2</anchor>
      <arglist>(const Eigen::Vector3d &amp;linear_velocity)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>angularVelocity</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a0a4ae01169db62588ed207fa0b60b117</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angularVelocity</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>aaf978a01b2013293156e3a825b58f868</anchor>
      <arglist>(const Eigen::Vector3d &amp;angular_velocity)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED const Eigen::Vector3d &amp;</type>
      <name>acceleration</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a3fd7e69c281f765b383df5c8adfcc69e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>acceleration</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a1632edbff87a11e1210cf34cfbf6b884</anchor>
      <arglist>(const Eigen::Vector3d &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>linearAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a61147130274da6eda00b8d5a1ec0e5e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>af860930bcdb938be5d229fa702b4bf0b</anchor>
      <arglist>(const Eigen::Vector3d &amp;linear_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>angularAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a57035ac9c86e2d085cce10e3013b2a5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angularAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>aabbebc2c66352f66de68032c25bdaa1a</anchor>
      <arglist>(const Eigen::Vector3d &amp;angular_acceleration)</arglist>
    </member>
    <member kind="function">
      <type>DevicePtr</type>
      <name>clone</name>
      <anchorfile>structmc__rbdyn_1_1BodySensor.html</anchorfile>
      <anchor>a636b6a07fb613352e458b6636fcf240f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::BodySensorObserver</name>
    <filename>structmc__observers_1_1BodySensorObserver.html</filename>
    <base>mc_observers::Observer</base>
    <member kind="function">
      <type></type>
      <name>BodySensorObserver</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a532191a2a03592259d50b9187b8eca71</anchor>
      <arglist>(const std::string &amp;type, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a82c12053cd7ee0e5fc56a93ed799c542</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, const mc_rtc::Configuration &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a23564250186a2e8780df9150945dad63</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a2a497aef03e071004c926032776ac520</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>aacf09f3f0913674473a5d0c52a18aff8</anchor>
      <arglist>(mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>posW</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a40a80d57f8974b3af7d4f65df95161ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velW</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a96afc25baaad80aa4c09d6619eb3be56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>ace7a5ef240bc42d89053419e8718eba3</anchor>
      <arglist></arglist>
      <enumvalue file="structmc__observers_1_1BodySensorObserver.html" anchor="ace7a5ef240bc42d89053419e8718eba3aa1595abbb4c3a326636dd178757cd6c1">Control</enumvalue>
      <enumvalue file="structmc__observers_1_1BodySensorObserver.html" anchor="ace7a5ef240bc42d89053419e8718eba3a06b185256c71c1aec263c6e22bf8ef6b">Sensor</enumvalue>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a4ef62f1518fd7282ef6bec6f48058d22</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::Logger &amp;, const std::string &amp;category) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a8799c2ebab0110ec2f97bf0e7e4ba52a</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::gui::StateBuilder &amp;, const std::vector&lt; std::string &gt; &amp;category) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Update</type>
      <name>updateFrom_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a41e24212545815c92909fc647cfd4d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>fbSensorName_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a66d2fa568fd183d424b8b45488fe5c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>posW_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a7b67ccbf5ae607a9ed7227d64825d4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>velW_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a4d5cc646377a58ef243bf1d6b8c10f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>accW_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a2ab22db3a902644b453b677193ea982a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>robot_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a6981aac220002179a743e97b840ca0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>updateRobot_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>aa8d9c4d70016890242f717cdd06ff224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>updatePose_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a579b85620df7509e6c9b17ce6eafea8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>updateVel_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>ae2a3a769d0449616911ee977ccb1a3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logPos_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a7e72177501cdb730e9c0b45e9081317a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logVel_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a39f442bf4bccd766c10111f31981b4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logAcc_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a8237ffd181f9918f0db8c7ab1489b217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>guiPos_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>afb584ec0df5887afd174376e9efee8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>guiVel_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a4fbcee149f86539039d0c1746287e2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::gui::ArrowConfig</type>
      <name>guiVelConfig_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>abbe0f538927979af74a1f512c945098f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>guiAcc_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a72d128b2af9dcd0e8d0375674f199038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::gui::ArrowConfig</type>
      <name>guiAccConfig_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>a8c704cdb9951fe8c4417dafbe2853fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>advancedGUI_</name>
      <anchorfile>structmc__observers_1_1BodySensorObserver.html</anchorfile>
      <anchor>adba11be987f21d8e3bc6f5ced05e4b2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::BoundedSpeedConstr</name>
    <filename>structmc__solver_1_1BoundedSpeedConstr.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>BoundedSpeedConstr</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a43af0872dd664d13d864053d3ecfda18</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a3e0135e09a0ca044d4f50bbcec3fdcdc</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a26c1996eb25ec71b97103c4773665afc</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>abcd47fff771a0c7357bd5b682398b3df</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>aff11f05b8b3f2139db8ae2d95ce4afee</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;lowerSpeed, const Eigen::VectorXd &amp;upperSpeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>afa687c05b49f7f9e74ce03aae501bf6c</anchor>
      <arglist>(QPSolver &amp;solver, const mc_rbdyn::RobotFrame &amp;frame, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a668d2463b1d9a83acabf416f584b685c</anchor>
      <arglist>(QPSolver &amp;solver, const mc_rbdyn::RobotFrame &amp;frame, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;lowerSpeed, const Eigen::VectorXd &amp;upperSpeed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeBoundedSpeed</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>af182915f9f2693bd127b50ce9a17ca73</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;frameName)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrBoundedSpeeds</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>a70c84d6defba583690d9175ca4cf192d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__solver_1_1BoundedSpeedConstr.html</anchorfile>
      <anchor>ab0fffcd8e01c61ced64cf5371999acb7</anchor>
      <arglist>(QPSolver &amp;solver)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::BSpline</name>
    <filename>structmc__trajectory_1_1BSpline.html</filename>
    <base>Spline&lt; Eigen::Vector3d, std::vector&lt; Eigen::Vector3d &gt; &gt;</base>
    <member kind="typedef">
      <type>ndcurves::bezier_curve&lt; double, double, false, Eigen::Vector3d &gt;</type>
      <name>bezier_curve_t</name>
      <anchorfile>structmc__trajectory_1_1BSpline.html</anchorfile>
      <anchor>abf063597c5e31654040e77dfdd09e545</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>waypoints_t</name>
      <anchorfile>structmc__trajectory_1_1BSpline.html</anchorfile>
      <anchor>ada383daeac50ae7ac8b720c6096289f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>structmc__trajectory_1_1BSpline.html</anchorfile>
      <anchor>a905828c45debcac32ddbd35718a138a1</anchor>
      <arglist>(double duration, const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;target, const waypoints_t &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__trajectory_1_1BSpline.html</anchorfile>
      <anchor>ab70108d4c7af3ce67b487bcbe11cab5d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>splev</name>
      <anchorfile>structmc__trajectory_1_1BSpline.html</anchorfile>
      <anchor>ae72e0f0db1744ff5a1e7ea8c8a832d5a</anchor>
      <arglist>(double t, unsigned int der=0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>sampleTrajectory</name>
      <anchorfile>structmc__trajectory_1_1BSpline.html</anchorfile>
      <anchor>ac34c7879cd2d0a941a6b303c366d16f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__trajectory_1_1BSpline.html</anchorfile>
      <anchor>a206f674c4f9e666083f9aa96b27b7628</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::BSplineTrajectoryTask</name>
    <filename>structmc__tasks_1_1BSplineTrajectoryTask.html</filename>
    <base>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a81d5a557b19cceddeb5fe7911db9dceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_trajectory::BSpline::waypoints_t</type>
      <name>waypoints_t</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a669d5fdec2578c135db701bba1727403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineTrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>ae178d7681e5746a9ba423a9eb3ecbf6e</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double duration, double stiffness, double weight, const sva::PTransformd &amp;target, const waypoints_t &amp;posWp={}, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineTrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>aeb967476c50f3838e13951e0f3d9527c</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;surfaceName, double duration, double stiffness, double weight, const sva::PTransformd &amp;target, const waypoints_t &amp;posWp={}, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_trajectory::BSpline &amp;</type>
      <name>spline</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a81a378c092ca9206ea9fa9e14448e979</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_trajectory::BSpline &amp;</type>
      <name>spline</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a57429fbfc25ba22a34d9881f54b76121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a5c4c24081d3cfc9ba7d61097f97c968e</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posWaypoints</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a60f2ef40ea951b8d1b9235dbfda346ca</anchor>
      <arglist>(const waypoints_t &amp;posWp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetPos</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a559bf605e5d3ee712f3beb4ca867daf0</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetPos</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>a9c6b5bc01bbaa882d10178076867265e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::BSpline</type>
      <name>bspline</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>ac881b5b505b63c5e89bec2e598c767e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</name>
      <anchorfile>structmc__tasks_1_1BSplineTrajectoryTask.html</anchorfile>
      <anchor>ac5eeec3b2af2e5d3a329daf981453a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ButtonImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ButtonImpl.html</filename>
    <templarg>Callback</templarg>
    <base>VoidCallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>ButtonImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ButtonImpl.html</anchorfile>
      <anchor>a6a2a14b50f174bfa4b780b9ce5b1f6d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ButtonImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ButtonImpl.html</anchorfile>
      <anchor>a7000759c96ebcc16419cae8ff7cb311f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ButtonImpl.html</anchorfile>
      <anchor>ac31b264c88f746ffcf7579b769d5fc8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::callback_is_serializable</name>
    <filename>structmc__rtc_1_1log_1_1callback__is__serializable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1log_1_1callback__is__serializable.html</anchorfile>
      <anchor>a30715f0ef917d1f59c8970b98963b5d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::callback_is_serializable&lt; T, void_t&lt; typename std::result_of&lt; T()&gt;::type &gt; &gt;</name>
    <filename>structmc__rtc_1_1log_1_1callback__is__serializable_3_01T_00_01void__t_3_01typename_01std_1_1resu4170dc16e1156e9ccfa8a0a7bb9a6205.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::result_of&lt; T()&gt;::type</type>
      <name>ret_type</name>
      <anchorfile>structmc__rtc_1_1log_1_1callback__is__serializable_3_01T_00_01void__t_3_01typename_01std_1_1resu4170dc16e1156e9ccfa8a0a7bb9a6205.html</anchorfile>
      <anchor>aef4b08e21ec244022984ccf6e4b74be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::decay&lt; ret_type &gt;::type</type>
      <name>base_type</name>
      <anchorfile>structmc__rtc_1_1log_1_1callback__is__serializable_3_01T_00_01void__t_3_01typename_01std_1_1resu4170dc16e1156e9ccfa8a0a7bb9a6205.html</anchorfile>
      <anchor>af27939ca5ec152a0cdee9547e49359fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr LogType</type>
      <name>log_type</name>
      <anchorfile>structmc__rtc_1_1log_1_1callback__is__serializable_3_01T_00_01void__t_3_01typename_01std_1_1resu4170dc16e1156e9ccfa8a0a7bb9a6205.html</anchorfile>
      <anchor>a431162f2bebb2de00776c2e91f7e50ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1log_1_1callback__is__serializable_3_01T_00_01void__t_3_01typename_01std_1_1resu4170dc16e1156e9ccfa8a0a7bb9a6205.html</anchorfile>
      <anchor>ad44f5a0890f2632185a3e1ed279b91b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::CallbackElement</name>
    <filename>structmc__rtc_1_1gui_1_1CallbackElement.html</filename>
    <templarg>ElementT</templarg>
    <templarg>Callback</templarg>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Callback</type>
      <name>cb_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1CallbackElement.html</filename>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Callback</type>
      <name>cb_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackElement&lt; DataElement&lt; GetT &gt;, SetT &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1CallbackElement.html</filename>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, SetT cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SetT</type>
      <name>cb_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackElement&lt; Element, Callback &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1CallbackElement.html</filename>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Callback</type>
      <name>cb_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CallbackElement.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::internal::CallbackOrValue</name>
    <filename>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue.html</filename>
    <templarg>T</templarg>
    <templarg>Callback</templarg>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue.html</anchorfile>
      <anchor>ab1c34352d195bd90bf1b79e629a7a1eb</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="variable">
      <type>Callback</type>
      <name>callback</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue.html</anchorfile>
      <anchor>a58ffa374d2a4923cc81fe2ba78cc5b91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackOrValue&lt; T, DataCallback &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue.html</anchorfile>
      <anchor>ab1c34352d195bd90bf1b79e629a7a1eb</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="variable">
      <type>DataCallback</type>
      <name>callback</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue.html</anchorfile>
      <anchor>a58ffa374d2a4923cc81fe2ba78cc5b91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::internal::CallbackOrValue&lt; T, void &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue_3_01T_00_01void_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue_3_01T_00_01void_01_4.html</anchorfile>
      <anchor>af20d46f3ac1c9449266272fd08cbec77</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1CallbackOrValue_3_01T_00_01void_01_4.html</anchorfile>
      <anchor>a2a6873e05d8a167aa180ef97ad503ec2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::CheckboxImpl</name>
    <filename>structmc__rtc_1_1gui_1_1CheckboxImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>Callback</templarg>
    <base>VoidCallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>CheckboxImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CheckboxImpl.html</anchorfile>
      <anchor>a2be8a9d91abdab7867e3ef29903aa18a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckboxImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CheckboxImpl.html</anchorfile>
      <anchor>a49e606784d3c5c64ebf3dc493491e99d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CheckboxImpl.html</anchorfile>
      <anchor>a39f960415eb48979416b212d6f08c453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::CheckReturnType</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1CheckReturnType.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1CheckReturnType.html</anchorfile>
      <anchor>a1cd446713edcf2fe36d5ac75ab1a46ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::CheckReturnType&lt; GetT, T &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1CheckReturnType_3_01GetT_00_01T_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1CheckReturnType_3_01GetT_00_01T_01_4.html</anchorfile>
      <anchor>adffa0057cdc8db7d17518647ecdaae3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::CheckReturnType&lt; GetT, T, Args... &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1CheckReturnType_3_01GetT_00_01T_00_01Args_8_8_8_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1CheckReturnType_3_01GetT_00_01T_00_01Args_8_8_8_01_4.html</anchorfile>
      <anchor>ae2a3213c436d7248322db80b601c9747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Collision</name>
    <filename>structmc__rbdyn_1_1Collision.html</filename>
    <member kind="function">
      <type></type>
      <name>Collision</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>afaef9be2f1209c8cc63876f13b8da184</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Collision</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>acaefaa7de7a14d7bf9b54fd270191322</anchor>
      <arglist>(const std::string &amp;b1, const std::string &amp;b2, double i, double s, double d, const std::vector&lt; std::string &gt; &amp;r1Joints={}, const std::vector&lt; std::string &gt; &amp;r2Joints={})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNone</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>a664a8719f81b8fee2d2b26cd3cf645ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>aab32d2891597a9ec0d7f76e3dd0723a9</anchor>
      <arglist>(const Collision &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>a4f990041663f252046812111a6791048</anchor>
      <arglist>(const Collision &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>body1</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>a169addbd06a09743b06287121884f027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>body2</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>afde353de6419a4e248eec0851f664968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>iDist</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>a4e96ac27cda155ffddb1222ff08f012c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sDist</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>a2853ab9ab669747303ccda6b22bb7d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>damping</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>affd388406c44197c32f6685e64d7bdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>r1Joints</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>a7dbc635314d1e44f1cbd7c7a380281d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>r2Joints</name>
      <anchorfile>structmc__rbdyn_1_1Collision.html</anchorfile>
      <anchor>a61143aeca6bba9864fb2101795ed0a89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Collision</name>
    <filename>classCollision.html</filename>
  </compound>
  <compound kind="class">
    <name>mc_tvm::CollisionFunction</name>
    <filename>classmc__tvm_1_1CollisionFunction.html</filename>
    <class kind="struct">mc_tvm::CollisionFunction::ObjectData</class>
    <member kind="function">
      <type></type>
      <name>CollisionFunction</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a8f3457c1630f6d1f5af733bd60f36f29</anchor>
      <arglist>(Convex &amp;c1, Convex &amp;c2, const Eigen::VectorXd &amp;r1Selector, const Eigen::VectorXd &amp;r2Selector, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tick</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a2802bb60cf82822ea1d6528945262927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a1361485735fbf8cd94b0d9d6afc97c78</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Convex &amp;</type>
      <name>c1</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a58dca411ae31a56582e668cf2c3bd521</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>p1</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a2f0771f602bcf6b1ef7c38067b86fcd1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Convex &amp;</type>
      <name>c2</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a3f95abc1296a7c8d9844070696ef32d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>p2</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>ac3bb024083fd116c8dbd006387345517</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a7493c08428352a052b5d09ecbf12b34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a170da4aa7f7bc5393670cdfa959234a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a72160c6b52543f69a0538d5cdbabc03f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a523bb39e53949b915c4e65f28b75a1e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>iter_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>aafda5921b5b3d11cc320bf51a9ca83d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>prevIter_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a150ee2817848dcd89f09c4c02bebb6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Convex *</type>
      <name>c1_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a39b9f1e0a3cbc9b0946621d4700fad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Convex *</type>
      <name>c2_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a14f88b57ff44380f6e6a3b326a4a76cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>af8093a914fe6183b0754ee50a3939d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>p1_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a9ca070d931cc1917a431346cf7d9205e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>p2_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a9f03497373f80942dea1ccccef2cd888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sch::CD_Pair</type>
      <name>pair_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a701faf6f4f689fe703e67a2a6ff60fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ObjectData &gt;</type>
      <name>data_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a53589f1e73541287c6744cbd6212498a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>normVecDist_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>ac5225833d310e2634735b7bb0fef6530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>prevNormVecDist_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a83213fc60dca27d922621e5c273fa0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>speedVec_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a60c715766d717b2264aa14011f29ccf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>fullJac_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a321b1efc7c2c5ad90195d134bf8c9320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>distJac_</name>
      <anchorfile>classmc__tvm_1_1CollisionFunction.html</anchorfile>
      <anchor>a96815c55c76bdb875d286cd10fd312ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::CollisionsConstraint</name>
    <filename>structmc__solver_1_1CollisionsConstraint.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>CollisionsConstraint</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a9a46b2c285695e166eefc0814938e2b4</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeCollision</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>abd70fa0653a8fbdc8d9e397694340626</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;b1Name, const std::string &amp;b2Name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisions</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a0e5e400e748c70619be1602764431b5f</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeCollisionByBody</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a5f5f7b094d049ef78ceaba70868db1f4</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;byName, const std::string &amp;b2Name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollision</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a63ceff121b62162d0817026e7177767e</anchor>
      <arglist>(QPSolver &amp;solver, const mc_rbdyn::Collision &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollisions</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a9908fdb932f5228faf0e508f9db37edd</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a3234964e5bd5e0bd73e62f507f1880c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>ac67b641bbf9753c95ae23a15d0462f94</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a1b4f2373157afc1f88ab43dad20be2b7</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::void_ptr</type>
      <name>constraint_</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>adb40cc68a584c126097a434c9e9512cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>r1Index</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a0fbd97c53f4fb31297e1abd61fa304b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>r2Index</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a0dc1390b5fc625595ded740a9e12afd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; mc_rbdyn::Collision &gt;</type>
      <name>cols</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a8f2dea27de0d2763cf96505ecac6f61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultDampingOffset</name>
      <anchorfile>structmc__solver_1_1CollisionsConstraint.html</anchorfile>
      <anchor>a53ad175e22679ab9924f71ad573fd87a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Color</name>
    <filename>structmc__rtc_1_1gui_1_1Color.html</filename>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a6bf0c09177e7f1b669b9adb92c419e31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a6617b4f252dcb3740631c1bcdaa3cb67</anchor>
      <arglist>(double r, double g, double b, double a=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>aab06b548deecc9ca44696c6b98213e55</anchor>
      <arglist>(const Eigen::Vector3d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a81127ba81153ea1258152723f280323c</anchor>
      <arglist>(const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>aeb57adc472b6fb0a69bf7a10b5f5594a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a88f0c62ce52e458e2b1e43df4b276cee</anchor>
      <arglist>(const Color &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a35449e25ee188f7eb035bde4cdbb9585</anchor>
      <arglist>(const Color &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a201dd52d431e2ea56fb165822154f85b</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>ace1e440c98b94d1beb7525aeb268bdbc</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>saveConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a504ad1b365d18dfdcd91eded1ae83c93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a978da973c4ae23ee6eb6024cdd25e601</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a87e4816568409dd6a11a288a9007e1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>r</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>af5fa54af25cd633fec4abb5cd14c0b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>g</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>acf401312f7e9a75003519e34206904f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a19f305fdd38fecd3a8fb92282afd9291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>ab9713e13336d4780ae324ca7d2b3f06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>White</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a5f5e172d9bab5c0466a472a29524624c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Black</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a30bf9fd63c97d6aafcba351ef24623ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Red</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a3d0adbf54f2e20cb7b501ba72c8f7276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Green</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>abdba78af0ed851bf27d15fed39883f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Blue</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a5a61a49e6fc3a4164027706e24071ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Cyan</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>af871b9eafcbda49196e2fceeae7333f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Magenta</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a7c21a98320c6d79a3e8d64fec9574d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Yellow</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>aea41af05139ca52503e824b2021d372a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Gray</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a4f74e46e6c7c8bcc08298e143ffeb25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>LightGray</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>a3df51c77219b7e3811b711250de18017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::map&lt; std::string, Color &gt;</type>
      <name>ColorMap</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Color.html</anchorfile>
      <anchor>aa0e78cc8d6f0ea185fa70c4a5b95d6c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::ColoredPolyhedronImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1ColoredPolyhedronImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ColoredPolyhedronImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ColoredPolyhedronImpl.html</anchorfile>
      <anchor>ab6e913f9aa2658ac5e00cac59415ef35</anchor>
      <arglist>(PolyhedronT &amp;&amp;poly, GetColorT get_color_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColoredPolyhedronImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ColoredPolyhedronImpl.html</anchorfile>
      <anchor>a52ee7cc911dfff011ed84e31b7a5bd36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ColoredPolyhedronImpl.html</anchorfile>
      <anchor>accab9daf6e28b3efd3bdf847f67e2095</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ColoredPolyhedronImpl.html</anchorfile>
      <anchor>ae695bcd60727c7cc10d95250d5c6a815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetColorT</type>
      <name>get_color_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ColoredPolyhedronImpl.html</anchorfile>
      <anchor>a96f16e1780ddfc8465abbfece875355c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::CoM</name>
    <filename>structmc__tvm_1_1CoM.html</filename>
    <member kind="function">
      <type></type>
      <name>CoM</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a20ae2b2112be86404dc38a3be9a24507</anchor>
      <arglist>(NewCoMToken, Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>afe2ba950941f1cfdcc20c6037e0a1ce7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>velocity</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a0920c2c998cf35a6c33a6121839bebeb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a604d552fccda78690b5413fb0e3c9809</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>acceleration</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a2fe85c3b584708c66e73aecfbe5eac08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobian</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a6b9913a44072a8a26f9466f991b9b7b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>JDot</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a273e83cbe6ed531d4ce2e4052c73ee9e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a734eab6d5b8faa8d0a06b5f71e52cecb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a4a389d0466c3fd5ee38b2ccfb3863c02</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const rbd::CoMJacobian &amp;</type>
      <name>comJacobian</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>a9da353ab0dab1894d4d47a71bd184533</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robot</name>
      <anchorfile>structmc__tvm_1_1CoM.html</anchorfile>
      <anchor>ad03b49f51df2ba1d492ced03d923fdd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ComboInputImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ComboInputImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>ComboInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ComboInputImpl.html</anchorfile>
      <anchor>a878cc6bcd8c591901875a5bc50ca3d8d</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ComboInputImpl.html</anchorfile>
      <anchor>a8634db0eae6c2bb845b8521c2866676d</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ComboInputImpl.html</anchorfile>
      <anchor>a9a8d446bb306476504480f7b0438905d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ComboInputImpl.html</anchorfile>
      <anchor>a8227eaf335ae36ca1739cfc97eabe8f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ComboInputImpl.html</anchorfile>
      <anchor>af26181127e4bd175ee0e474d79b41b91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::CoMFunction</name>
    <filename>structmc__tvm_1_1CoMFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>CoMFunction</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>a61dbbd5a6d6d5c6437edc9cc2207a83f</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>a0875e8a1046e3ae7b1569b267487bd23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>adc5e6f0a5d13dfa60e36d1375b980281</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>a53da98cd12aee7f24b3fc8b2d0f0e1a3</anchor>
      <arglist>(const Eigen::Vector3d &amp;com) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>abd429c514217e80c9db466f274f96e70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refVel</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>a42e696fc4884732ad24f750498cfaa73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>abfd6b5c64a70e0911435b853dfc2a782</anchor>
      <arglist>(const Eigen::Vector3d &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refAccel</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>a9180a89712c11669d888b4b05737f442</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>structmc__tvm_1_1CoMFunction.html</anchorfile>
      <anchor>ab00f895027034a6fbde4c7e3d0cba965</anchor>
      <arglist>(const Eigen::Vector3d &amp;refAccel) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::CoMInConvexFunction</name>
    <filename>structmc__tvm_1_1CoMInConvexFunction.html</filename>
    <member kind="typedef">
      <type>tvm::function::abstract::Function::Output</type>
      <name>Output</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a9243c035c3f77d3b2eee5d94c0a44dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMInConvexFunction</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a136cb246eed8961d68f9b8202ce8325e</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlane</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a957f8b4056183720689e8ce3749becfa</anchor>
      <arglist>(tvm::geometry::PlanePtr plane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a10cbec4d1b1c42b768a08f2b7c2970e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>ada87b71da3915c3b8dfb1e4c2148128c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; tvm::geometry::PlanePtr &gt; &amp;</type>
      <name>planes</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>adde2150d37bc874ac9da377d5964ccfd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::geometry::Plane &amp;</type>
      <name>plane</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a294e24779d2d99f0fdaa81317c22b0ce</anchor>
      <arglist>(size_t i) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a63d84411d467e2be2c76d0e9442ff517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a79f5e0a686f3a47a310b4855772ddd5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a7e05e0f2de547e844a5c5b5e15ef6ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>afb2503489acaac7adee62163505b7326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::CoM &amp;</type>
      <name>com_</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>ac422c9da2108a0ccc05604682b797f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; tvm::geometry::PlanePtr &gt;</type>
      <name>planes_</name>
      <anchorfile>structmc__tvm_1_1CoMInConvexFunction.html</anchorfile>
      <anchor>a33f3cf76ebde8e6af9f698f206c85138</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::CoMIncPlaneConstr</name>
    <filename>structmc__solver_1_1CoMIncPlaneConstr.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>CoMIncPlaneConstr</name>
      <anchorfile>structmc__solver_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a36c14d8513aede45203f3113bca8866f</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a94e6c71d438e21f5a255431104041c78</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a889618ec5824f33b9bc2759914af1c0b</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>set_planes</name>
      <anchorfile>structmc__solver_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a9edafc031545c4395965a7ac0ebe6477</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Plane &gt; &amp;planes, const std::vector&lt; Eigen::Vector3d &gt; &amp;speeds={}, const std::vector&lt; Eigen::Vector3d &gt; &amp;normalsDots={}, double iDist=0.05, double sDist=0.01, double damping=0.1, double dampingOff=0.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanes</name>
      <anchorfile>structmc__solver_1_1CoMIncPlaneConstr.html</anchorfile>
      <anchor>a9c30b632b5b5e654c666721a69d11714</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Plane &gt; &amp;planes, const std::vector&lt; Eigen::Vector3d &gt; &amp;speeds={}, const std::vector&lt; Eigen::Vector3d &gt; &amp;normalsDots={}, double iDist=0.05, double sDist=0.01, double damping=0.1, double dampingOff=0.)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::CommonInputImpl</name>
    <filename>structmc__rtc_1_1gui_1_1CommonInputImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CallbackElement&lt; DataElement&lt; GetT &gt;, SetT &gt;</base>
    <member kind="function">
      <type></type>
      <name>CommonInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CommonInputImpl.html</anchorfile>
      <anchor>a1d18c6be098836d8c4dc9cd9bcae1072</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommonInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1CommonInputImpl.html</anchorfile>
      <anchor>aee87ac9fbe3573e62fd457a0065118e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::CompletionCriteria</name>
    <filename>structmc__control_1_1CompletionCriteria.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>completed</name>
      <anchorfile>structmc__control_1_1CompletionCriteria.html</anchorfile>
      <anchor>a6b2c61033f0f8d2d7f45aeb6e8fb028e</anchor>
      <arglist>(const mc_tasks::MetaTask &amp;task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1CompletionCriteria.html</anchorfile>
      <anchor>a7cf119e44a4a74ad734dc2fe34f2fff6</anchor>
      <arglist>(const mc_tasks::MetaTask &amp;task, double dt, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>output</name>
      <anchorfile>structmc__control_1_1CompletionCriteria.html</anchorfile>
      <anchor>a2485b806e905c84cd087fb47287f2240</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::ComplianceTask</name>
    <filename>structmc__tasks_1_1force_1_1ComplianceTask.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type></type>
      <name>ComplianceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a03b5a2771296557111100c6ca0ddc873</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;body, double timestep, const Eigen::Matrix6d &amp;dof=Eigen::Matrix6d::Identity(), double stiffness=5.0, double weight=1000.0, double forceThresh=3., double torqueThresh=1., std::pair&lt; double, double &gt; forceGain=defaultFGain, std::pair&lt; double, double &gt; torqueGain=defaultTGain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplianceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a859869df35e31dd54e09a1a2e25f602c</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;body, double timestep, double stiffness=5.0, double weight=1000.0, double forceThresh=3., double torqueThresh=1., std::pair&lt; double, double &gt; forceGain=defaultFGain, std::pair&lt; double, double &gt; torqueGain=defaultTGain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>af4b7d4df6aeeff1f359b6465dadb29d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>getFilteredWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a89bd5b9501d970f3fc4b847ffa084592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a2b45259a30107a6204afe29de4789d5e</anchor>
      <arglist>(const sva::ForceVecd &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>getTargetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a978e9f71933578108ec5eff13b09de0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a449d3d8ab18b84bb0d12b932b8aea91a</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>aa97e6e109aed6c749c86c3e52ff734f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a04018b7471bd13a2a53488805bbb4c00</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a2ac7d3a0f032a28664f341b111ea9b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceThresh</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>afdc2f323bda36fb60212f95f6671d22a</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>forceThresh</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a72ec1f3e8d39f7eb5968584b8386b860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torqueThresh</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a044c1fedcaef27af30b4c40b3722cc8c</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>torqueThresh</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a31c058f1eb7eea9a1a96a4aecedf2522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a85fd09f0aa44d74d7ea178a1a854aa4d</anchor>
      <arglist>(std::pair&lt; double, double &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>forceGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>ab60763dc6de33680b62268e34965da2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torqueGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a5177a999dfcd172f539b6c74cf786dae</anchor>
      <arglist>(std::pair&lt; double, double &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>torqueGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>ae49b7e1b18ab7cca6e79a0b49ba55ce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dof</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a25d158e3ea17507fe4ba679818e8d71a</anchor>
      <arglist>(const Eigen::Matrix6d &amp;dof)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix6d</type>
      <name>dof</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a4db01beff8250952ae3b0f853020e8c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>af29f3468d90160d16cdc8d7c8188c074</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>ade42094d33ea2b4967c7c7c49b10e953</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectActiveJoints</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>ac916be1434dee468c5924ad903a3b609</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>abab673c6f1104ed69eecc72f9a236ba2</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetJointsSelector</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>ad1f9dd57c39cef2bdcffafeea3404702</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a1e2ffbb255464894b2254af872876957</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a54d74b5d04bac21cde53bfc0b3c29350</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW const std::pair&lt; double, double &gt;</type>
      <name>defaultFGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>a36a1c39c55f41ba2cfa466ffeaa624c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::pair&lt; double, double &gt;</type>
      <name>defaultTGain</name>
      <anchorfile>structmc__tasks_1_1force_1_1ComplianceTask.html</anchorfile>
      <anchor>ad3e9ab5aabe40a0c95a290aa25f9b7ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::details::CompoundJointConstraint</name>
    <filename>structmc__solver_1_1details_1_1CompoundJointConstraint.html</filename>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI</type>
      <name>CompoundJointConstraint</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>ad06e91a57f1229af89b70c358f4a7b13</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int rIndex, double dt)</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI</type>
      <name>CompoundJointConstraint</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>acb4fa85bb33ff2a1de3b7de351f131c5</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int rIndex, double dt, const CompoundJointConstraintDescriptionVector &amp;desc)</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI</type>
      <name>~CompoundJointConstraint</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>a652516c75f732ca1396233a447a75060</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI void</type>
      <name>addConstraint</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>aa6b6d7c5a42e5233d89290cd75460dad</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int rIndex, const CompoundJointConstraintDescription &amp;desc)</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>ad18a2350451245577b50d4556cc566fa</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>a12500c0416901546eb4d77bf0a3d2c9e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>aab8f87d466ef7d494d1781854d5753db</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxInEq</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>a6c4e91e2613fdeb3f7fc8120b46560e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>nameInEq</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>a63d6b830f71e0e0cc7667b1577d754d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>a55dffd4ce88a71b31224c2487a2156ad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>structmc__solver_1_1details_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>aac212bc890f2ed4dc3e059e915408b02</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::CompoundJointConstraint</name>
    <filename>structmc__solver_1_1CompoundJointConstraint.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>CompoundJointConstraint</name>
      <anchorfile>structmc__solver_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>a6bab2c52e39b3c37781091ff0477b554</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double dt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundJointConstraint</name>
      <anchorfile>structmc__solver_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>ad4afcab3d84695d266751de81854d522</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robot, unsigned int robotIndex, double dt, const CompoundJointConstraintDescriptionVector &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>ad78058050bf35ad9b60fa5ae7ad5867b</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1CompoundJointConstraint.html</anchorfile>
      <anchor>a6e55cfaa8c320f257149ba9d51873bc4</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::CompoundJointConstraintDescription</name>
    <filename>structmc__rbdyn_1_1CompoundJointConstraintDescription.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW std::string</type>
      <name>j1</name>
      <anchorfile>structmc__rbdyn_1_1CompoundJointConstraintDescription.html</anchorfile>
      <anchor>a4fc963a5996bfafc4e1e0675e9db6b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>j2</name>
      <anchorfile>structmc__rbdyn_1_1CompoundJointConstraintDescription.html</anchorfile>
      <anchor>ac9819775fec0daea6ce39b6979ef153d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>p1</name>
      <anchorfile>structmc__rbdyn_1_1CompoundJointConstraintDescription.html</anchorfile>
      <anchor>a8c937c01687684763d1d040626ca9dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>p2</name>
      <anchorfile>structmc__rbdyn_1_1CompoundJointConstraintDescription.html</anchorfile>
      <anchor>a0cc1f94178b76862c60dd6d6c86ddb07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::CompoundJointFunction</name>
    <filename>structmc__tvm_1_1CompoundJointFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>CompoundJointFunction</name>
      <anchorfile>structmc__tvm_1_1CompoundJointFunction.html</anchorfile>
      <anchor>afe531bc4d79d2d5bb915af337011950e</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const mc_rbdyn::CompoundJointConstraintDescription &amp;desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dt</name>
      <anchorfile>structmc__tvm_1_1CompoundJointFunction.html</anchorfile>
      <anchor>a062c0de28782af329eed89feb9d274bb</anchor>
      <arglist>(double dt)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::CoMTask</name>
    <filename>structmc__tasks_1_1CoMTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>a4c8786f3b387a997fb2ae923e2843669</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=5.0, double weight=100.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>ad3b7357c19453006b5af45c25a786f9e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move_com</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>ad6a83e7e89cbae657665c8815c558f4d</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>a9c9d83e308955c7de9205e28bc7c0e9b</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>afab16ec288652d1509a90a4df324e3ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>abc72179651c43a085fe41dd7e420b699</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>a1e128a33ad470c85099edc2f64409a25</anchor>
      <arglist>(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>ad673a413597c928fe6b631c7d778e650</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1CoMTask.html</anchorfile>
      <anchor>a67f50fc6a98a4d834ab322931766499d</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Configuration</name>
    <filename>structmc__rtc_1_1Configuration.html</filename>
    <class kind="struct">mc_rtc::Configuration::Exception</class>
    <member kind="function">
      <type>MC_RTC_DEPRECATED bool</type>
      <name>isMember</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a983c430fc82d271e83397cc546197c6d</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a6488f8ecfa643aebe3c77e8fd4218160</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aab2994ae20cb81a98567fa3f7dada3fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int8_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a4e97283946de569617be0c40319521ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint8_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a9b7ffae96984d36e4f0438b130a80aa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int16_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ad1f3ce752f08879eb61e68b415a45c72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint16_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a570adf2564bf994e405785374074db25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int32_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af8e3b548ed89ecab2ad60dc6a8c46e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint32_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a82e00a8b56a139a51b09b425bcaa2c95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int64_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a32803cad64b14b34c620c9b5e37072a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64_t</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a00e2bb70e28b2fd7f1e2a7e127db936b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab5db0da32673006f62e46b9a8251d84e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aec19d5037e1fead68093f2f2edee4592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Vector2d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a9e120c4c13e652f87528d0af495160c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Vector3d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ac33924d180b8d55448ee3e2ff7d07ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Vector4d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aa72218d59f450a0f7b00b92884a52a57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Vector6d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a028726dd426da2ce9c6101297b2c197c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator mc_rbdyn::Gains2d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab4277077c2bcfe6f21eb33ddf18aed03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator mc_rbdyn::Gains3d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a11e4a412a6e0fab0fdb4a33746eefca6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator mc_rbdyn::Gains6d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a157e0ee8843fa29aa11dd4a959c77608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::VectorXd</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a7b23823ef481d190f96bc451dd9e7882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Quaterniond</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aca0f087d742c71c166993aa5617ec9a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Matrix3d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a7a2df9dbb9a6139d9ff99c6c60ef61a8</anchor>
      <arglist>() const</arglist>
      <docanchor file="structmc__rtc_1_1Configuration">Matrix3d_operator</docanchor>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Matrix6d</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a80b1043ef8da93ff82487f6fb6c13303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::MatrixXd</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af81c15b1dd176938e437913bac33f42c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sva::PTransformd</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a77528e3ee7e12ac9a0fc6cce71feb176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sva::ForceVecd</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>abde2e86ccecf6e5f45f6cb6a2f6590fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sva::MotionVecd</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a548367a2c7a77ee3e9a8fae5dd955767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sva::ImpedanceVecd</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a570dbad850a519f785f15dc8276e2c30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; T, A &gt;</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab06d6d358eef19d9c4c8748bc7767064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::array&lt; T, N &gt;</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aa4af8f372da0ca5bc835588c737c5877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::pair&lt; T1, T2 &gt;</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a552f9761ab8458992b1ef20ad9019602</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; std::string, T, C, A &gt;</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ac26424cf2ed968f1999a3277ab4f7835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::set&lt; T, C, A &gt;</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a7cb85c50202da3906f0af969eb4af6d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::unordered_set&lt; T, H, E, A &gt;</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0ed2f23cedeb589c8f7f26f54b99b76f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a60d258128cadfb8b4cc30229d169991b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a60d258128cadfb8b4cc30229d169991b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a56857d79e0d10c4347e20ee425987970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af2bae551aad627ee177f6897c7258eb0</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a10aac0c05692c6b8ac9667ce9f104395</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ad0a580d2b8dfb6896f79005eccb8f400</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a6c9bdbb3100799d4905a06a19b431362</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0ffb387fee217c9b635099dbe61c4984</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadYAMLData</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab49ef6ce388e0698db3574e329de4ccc</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a77eb23c01cd9f1f5f36047829121aeef</anchor>
      <arglist>(const std::string &amp;path, bool pretty=true) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dump</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>afda08b8028840339ae754ae18d85a402</anchor>
      <arglist>(bool pretty=false, bool yaml=false) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>toMessagePack</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ac40b549f94ac55bb5f99b2b8a5343709</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toMessagePack</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0f5e10d984befe08c3a5b23ce0cd25cf</anchor>
      <arglist>(MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>operator()</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ad8bc98b0203b31bd14f80fb84de0d9df</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a2796ec136928735aecaa448c91758e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a08e9130c96815bb8fe1092d69b9ea67a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArray</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a8f15dd954d0832c59e7f11c449a2afaf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isObject</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a73cf712b3cb39a947fc26ec2a7e83c75</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isString</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>abf3f64466ba6029fa274d5d1bb536113</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a75e3c78e014ad6e5b66cf3a9f82dbb9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>operator[]</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af63d0b9fe005fd5fea2078a17c62b2e7</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a945df64f7246385258b1d6190566586f</anchor>
      <arglist>(size_t i, const T &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a4bd14911f7201bfc8d7ae644ceed153f</anchor>
      <arglist>(const std::string &amp;key, T &amp;v) const</arglist>
      <docanchor file="structmc__rtc_1_1Configuration">retrieve_and_store_template</docanchor>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a495e1e8637ac6471065748d23bade3fc</anchor>
      <arglist>(const std::string &amp;key, const T &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a8b8525da90c67972b332d4ee13c6111f</anchor>
      <arglist>(const char *rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab40bcb05918c9fea3ea53ecd4c8d5d85</anchor>
      <arglist>(const T &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_null</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a9f830086d3d5434db12cee782c6144a2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a6a28ad4e71394b56e27687e9d64a8cda</anchor>
      <arglist>(const std::string &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ade042daba56d5d0ec500412077a4e1eb</anchor>
      <arglist>(const std::string &amp;key, int8_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a50d6a43811251874b1c4e11be29fa7de</anchor>
      <arglist>(const std::string &amp;key, uint8_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ad989ff036acb61548547424bc76f92c8</anchor>
      <arglist>(const std::string &amp;key, int16_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>abff23a45849dc4a9aa8e064f8d6c7371</anchor>
      <arglist>(const std::string &amp;key, uint16_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a95f18ab31e5917324fffa93ffda9c722</anchor>
      <arglist>(const std::string &amp;key, int32_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a907d4fb92315e13b9572a1d6e4a1c672</anchor>
      <arglist>(const std::string &amp;key, uint32_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a1fbaebc34e51e08b6cbe8546ef1797e6</anchor>
      <arglist>(const std::string &amp;key, int64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a84124f26f358cd627bac643a6d943ea5</anchor>
      <arglist>(const std::string &amp;key, uint64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a2f4ba1235e2b9244b088b7c53e628473</anchor>
      <arglist>(const std::string &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a4f6a511f64af1b3d6f2b2615f8a8f6d4</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>acf1ace73ff093e8db22d7301afe54c08</anchor>
      <arglist>(const std::string &amp;key, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a445f971b2ff6b0211f0dd9dac27acb7c</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Vector2d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a943753f6cca1b82f7115eb76fe478a10</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ac33f957d2ea4c36430cfdb4d75e6f27e</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Vector4d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0f720b9cb210c2712dfb6ccc28741c89</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Vector6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab0590506d6b5b59447a914a07a1bdde4</anchor>
      <arglist>(const std::string &amp;key, const Eigen::VectorXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a4b52dba70d98ca9f8fb6d0f3cb07c678</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Quaterniond &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a2f65e4dfd9a8f2b7396ed49afdb4c15c</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Matrix3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a4fdd3aa2cff1a6d0738b0e8bab39293f</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Matrix6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af8da53741027d97a38ef0432f782f8fe</anchor>
      <arglist>(const std::string &amp;key, const Eigen::MatrixXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af4e791facdf1723ee2ddfc14847abbec</anchor>
      <arglist>(const std::string &amp;key, const sva::PTransformd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aa266606c55da0e7ff81c1eb9074d39cf</anchor>
      <arglist>(const std::string &amp;key, const sva::ForceVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a3c79c749a5aaec1610c8d6eb2f826c1e</anchor>
      <arglist>(const std::string &amp;key, const sva::MotionVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab51f7febc1859fa2d27b6fb3449cac05</anchor>
      <arglist>(const std::string &amp;key, const sva::ImpedanceVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a1be30ae398db04ef0b80adb11efbf9af</anchor>
      <arglist>(const std::string &amp;key, const Configuration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a2e61fb3d7f560d5870f297f4b3b827db</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>array</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a8e8413f64735152ab9b35bcdb86f951a</anchor>
      <arglist>(const std::string &amp;key, size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_null</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a46665344d4631d7756dedaf854d7ee7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a2ab60e254c814d3226bf71d80788280a</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a270d7e0f691ca97809d3f5d98407e1d7</anchor>
      <arglist>(int8_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a5a589ab5f60fe846b5ae912c8c44eda2</anchor>
      <arglist>(uint8_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a32a5454150cad4764b2ae9bcd766df14</anchor>
      <arglist>(int16_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ae6fdcf19e27dbb961354287ad68cecbe</anchor>
      <arglist>(uint16_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a3eb04b597afaccd554d483565c7b2dfa</anchor>
      <arglist>(int32_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a6a726ec56eefc8f4d701fba866920659</anchor>
      <arglist>(uint32_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a205fc0d430f299aa0164f003b6441ad5</anchor>
      <arglist>(int64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a1c61327ca8aa6900ffab4db371b11373</anchor>
      <arglist>(uint64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af9d07a501dc465a22aa9f890e2b5e596</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af362005c9e4f3f3afc28dee4b8f6fc5e</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ae763761b200b9af74836a7d99a9fa169</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ad31146ebaf600b81a831bd27349944d1</anchor>
      <arglist>(const Eigen::Vector2d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a732d4fba7f1ceee9d8f87274bbdda8ef</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0b0bd73a5499a59adc679f65efbd2f8e</anchor>
      <arglist>(const Eigen::Vector4d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a8b5bfd34e8172f43a995a89337b94dca</anchor>
      <arglist>(const Eigen::Vector6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a44d15ea8aa8caa106ab779a868d01fb3</anchor>
      <arglist>(const Eigen::VectorXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a19788844d047cab2e17e7f45eba2986f</anchor>
      <arglist>(const Eigen::Quaterniond &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a1ff5a33ab312654b770b841ce3b23d1f</anchor>
      <arglist>(const Eigen::Matrix3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab186d30e230cbd2b725de1f28ed7b12b</anchor>
      <arglist>(const Eigen::Matrix6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ad77127e883930d52b5082776afe437ea</anchor>
      <arglist>(const Eigen::MatrixXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ac6789b021e72956e2e29d4f80e6f1b61</anchor>
      <arglist>(const sva::PTransformd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a4edd42944a80b5fcaf83fedbdbd1d18f</anchor>
      <arglist>(const sva::ForceVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>abf5e743e0ca14bb22bed349263a3f4b5</anchor>
      <arglist>(const sva::MotionVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a8eee7082f32508db0d5683f957d4a396</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0ce151a46f81cc17810166a4730794d4</anchor>
      <arglist>(const Configuration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>array</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a8f1241b1ee27c4c61304c50eeb03fd82</anchor>
      <arglist>(size_t reserve=0)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>object</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a7f8499a98a31debf5c49366bdb56a84d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a5c9ff27b8d536d10c2b7a8c3cb668d29</anchor>
      <arglist>(const T &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a3a7be6c1fef0edd187f6abe6e2dcb5fe</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a26b92d3f9bebfeac92ea681f503cf815</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; T, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0e109854f5fa1ebf445fa25f90c22872</anchor>
      <arglist>(const std::string &amp;key, const std::array&lt; T, N &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>af86216ade31bbb09752140b1671127c0</anchor>
      <arglist>(const std::string &amp;key, const std::pair&lt; T1, T2 &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a337880690cd85f2717649b1cf2ff904a</anchor>
      <arglist>(const std::string &amp;key, const std::map&lt; std::string, T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ac6316f0f31330566f57ec87e91f5890f</anchor>
      <arglist>(const std::string &amp;key, const std::set&lt; T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ae73a0ee95aa1ea44a146d0befaa25539</anchor>
      <arglist>(const std::string &amp;key, const std::unordered_set&lt; T, H, E, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a9793616ca54c66ed2c7767540209ff04</anchor>
      <arglist>(const std::string &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a9644c99468a58791ee42c867ae5d5961</anchor>
      <arglist>(const std::string &amp;key, const T &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aa8131a69b609aa32a7cf621c49c3a65b</anchor>
      <arglist>(const std::vector&lt; T, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a79565aba9bcbefa4901278ea9345715d</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a638b0308597ed9c9aa09afe70f803cab</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>abc47821ac71ced9b55f3b76286d4b942</anchor>
      <arglist>(const std::map&lt; std::string, T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab8cc8b0acc61a5bcf4befd1752691e97</anchor>
      <arglist>(const std::set&lt; T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a2c8ff7ed5c88e2027d384ec046bbdb42</anchor>
      <arglist>(const std::unordered_set&lt; T, H, E, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aeee0a378708fce3e3330972f04812801</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>keys</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a6c2ced6def7b01c3f4dbbac73a82afbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationArrayIterator</type>
      <name>begin</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ae9a11fd79001b161cac33cd8e6e08935</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationArrayIterator</type>
      <name>end</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a516be2ebaed86b5b458575a595d1104a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void MC_RTC_UTILS_DLLAPI</type>
      <name>operator()</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a1f7d3126e3673517391e2e797577d888</anchor>
      <arglist>(const std::string &amp;key, std::string &amp;v) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>rootArray</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ab71ccf94edbc00fd72a4f8b2513d78e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromData</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>ad3ad60b6c971c4932632eb9f616ea2e1</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromData</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>aed2f387badb9d350e03140894fea693b</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromYAMLData</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a284313d57598532957a94f5904f3132c</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromYAMLData</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a0b948a9b83ed36579d17767f266cd5f2</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1Configuration.html</anchorfile>
      <anchor>a892e074a206f0117fb8e65e7482bda13</anchor>
      <arglist>(const char *data, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationArrayIterator</name>
    <filename>structmc__rtc_1_1ConfigurationArrayIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ConfigurationArrayIterator</name>
      <anchorfile>structmc__rtc_1_1ConfigurationArrayIterator.html</anchorfile>
      <anchor>a0a701ce8020231cfab82a35bc49a4ba6</anchor>
      <arglist>(const Configuration &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmc__rtc_1_1ConfigurationArrayIterator.html</anchorfile>
      <anchor>a0ab342728fa49052e5c69a10c6988d86</anchor>
      <arglist>(const ConfigurationArrayIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationArrayIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structmc__rtc_1_1ConfigurationArrayIterator.html</anchorfile>
      <anchor>a0ef6f1e296111a90e6341b22f3c307a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>operator*</name>
      <anchorfile>structmc__rtc_1_1ConfigurationArrayIterator.html</anchorfile>
      <anchor>a0b8813d6778dd6b8a25c658917a4216f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Configuration</type>
      <name>operator*</name>
      <anchorfile>structmc__rtc_1_1ConfigurationArrayIterator.html</anchorfile>
      <anchor>a5beff7f5439023c5c17f8a0008413c49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>i</name>
      <anchorfile>structmc__rtc_1_1ConfigurationArrayIterator.html</anchorfile>
      <anchor>a2d7d4ae76ac0313499089302504022cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Configuration</type>
      <name>conf</name>
      <anchorfile>structmc__rtc_1_1ConfigurationArrayIterator.html</anchorfile>
      <anchor>a27c3d2c9bb03ebd34bc1055b134da339</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationFile</name>
    <filename>structmc__rtc_1_1ConfigurationFile.html</filename>
    <base>mc_rtc::Configuration</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationFile</name>
      <anchorfile>structmc__rtc_1_1ConfigurationFile.html</anchorfile>
      <anchor>a0b946bd23086a372ba34e451f3a873f6</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reload</name>
      <anchorfile>structmc__rtc_1_1ConfigurationFile.html</anchorfile>
      <anchor>a027caf22014bccdc7f2aeaa24b497076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationFile.html</anchorfile>
      <anchor>ab9f446d0840427276a387da69e79bad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>path</name>
      <anchorfile>structmc__rtc_1_1ConfigurationFile.html</anchorfile>
      <anchor>a6a71afd9f666acaf1f3407ce9c534a31</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader</name>
    <filename>structmc__rtc_1_1ConfigurationLoader.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader.html</anchorfile>
      <anchor>a3e8685e2cdb83f2ec06ab4e231a653ae</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader.html</anchorfile>
      <anchor>ac516ceb726f94bd4e5a32ad25f1178c2</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_control::Contact &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__control_1_1Contact_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_control::Contact</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__control_1_1Contact_01_4.html</anchorfile>
      <anchor>a015adc4f06a07c0ec0558ae0b8da4a6d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::CompoundJointConstraintDescription &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1CompoundJointConstraintDescription_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::CompoundJointConstraintDescription</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1CompoundJointConstraintDescription_01_4.html</anchorfile>
      <anchor>ae134fc4eeb684a9fe90b8bea94f74b84</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1CompoundJointConstraintDescription_01_4.html</anchorfile>
      <anchor>a24281b69d10bef2a02ccc3f57f5c1508</anchor>
      <arglist>(const mc_rbdyn::CompoundJointConstraintDescription &amp;desc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::Contact &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1Contact_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::Contact</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1Contact_01_4.html</anchorfile>
      <anchor>a1693666583895fbbd09a39081383914e</anchor>
      <arglist>(const mc_rtc::Configuration &amp;, const mc_rbdyn::Robots &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1Contact_01_4.html</anchorfile>
      <anchor>a5bd43b00507933f99b76646f50ed0fde</anchor>
      <arglist>(const mc_rbdyn::Contact &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration_01_4.html</anchorfile>
      <anchor>a47ca04aa50776a344b51fbb83af2bfc2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration_01_4.html</anchorfile>
      <anchor>ae3782ece92a4f2f1cd0bf725f09fc169</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration &amp;bias)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration_01_4.html</anchorfile>
      <anchor>a58e66c802f4a6d18222c252a7d6ff27f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration_01_4.html</anchorfile>
      <anchor>a6b937f1c608a5571964397c56f70dbba</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration &amp;extWrench)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::FDQPWeights &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::FDQPWeights</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights_01_4.html</anchorfile>
      <anchor>af6bc9c479eb0cbd067ea314e165fe451</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights_01_4.html</anchorfile>
      <anchor>af9445788bc08d4b66c5a82c8fc4e35df</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::FDQPWeights &amp;weights)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::SafetyThresholds &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::SafetyThresholds</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds_01_4.html</anchorfile>
      <anchor>a341244a92e7a9b04bed56f1ea805b35b</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds_01_4.html</anchorfile>
      <anchor>a65bea552d62e54b9dc7ab077e62f9a0d</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::SafetyThresholds &amp;safety)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration_01_4.html</anchorfile>
      <anchor>a6f8a65b949b2129b60545644f984db59</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration_01_4.html</anchorfile>
      <anchor>a4e91cd76b79b671e4049c8444cf1e3f4</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &amp;stabiConf)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration_01_4.html</anchorfile>
      <anchor>a424041a72a1aab6e27b6b8c9115041bb</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration_01_4.html</anchorfile>
      <anchor>a9dc93d8923aa1b6251a7c61acf5332c7</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &amp;zmpcc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModule &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1RobotModule_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::RobotModule</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1RobotModule_01_4.html</anchorfile>
      <anchor>ab398e7053d2dd2b218a40ee608a8657c</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1RobotModule_01_4.html</anchorfile>
      <anchor>ae55ea4ba484aaf84aa2fbf822084281c</anchor>
      <arglist>(const mc_rbdyn::RobotModule &amp;, bool save_mbc=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModulePtr &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1RobotModulePtr_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::RobotModulePtr</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1RobotModulePtr_01_4.html</anchorfile>
      <anchor>a27d2d736e80c235652f7576f9bd95e2a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rbdyn_1_1RobotModulePtr_01_4.html</anchorfile>
      <anchor>a6081d5cb189f9b7439d8eced06fce954</anchor>
      <arglist>(const mc_rbdyn::RobotModulePtr &amp;, bool save_mbc=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::ArrowConfig &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1ArrowConfig_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::gui::ArrowConfig</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1ArrowConfig_01_4.html</anchorfile>
      <anchor>a574c0d2eea62d0b6b25dece363644269</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1ArrowConfig_01_4.html</anchorfile>
      <anchor>a63f96047aa4b289f119832da642b1ed1</anchor>
      <arglist>(const mc_rtc::gui::ArrowConfig &amp;arrow)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::Color &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1Color_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::gui::Color</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1Color_01_4.html</anchorfile>
      <anchor>a40079799ff15e99c4ac6cd1d08a0da26</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1Color_01_4.html</anchorfile>
      <anchor>a755ff1c842690f3bc9271aa848d12217</anchor>
      <arglist>(const mc_rtc::gui::Color &amp;color)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::ForceConfig &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1ForceConfig_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::gui::ForceConfig</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1ForceConfig_01_4.html</anchorfile>
      <anchor>a6b0037fff03fea12d4af58a981106d43</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1ForceConfig_01_4.html</anchorfile>
      <anchor>a74e01f5be59856ceb601a953b65cb5bd</anchor>
      <arglist>(const mc_rtc::gui::ForceConfig &amp;force)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::LineConfig &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1LineConfig_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::gui::LineConfig</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1LineConfig_01_4.html</anchorfile>
      <anchor>af3e94b1809d944da84603540e5d8e587</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1LineConfig_01_4.html</anchorfile>
      <anchor>a3573736c28a6c915f613ad94730b9371</anchor>
      <arglist>(const mc_rtc::gui::LineConfig &amp;line)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::PointConfig &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1PointConfig_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::gui::PointConfig</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1PointConfig_01_4.html</anchorfile>
      <anchor>a68a8a076dbd6c8313d40e7d9dcdce8f2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1PointConfig_01_4.html</anchorfile>
      <anchor>a6b4642eb20b0edf5fecba11ffb927a93</anchor>
      <arglist>(const mc_rtc::gui::PointConfig &amp;point)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::PolyhedronConfig &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1PolyhedronConfig_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::gui::PolyhedronConfig</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1PolyhedronConfig_01_4.html</anchorfile>
      <anchor>a9d4cc906347cfaacc7624d3d0ef7a911</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__rtc_1_1gui_1_1PolyhedronConfig_01_4.html</anchorfile>
      <anchor>acb8b8e0e480d0ac10cbc5b89044ba9f5</anchor>
      <arglist>(const mc_rtc::gui::PolyhedronConfig &amp;polyhedron)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_tasks::force::ImpedanceGains &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__tasks_1_1force_1_1ImpedanceGains_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_tasks::force::ImpedanceGains</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__tasks_1_1force_1_1ImpedanceGains_01_4.html</anchorfile>
      <anchor>a27cd3f0ff60cc5268b144f132b9c9413</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__tasks_1_1force_1_1ImpedanceGains_01_4.html</anchorfile>
      <anchor>a97c67e1306c98af4fc45bc85c2a80b7d</anchor>
      <arglist>(const mc_tasks::force::ImpedanceGains &amp;ig)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_tasks::lipm_stabilizer::ContactState &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01mc__tasks_1_1lipm__stabilizer_1_1ContactState_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static mc_tasks::lipm_stabilizer::ContactState</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__tasks_1_1lipm__stabilizer_1_1ContactState_01_4.html</anchorfile>
      <anchor>a1528be809a0f45f51c25a46722a101bb</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01mc__tasks_1_1lipm__stabilizer_1_1ContactState_01_4.html</anchorfile>
      <anchor>a569fbb0c9f4777d08b28cad40479fb7f</anchor>
      <arglist>(const mc_tasks::lipm_stabilizer::ContactState &amp;contact)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; void &gt;</name>
    <filename>structmc__rtc_1_1ConfigurationLoader_3_01void_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01void_01_4.html</anchorfile>
      <anchor>a8b405815d2c463e01efa6394cca1dc54</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save</name>
      <anchorfile>structmc__rtc_1_1ConfigurationLoader_3_01void_01_4.html</anchorfile>
      <anchor>a6d4adb3f20c993a424538d38241da5de</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::Constraint</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <templarg>ConstraintT</templarg>
    <templarg>UpdateT</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, UpdateT &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, utils::UpdateForce &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>mc_solver::utils::UpdateForce</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, utils::UpdateLambda &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, utils::UpdateRobot &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>mc_solver::utils::Update</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, UpdateT &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, utils::UpdateForce &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>mc_solver::utils::UpdateForce</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, utils::UpdateLambda &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, utils::UpdateRobot &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>mc_solver::utils::Update</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, UpdateT &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, utils::UpdateForce &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>mc_solver::utils::UpdateForce</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, utils::UpdateLambda &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, utils::UpdateRobot &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Constraint.html</filename>
    <base>mc_solver::utils::Update</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Constraint.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::ConstraintSet</name>
    <filename>structmc__solver_1_1ConstraintSet.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstraintSet</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>a3aa0c213151164988d93d883ed53df8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>a58761b08e77d74f6d24dbb5fe538dbba</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>a4e6245316fcaebb545166a021c8d9158</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintSet</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>ad979bb11e0faeba2c10d36d5a4c46e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inSolver</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>a6e164a1efbfdb75c84edeb725b34ba59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>QPSolver::Backend</type>
      <name>backend</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>a4f3a5b79af846b7b1f1d95f2d6569208</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>a5f94c3979ed1c1f437a611be1e4b1ea0</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>a458f00ac8d8935759c92dfa8fd2a2243</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QPSolver::Backend</type>
      <name>backend_</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>aec90699d0bd3179f9258ff09fcf5cca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>structmc__solver_1_1ConstraintSet.html</anchorfile>
      <anchor>afa2c09323d080bd537cd08b97399e25f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::ConstraintSetLoader</name>
    <filename>structmc__solver_1_1ConstraintSetLoader.html</filename>
    <base>GenericLoader&lt; ConstraintSetLoader, ConstraintSet &gt;</base>
    <member kind="function" static="yes">
      <type>static storage_t &amp;</type>
      <name>storage</name>
      <anchorfile>structmc__solver_1_1ConstraintSetLoader.html</anchorfile>
      <anchor>a96dbeec49975b75e093f8074822fc5dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::Contact</name>
    <filename>structmc__control_1_1Contact.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>Contact</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>a283065dd4842ba24809e230b6ea3559d</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2, const std::string &amp;r1Surface, const std::string &amp;r2Surface, double friction=mc_rbdyn::Contact::defaultFriction, const Eigen::Vector6d &amp;dof=Eigen::Vector6d::Ones())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>aff7d5f60b948de7e6b1327b4544b4a5b</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>adf4fb97372fa11af1a759a1d0b237b9b</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>a55602d7741637a009f1feea7e61965bf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Contact</type>
      <name>from_mc_rbdyn</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>a20a4e24c55a082ea7447f5fee0e68909</anchor>
      <arglist>(const MCController &amp;, const mc_rbdyn::Contact &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>a01542c772433ddc699d2284e62c64d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>a64280f798573e84d972b579f58e74160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1Surface</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>aa9df2c031fd0ae28d6a4036008b83296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2Surface</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>a52ff892b5567c32098304acd96a91af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>friction</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>ab80b4324544da978d26ea2108195b549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector6d</type>
      <name>dof</name>
      <anchorfile>structmc__control_1_1Contact.html</anchorfile>
      <anchor>a9aebb4a6b7be2fecc5d3d745ffb239f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Contact</name>
    <filename>structmc__rbdyn_1_1Contact.html</filename>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a569ffb048042c0924db72685d3850d2a</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const std::string &amp;robotSurface, const std::string &amp;envSurface, double friction=defaultFriction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a711291c387e7b26909dc6de01cb6f94d</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const std::string &amp;robotSurface, const std::string &amp;envSurface, const sva::PTransformd &amp;X_es_rs, double friction=defaultFriction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>aa64e9ae1b141768ff36beab5ababfe62</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, const std::string &amp;r1Surface, const std::string &amp;r2Surface, double friction=defaultFriction, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a7bf365419cb070e0346b19deb39ef967</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, const std::string &amp;r1Surface, const std::string &amp;r2Surface, const sva::PTransformd &amp;X_r2s_r1s, double friction=defaultFriction, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a1e88a7e40daa8d2b1b1eb703681eec3c</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, const std::string &amp;r1Surface, const std::string &amp;r2Surface, const sva::PTransformd &amp;X_r2s_r1s, const sva::PTransformd &amp;X_b_s, double friction=defaultFriction, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ae5f2d788136b035561a499f6502701ae</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>Contact &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a5b1021e931c554bd7aea2f6e3823a814</anchor>
      <arglist>(const Contact &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Contact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a2df9d85e287ed6d7f871d37b9d5dce95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>r1Index</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>aa48be551836f7c285dd373d2a0ce87cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>r2Index</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a458502283c5a3f83ffc9cb851974dcdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;</type>
      <name>r1Surface</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a308db2b2a5f434046db936ecae5acea6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;</type>
      <name>r2Surface</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ab474bb24fbec7cda11deb827257970d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r2s_r1s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a9deb8f52a9ea07b222b22102326589a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r2s_r1s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a24d2d5e3381e4e863bea3c3d5f66b9c5</anchor>
      <arglist>(const sva::PTransformd &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a840fb862241dd9ea8586c54733f9c2b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>ambiguityId</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a7f0e946a6448c600a2d4e8758a76e8f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFixed</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a7cc9fdeb70bb0ce49c00d052513430b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>friction</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a54b141ffefe0b35cfed175e92d5220ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>friction</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ae7a6d2761bed3b5ddc4f2f61f72000bc</anchor>
      <arglist>(double friction)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>surfaces</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ac48329027fe1bacf94046d859ff4d282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r1s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a264707e8a87bb9a265583e14c16dcd28</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r1s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>afaf2d04a5bc477ee65742160ab6efa6e</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r2s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a812161a2be97be624b190b4680dc21cb</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r2s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a6be23bfafec507c064b00431499030ac</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>r1Points</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ae816bfa2342aba72c0ab795683be3fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>r2Points</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ae54975018f368092660612bb3d8e1d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>compute_X_r2s_r1s</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ad0cb15ec589cb49c17ee23c38726a7dd</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>tasks::qp::ContactId</type>
      <name>contactId</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>ab3ebb29e5dc9a18a176fd4cc73bdb1c7</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::QPContactPtr</type>
      <name>taskContact</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a3bf02462e834e4f4c41e660a35cbb219</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::QPContactPtrWPoints</type>
      <name>taskContactWPoints</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a25167da185caf3c0766bf3d38662eaff</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const sva::PTransformd *X_es_rs=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toStr</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a588405ba6ef27ddbd5155f9923eb6ed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Contact</type>
      <name>swap</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a5bc25b8c72afd9a645b3de1f2cd05fcb</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>dof</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a0b96511b7c48d57215b888b1e6d24d50</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dof</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a061feb41f009a96d124833706c144af0</anchor>
      <arglist>(const Eigen::Vector6d &amp;dof) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>aaea8d15b3e88d845a98fc010459e69b1</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a3f7473e932a2666eadab5e23136aa7e0</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::Contact</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a6929934e5fbe74f4fb6afe1949a26100</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; mc_rbdyn::Contact &gt;</type>
      <name>loadVector</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a37b8d4f38c38cfac2a4517207d4d6763</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>nrConeGen</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>aac270db0e23b02eb4906922862bf8086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultFriction</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a84813e75f0a4d9e421fb4a65fd7d96c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>nrBilatPoints</name>
      <anchorfile>structmc__rbdyn_1_1Contact.html</anchorfile>
      <anchor>a09ed33807af99b34743159c7ab72cb41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::internal::Contact</name>
    <filename>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>Contact</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>ab56fecf3381766d1faa3ebc2754a9de8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a65934b1c7c1f5ba59139c2b2d4351971</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::string &amp;surfaceName, double friction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a326db6cb41cb9ee4d824d52a8ddbe0e1</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::string &amp;surfaceName, const sva::PTransformd &amp;surfacePose, double friction)</arglist>
    </member>
    <member kind="function">
      <type>HrepXd</type>
      <name>hrep</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a8f5506ed9550e264f73e26e6178b30e0</anchor>
      <arglist>(const Eigen::Vector3d &amp;vertical) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; double, 16, 6 &gt; &amp;</type>
      <name>wrenchFaceMatrix</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>aced5d5b44832c71dcdde1ebfe46f7c32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sagittal</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a335b37445d20098b896931675aaedc34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>lateral</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a1a221647a888696d4d1837961e1b7a6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a5f40394e257213822ca9b73a581b2c10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>ab1b330e62ef0cb3d0d1b4db0a8e886fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfWidth</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>ad9eaefdf3407007a4c8f3dab5220d45c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfLength</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a2778ca298df3670ee48b9c2fb269e44c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>anklePose</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a1ebec093bad160567aca2d5ea46dc679</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sagital</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>ac7880a19753e73389edd2b9ed0c120d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>lateral</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a8e213b8f4786b25e7f84eb78132a3d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>vertical</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a58a17b848f5db25d422c17d56c82f6b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>surfaceName</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a88df6c5efb4bf9e601ab5f3d82933cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>surfacePose</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a1c494354335f7d7aa16f0202b637ea98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
      <name>polygon</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a5b6cfbb78cfb49c05589e1f861355853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xmin</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a2c628b2b87c83e06392028092bd89107</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xmax</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>adee46fe7d5c7596d13f2288c92a7a0c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ymin</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a16f8c6cb34189692495e7afafb0b2ced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ymax</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1internal_1_1Contact.html</anchorfile>
      <anchor>a1ce5eeed46427c049da3050580e1456f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::ContactConstraint</name>
    <filename>structmc__solver_1_1ContactConstraint.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="enumeration">
      <type></type>
      <name>ContactType</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Acceleration</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30acbc392a30777e1fa953eea2c011ea2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velocity</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a15d06b5b0997a0a5e17eccd053c7c652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Position</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a75ced229938828d7cf205928657fd137</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Acceleration</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30acbc392a30777e1fa953eea2c011ea2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velocity</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a15d06b5b0997a0a5e17eccd053c7c652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Position</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a75ced229938828d7cf205928657fd137</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactConstraint</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>a544f184a51c137915111ec31c7f03826</anchor>
      <arglist>(double timeStep, ContactType contactType=Velocity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>accd5d499f2b4ff1bf588c04e4b520024</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>a059aae518fa197d296c9dcb9c56521a5</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>tasks::qp::ContactConstr *</type>
      <name>contactConstr</name>
      <anchorfile>structmc__solver_1_1ContactConstraint.html</anchorfile>
      <anchor>aa06cba392d88e851509f3ee9663fb248</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::ContactDescription</name>
    <filename>structmc__tasks_1_1lipm__stabilizer_1_1ContactDescription.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW ContactState</type>
      <name>first</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ContactDescription.html</anchorfile>
      <anchor>a720106ef8ea5446eee2a582d7d52eb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::Contact</type>
      <name>second</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ContactDescription.html</anchorfile>
      <anchor>a8dad298937c721041146a906fdbddb68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_tvm::ContactFunction</name>
    <filename>classmc__tvm_1_1ContactFunction.html</filename>
    <member kind="typedef">
      <type>tvm::function::abstract::Function::Output</type>
      <name>Output</name>
      <anchorfile>classmc__tvm_1_1ContactFunction.html</anchorfile>
      <anchor>a175885496e86449273e35e9a0851e765</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactFunction</name>
      <anchorfile>classmc__tvm_1_1ContactFunction.html</anchorfile>
      <anchor>a470d8bd68fa83767e5099fd372eb57a8</anchor>
      <arglist>(const mc_rbdyn::Frame &amp;f1, const mc_rbdyn::Frame &amp;f2, const Eigen::Vector6d &amp;dof=Eigen::Vector6d::Ones())</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>dof</name>
      <anchorfile>classmc__tvm_1_1ContactFunction.html</anchorfile>
      <anchor>a0079ee2b20a1e5ecea91db87b5e2a40f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dof</name>
      <anchorfile>classmc__tvm_1_1ContactFunction.html</anchorfile>
      <anchor>a6351c2a48399e48eb4d039ef4fd84187</anchor>
      <arglist>(const Eigen::Vector6d &amp;dof) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::ContactWrenchMatrixToLambdaMatrix</name>
    <filename>structmc__solver_1_1utils_1_1ContactWrenchMatrixToLambdaMatrix.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactWrenchMatrixToLambdaMatrix</name>
      <anchorfile>structmc__solver_1_1utils_1_1ContactWrenchMatrixToLambdaMatrix.html</anchorfile>
      <anchor>a023d5ba6b69792d96db4ca6e8fd20e2c</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>transform</name>
      <anchorfile>structmc__solver_1_1utils_1_1ContactWrenchMatrixToLambdaMatrix.html</anchorfile>
      <anchor>a3024b20e8f098756d24cd2082469c055</anchor>
      <arglist>(const Eigen::MatrixXd &amp;A) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>transform</name>
      <anchorfile>structmc__solver_1_1utils_1_1ContactWrenchMatrixToLambdaMatrix.html</anchorfile>
      <anchor>ae56a8607e4c339c9a345155ec613032d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::Controller</name>
    <filename>structmc__control_1_1fsm_1_1Controller.html</filename>
    <base>mc_control::MCController</base>
    <member kind="function">
      <type></type>
      <name>Controller</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>ad9b8a7ba13300659ef3846fc23f9dbb1</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr rm, double dt, const mc_rtc::Configuration &amp;config, ControllerParameters params={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Controller</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a18c01ab44c3b2b9ab7025e6999a78e43</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>af87858917b432bbd4a9c728a4e344d1e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a95a622b78163a77aa4d11d44101bc292</anchor>
      <arglist>(mc_solver::FeedbackType fType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>af8027a5c80b5f9b0d45616517299f3c3</anchor>
      <arglist>(const ControllerResetData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interrupt</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a79c045371408e4adfaa31d6f7563fef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a59903f739677ea9f89b0cc8f0cdc051d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resume</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a8aa919380e8d3cb3105b899f5f386052</anchor>
      <arglist>(const std::string &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_tasks::PostureTask &gt;</type>
      <name>getPostureTask</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>ab5db53d98290f650552bcb57a42353b5</anchor>
      <arglist>(const std::string &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::ContactConstraint &amp;</type>
      <name>contactConstraint</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>afc0ff4e1c1bec2352684291698b467dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateFactory &amp;</type>
      <name>factory</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>acf6e4968c19820c0928e459dd42d0d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::shared_ptr&lt; mc_tasks::PostureTask &gt; &gt;</type>
      <name>posture_tasks_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a07013b382ce6e4247057217fa49a7c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>saved_posture_weights_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a7d070ffb51aac7ef5d5b1b03ad215311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::shared_ptr&lt; mc_tasks::EndEffectorTask &gt; &gt;</type>
      <name>ff_tasks_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a72d332cebe24c4a81aa20ec2b911b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateFactory</type>
      <name>factory_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a157396c0762ed3195ceded0e8fcbd942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idle_keep_state_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a87e1854906c3b292131a1831529a6942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>running_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>a2f6a4cf37f59a88bfcd9e1a347921579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Executor</type>
      <name>executor_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>af043ec138ea3eaa88da2bb920de0777e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Executor</name>
      <anchorfile>structmc__control_1_1fsm_1_1Controller.html</anchorfile>
      <anchor>abde1658ded2ac75f5466b223e73135d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::ControllerClient</name>
    <filename>structmc__control_1_1ControllerClient.html</filename>
    <member kind="function">
      <type></type>
      <name>ControllerClient</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a93db9515c75af8109054c83dac3fb8ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControllerClient</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a6f07073d0c388e08b2fe2bf153220592</anchor>
      <arglist>(const std::string &amp;sub_conn_uri, const std::string &amp;push_conn_uri, double timeout=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControllerClient</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a68b7d122aee852f407797ed75393e028</anchor>
      <arglist>(ControllerServer &amp;server, mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControllerClient</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a2cd360c85e2aa389a1935cb4888e3eaa</anchor>
      <arglist>(const ControllerClient &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ControllerClient &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a074db2a5771b6afe795da5d04967254c</anchor>
      <arglist>(const ControllerClient &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ControllerClient</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a560565455af1e13bdfb19d01b3945b51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a96e383ea996172f0da14360dc55432be</anchor>
      <arglist>(const std::string &amp;sub_conn_uri, const std::string &amp;push_conn_uri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>af04c2016424462fb277795ac1078073f</anchor>
      <arglist>(ControllerServer &amp;server, mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ade72000ce29ac5d99b1420ebdaa778e4</anchor>
      <arglist>(const ElementId &amp;id, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a3ecf129fcdb4a209f2e952f2fb5b40ba</anchor>
      <arglist>(const ElementId &amp;id, const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>aae5889005ac498f95d2517bafbecff0e</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>raw_request</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae9277b82054ae7ec23310d52f5393fc9</anchor>
      <arglist>(const ElementId &amp;id, const mc_rtc::Configuration &amp;data, std::string &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>raw_request</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a55c0ef4b41b4ba4dc57759c387335d60</anchor>
      <arglist>(const ElementId &amp;id, const T &amp;data, std::string &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>raw_request</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ad71e478b911f2bb391ab06af04c4411f</anchor>
      <arglist>(const ElementId &amp;id, std::string &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>acfbf74c5219464896a5645a8a9c71418</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeout</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>abd6834ef752be33759988b9b204fccc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a8079e120ef304ca447b0f36c42598364</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer, std::chrono::system_clock::time_point &amp;t_last_received)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>acf4cab847f34bf43e9666bc2c0bd1a85</anchor>
      <arglist>(const char *buffer, size_t bufferSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a813107a59769a9f711468e4e9111a0ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reconnect</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>abdbe8eadba9fe6727e1e546f5ade5b72</anchor>
      <arglist>(const std::string &amp;sub_conn_uri, const std::string &amp;push_conn_uri)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stop</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ad1e94bd058041de68feb4a88606c7331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handle_gui_state</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a07e30567d1215c01296475921c86bea4</anchor>
      <arglist>(mc_rtc::Configuration state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handle_category</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a28e0acd47648df1d519b666153a91d6f</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;parent, const std::string &amp;category, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handle_widget</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a11c2557bb1e901704673e8f183b7d836</anchor>
      <arglist>(const ElementId &amp;id, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>started</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a5a8c9fb90474687ba5ec42ae0dc5e4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stopped</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a54a149a6c1469d1450f5ed6603579cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>category</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ac3abb32d07e376cfcd13159a972d377f</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;parent, const std::string &amp;category)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>label</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a9665c7fab4bf12b87bc772c8e48b6276</anchor>
      <arglist>(const ElementId &amp;id, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>array_label</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a327ade0fbd27527c4d83f885fc744ef4</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const Eigen::VectorXd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>button</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ac6d9b4568ab2dfeebbb5e19c78306326</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkbox</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a3ebc35a5a17725ef5bfed9968b83f106</anchor>
      <arglist>(const ElementId &amp;id, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>string_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a3a8f08dc27a724236d70fb3de14254a2</anchor>
      <arglist>(const ElementId &amp;id, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>integer_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a8143ce2b279040226ec45c089f87503b</anchor>
      <arglist>(const ElementId &amp;id, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>number_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a58745bfe86ed5c1a3cfdbc96592db6f2</anchor>
      <arglist>(const ElementId &amp;id, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>number_slider</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ad4561530dd4b6a383c89aeca8bf858e7</anchor>
      <arglist>(const ElementId &amp;id, double, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>array_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a8c364a5ff385ecef3e8e7ffd55eb37e7</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const Eigen::VectorXd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>combo_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a6ba87fb7ef3a74ae9a27a0f30e6840a6</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>data_combo_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a28e94c8580fc611677912166d5f8bdaa</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>point3d</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a97764f539b0c5aa4a668304a2d86f83c</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const Eigen::Vector3d &amp;, const mc_rtc::gui::PointConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae3ab0954180e484c37db80654c2b1d5c</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; Eigen::Vector3d &gt; &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a69e95ea4eb46b0a82b6c28bb966a6be1</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; sva::PTransformd &gt; &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ad809e856748eb8b70110bf2e2ffb3e6a</anchor>
      <arglist>(const ElementId &amp;id, const Eigen::Vector3d &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a0f4d3238fdc79a6dabd460ce6fbdb217</anchor>
      <arglist>(const ElementId &amp;id, const sva::PTransformd &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>polygon</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a9b237bbf2c2441f2d80e9c2b825dcb1b</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::vector&lt; Eigen::Vector3d &gt;&gt; &amp;, const mc_rtc::gui::Color &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>polygon</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a6a40d8da80eede227857901c00cc0e18</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::vector&lt; Eigen::Vector3d &gt;&gt; &amp;points, const mc_rtc::gui::LineConfig &amp;config)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>polyhedron</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a036a286690518e0f2f4a3832d1da3111</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::array&lt; Eigen::Vector3d, 3 &gt;&gt; &amp;triangles, const std::vector&lt; std::array&lt; mc_rtc::gui::Color, 3 &gt;&gt; &amp;colors, const mc_rtc::gui::PolyhedronConfig &amp;config)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>polyhedron</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a6130bd76e1329ed69ca4b48a4cb067f2</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; Eigen::Vector3d &gt; &amp;vertices, const std::vector&lt; std::array&lt; size_t, 3 &gt;&gt; &amp;triangles, const std::vector&lt; mc_rtc::gui::Color &gt; &amp;colors, const mc_rtc::gui::PolyhedronConfig &amp;config)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>force</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a6ffb3069d9cae0537836e2aa88de1929</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, const sva::ForceVecd &amp;, const sva::PTransformd &amp;, const mc_rtc::gui::ForceConfig &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>arrow</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a092462de7c07034906cc44ad38f112af</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, const Eigen::Vector3d &amp;, const Eigen::Vector3d &amp;, const mc_rtc::gui::ArrowConfig &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rotation</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a323427c958144adfc5a1593775566f36</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const sva::PTransformd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae0c7c17c332c1d82f8dae1db99d587bb</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const sva::PTransformd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>xytheta</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a16b34b76a04260ab27ba965dbd6af346</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const Eigen::Vector3d &amp;, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>table_start</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a2942069197dd8f7e2c4b3305d3aa844e</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>table_row</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a2459a51b8ba13c7aec975061a9a3a8cf</anchor>
      <arglist>(const ElementId &amp;, const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>table_end</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>af45508fdb55f9b0fb191121c36b10a7d</anchor>
      <arglist>(const ElementId &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae3efbe9ac079a07e540872820bf951f9</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;, const sva::PTransformd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>visual</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a2b43612261dde372c8f9f7d78a3b747e</anchor>
      <arglist>(const ElementId &amp;id, [[maybe_unused]] const rbd::parsers::Visual &amp;visual, [[maybe_unused]] const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>schema</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ad39ed0c2af0c45bc2a1f7f931e0ed360</anchor>
      <arglist>(const ElementId &amp;id, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a58439f0f063f69e3fce020002e56e93c</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_checkbox</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae3244e80dcf44ec423924b09a6b39095</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_checkbox</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a451e2eedd8665e2455ec6098349c5c88</anchor>
      <arglist>(const ElementId &amp;formId, const std::string &amp;name, bool required, bool default_, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_integer_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>aa9a4c2dc5ad1bd01264a7f7a206273de</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_integer_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a8a7445782cb8de9f56e2f50b5c46c018</anchor>
      <arglist>(const ElementId &amp;formId, const std::string &amp;name, bool required, int default_, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_number_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae5d35906c488252e7ddd9efb814ce112</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_number_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a18931c3676c4593502ee21b61bd687d2</anchor>
      <arglist>(const ElementId &amp;formId, const std::string &amp;name, bool required, double default_, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_string_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ab0dd6c14e71101fda3c7cfaf169424d7</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_string_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>aa88d3332a97e8d78a946195308647910</anchor>
      <arglist>(const ElementId &amp;formId, const std::string &amp;name, bool required, const std::string &amp;default_, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_array_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>acfa7906e586edddddcdf3603a2904c70</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const Eigen::VectorXd &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_array_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ac4268ff16133bc178a51e5d82bf26216</anchor>
      <arglist>(const ElementId &amp;formId, const std::string &amp;name, bool required, const Eigen::VectorXd &amp;default_, bool fixed_size, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_combo_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>aaf37cf840f4ecec192fb6fdfe02ed017</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const std::vector&lt; std::string &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_combo_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>acc7dd35ed0c4a8ccdb9b375906bf4846</anchor>
      <arglist>(const ElementId &amp;formId, const std::string &amp;name, bool required, const std::vector&lt; std::string &gt; &amp;values, bool send_index, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_data_combo_input</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a10ed23f9fa2c7a960a36178b64d83ac6</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const std::vector&lt; std::string &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_plot</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a3fb1503ce946c0835a3d9514f5337f05</anchor>
      <arglist>(uint64_t, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_setup_xaxis</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae7d1fd65a91be05ac94dd3553756672d</anchor>
      <arglist>(uint64_t, const std::string &amp;, const mc_rtc::gui::plot::Range &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_setup_yaxis_left</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a46be1683943027f7ac3411d0f9e42b11</anchor>
      <arglist>(uint64_t, const std::string &amp;, const mc_rtc::gui::plot::Range &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_setup_yaxis_right</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>aaf45cba73871dd0a268e73569db3230d</anchor>
      <arglist>(uint64_t, const std::string &amp;, const mc_rtc::gui::plot::Range &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_point</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a81f6f9b3b11314b1d2d14a32b31d2c9e</anchor>
      <arglist>(uint64_t, uint64_t, const std::string &amp;, double, double, mc_rtc::gui::Color, mc_rtc::gui::plot::Style, mc_rtc::gui::plot::Side)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_polygon</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a54324c45dd27937e1964844808f7befd</anchor>
      <arglist>(uint64_t, uint64_t, const std::string &amp;, const mc_rtc::gui::plot::PolygonDescription &amp;, mc_rtc::gui::plot::Side)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_polygons</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a66ecd2aa8e9e4fa3c1215f887c04323a</anchor>
      <arglist>(uint64_t, uint64_t, const std::string &amp;, const std::vector&lt; mc_rtc::gui::plot::PolygonDescription &gt; &amp;, mc_rtc::gui::plot::Side)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_plot</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ad6a96de214fd727f64042a190fcfa281</anchor>
      <arglist>(uint64_t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>run_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>aebaab2ca01fe90e61c5902a94bbf99fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sub_socket_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>ae3cb858a8d61b53bb9acadcf0f967972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::thread</type>
      <name>sub_th_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>aae3f415ab7a4cd6bfdd69ecfb2d78833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>push_socket_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a5b263154cbd2d5fc7ccd281c86935af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeout_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a13ae5d70177dd8a762cbd416cfff0f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>data_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a881be407dfadc093f9ad1dd638922688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControllerServer *</type>
      <name>server_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a623d95e96630e3bb80d8a61349a98094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::gui::StateBuilder *</type>
      <name>gui_</name>
      <anchorfile>structmc__control_1_1ControllerClient.html</anchorfile>
      <anchor>a7d6b7149762a3b514b901889af4078c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::ControllerLoader</name>
    <filename>structmc__control_1_1ControllerLoader.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::ObjectLoader&lt; MCController &gt; &amp;</type>
      <name>loader</name>
      <anchorfile>structmc__control_1_1ControllerLoader.html</anchorfile>
      <anchor>a9249bcbb1c99d7b9f83562d7935f06dc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::ControllerParameters</name>
    <filename>structmc__control_1_1ControllerParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>ControllerParameters</name>
      <anchorfile>structmc__control_1_1ControllerParameters.html</anchorfile>
      <anchor>acdb41f66ddb42321a8da526636bdd2e3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControllerParameters</name>
      <anchorfile>structmc__control_1_1ControllerParameters.html</anchorfile>
      <anchor>ab98a91d854433fa84ecfdc44c9920394</anchor>
      <arglist>(const ControllerParameters &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControllerParameters</name>
      <anchorfile>structmc__control_1_1ControllerParameters.html</anchorfile>
      <anchor>a1a6b1614d12561ec177700e3e6883bc0</anchor>
      <arglist>(ControllerParameters &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ControllerParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__control_1_1ControllerParameters.html</anchorfile>
      <anchor>a698695b047baf6822526f345dd6f7829</anchor>
      <arglist>(const ControllerParameters &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ControllerParameters &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__control_1_1ControllerParameters.html</anchorfile>
      <anchor>aa694fab5390660de5f48552bd237b165</anchor>
      <arglist>(ControllerParameters &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControllerParameters</name>
      <anchorfile>structmc__control_1_1ControllerParameters.html</anchorfile>
      <anchor>abebad8c4bbb7dcd29027cdda80459584</anchor>
      <arglist>(mc_solver::QPSolver::Backend backend)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::ControllerResetData</name>
    <filename>structmc__control_1_1ControllerResetData.html</filename>
    <member kind="variable">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>q</name>
      <anchorfile>structmc__control_1_1ControllerResetData.html</anchorfile>
      <anchor>a2e6d446ed6dd7f705c238d69b57e9f14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::ControllerServer</name>
    <filename>structmc__control_1_1ControllerServer.html</filename>
    <member kind="function">
      <type></type>
      <name>ControllerServer</name>
      <anchorfile>structmc__control_1_1ControllerServer.html</anchorfile>
      <anchor>ac13be9e36cf38cb6bdde4cc8b4b19250</anchor>
      <arglist>(double dt, double server_dt, const std::vector&lt; std::string &gt; &amp;pub_bind_uri, const std::vector&lt; std::string &gt; &amp;pull_bind_uri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ControllerServer</name>
      <anchorfile>structmc__control_1_1ControllerServer.html</anchorfile>
      <anchor>aa4ef79cfb9afe739ee67b64b66969f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_requests</name>
      <anchorfile>structmc__control_1_1ControllerServer.html</anchorfile>
      <anchor>a734ffb48f73a37374b9b51c4c7655507</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui_builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_requests</name>
      <anchorfile>structmc__control_1_1ControllerServer.html</anchorfile>
      <anchor>aaa597dffa422f0cf699d9240b5b174f7</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const char *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publish</name>
      <anchorfile>structmc__control_1_1ControllerServer.html</anchorfile>
      <anchor>a38c2d4255f3f4db5c9315f3c7468b87f</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui_builder)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const char *, size_t &gt;</type>
      <name>data</name>
      <anchorfile>structmc__control_1_1ControllerServer.html</anchorfile>
      <anchor>a9f21b40efd63fa7a522ef961daad027f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::QPSolver::ControllerToken</name>
    <filename>structmc__solver_1_1QPSolver_1_1ControllerToken.html</filename>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_control::MCController</name>
      <anchorfile>structmc__solver_1_1QPSolver_1_1ControllerToken.html</anchorfile>
      <anchor>a298f1e3801d3796cca804019c165aba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>QPSolver</name>
      <anchorfile>structmc__solver_1_1QPSolver_1_1ControllerToken.html</anchorfile>
      <anchor>af09e33ccaddf0d3e770491e26fc2f671</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::Convex</name>
    <filename>structmc__tvm_1_1Convex.html</filename>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>structmc__tvm_1_1Convex.html</anchorfile>
      <anchor>a5f776872a6f2028c83b679bedf2d6bf0</anchor>
      <arglist>(NewConvexToken, mc_rbdyn::S_ObjectPtr object, const mc_rbdyn::RobotFrame &amp;frame, const sva::PTransformd &amp;X_f_c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>structmc__tvm_1_1Convex.html</anchorfile>
      <anchor>af8fa5698b3fccd9f59a5be106b725bd2</anchor>
      <arglist>(const Convex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Convex &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__tvm_1_1Convex.html</anchorfile>
      <anchor>af19b6a491a5b52fd63a85405ee3301d2</anchor>
      <arglist>(const Convex &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::S_ObjectPtr</type>
      <name>convex</name>
      <anchorfile>structmc__tvm_1_1Convex.html</anchorfile>
      <anchor>ad9c26269832f678f42429a3e16ab0cdd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tvm_1_1Convex.html</anchorfile>
      <anchor>afc6e57455d6c24e8ed37588d6425c586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_rbdyn::Robot</name>
      <anchorfile>structmc__tvm_1_1Convex.html</anchorfile>
      <anchor>a5bf7a6383246c9a2d0cb84b5b0e9e3f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::CoPTask</name>
    <filename>structmc__tasks_1_1force_1_1CoPTask.html</filename>
    <base>mc_tasks::force::DampingTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>CoPTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a675434671210a61d2ae96517010543ba</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoPTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>aae9653f9ecdd305a178c895cc4710d81</anchor>
      <arglist>(const std::string &amp;robotSurface, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a08e79c703fb2f70db56a7c64e27acd02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a7467766fa42546e99c0d253aac7af98d</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>measuredCoP</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>acf756c0e7e6aa1fbb60feb6491427411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>measuredCoPW</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a16f95e7ea6a037950ea6b8eb5e57b58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZeroTargetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>ae95ca91c45eb45a1946e84377ddffa8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector2d &amp;</type>
      <name>targetCoP</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a4ace3b81e36d8ac60271b68b78c4f58a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>targetCoPW</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a62f7869ba91d79176a54e1c8a8cf5aaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetCoP</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>ac56ea4b1b75de8e99ed5e51bf919c7fb</anchor>
      <arglist>(const Eigen::Vector2d &amp;targetCoP)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetForce</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>aa452d416c7f6df4f3b5ddc511db246a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetForce</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>af250603b7c162ce5dd654825dea2af7e</anchor>
      <arglist>(const Eigen::Vector3d &amp;targetForce)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetForceW</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a9f7344de19e35fda42d0dc3c493b8f11</anchor>
      <arglist>(const Eigen::Vector3d &amp;targetForceW)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>targetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a58ef8d30ea6ea9f78d7d36340975d985</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>ade36a58f912236a75c7aa33bdf3551b1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a88921c026455b21462952325fe1a0737</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1force_1_1CoPTask.html</anchorfile>
      <anchor>a29acffdd2df70a8ec753054414951586</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::CylindricalSurface</name>
    <filename>structmc__rbdyn_1_1CylindricalSurface.html</filename>
    <base>mc_rbdyn::Surface</base>
    <member kind="function">
      <type></type>
      <name>CylindricalSurface</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>ac3eef75ab4cf0a7808e37ce6bd60e171</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName, const double &amp;radius, const double &amp;width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CylindricalSurface</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>a94041ce7602917987e5829eff07f5ad4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePoints</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>a0c548d2b3f2f16066e260b9e0a89d56c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>radius</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>abd86a4d9aef83ff0a5fd7a9540d81a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>width</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>ad4b8a89811ebfc71a3793db69282626a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>width</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>ae129c776f6d6bdc8b84151121747a46f</anchor>
      <arglist>(const double &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>af7ea1fd2bee8c3d0dacbae34d5242422</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>structmc__rbdyn_1_1CylindricalSurface.html</anchorfile>
      <anchor>a221eebcca494033504b7898f95396b73</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::DampingTask</name>
    <filename>structmc__tasks_1_1force_1_1DampingTask.html</filename>
    <base>mc_tasks::force::AdmittanceTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>DampingTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1DampingTask.html</anchorfile>
      <anchor>a547cf214df56885266bf3b7bd3b96f81</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DampingTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1DampingTask.html</anchorfile>
      <anchor>a167775b75571a68700280d6a383233e9</anchor>
      <arglist>(const std::string &amp;robotSurface, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1force_1_1DampingTask.html</anchorfile>
      <anchor>aa65d048edcb0c01c8863f7da13750f8a</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::DataComboInputImpl</name>
    <filename>structmc__rtc_1_1gui_1_1DataComboInputImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>DataComboInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataComboInputImpl.html</anchorfile>
      <anchor>a571856b4ac446cb847df167cca1bb5ae</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;data_ref, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataComboInputImpl.html</anchorfile>
      <anchor>ad79979e960ca7b50f5f9b2d0cf94d90d</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataComboInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataComboInputImpl.html</anchorfile>
      <anchor>a5316b6d565ef6e59a40f112d3682ea74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataComboInputImpl.html</anchorfile>
      <anchor>a439d4fefa96b4619041a43f8b2109255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataComboInputImpl.html</anchorfile>
      <anchor>a066cabfbd0d24dcb5981be55147377a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::DataElement</name>
    <filename>structmc__rtc_1_1gui_1_1DataElement.html</filename>
    <templarg></templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataElement.html</anchorfile>
      <anchor>a9f5405a5613389910551ed9e86e35b9b</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataElement.html</anchorfile>
      <anchor>a65d486d790fd684f1fdd422a36a4b662</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataElement.html</anchorfile>
      <anchor>a16c128617f3f6e4bc2257f811721e92d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataElement.html</anchorfile>
      <anchor>af0401db3e91435848055af583ec602f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetT</type>
      <name>get_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1DataElement.html</anchorfile>
      <anchor>a8a959ac2e5e7551b29b81b77034ea255</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::DataStore</name>
    <filename>structmc__rtc_1_1DataStore.html</filename>
    <member kind="function">
      <type></type>
      <name>DataStore</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a278c3edc06f9833dce8bde478bfc543c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataStore</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a51d68205f21783cddb1c6c64610ae1b1</anchor>
      <arglist>(const DataStore &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>DataStore &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a0add9317df9a0f9617a17b935f9032dd</anchor>
      <arglist>(const DataStore &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataStore</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>aa744afa8f6adbd65e50e659d123c48e2</anchor>
      <arglist>(DataStore &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>DataStore &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a94325df0f7486855ea330997a0bba562</anchor>
      <arglist>(DataStore &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a52db79536403a647d28a8d563558a21d</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>keys</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a5f54686319b4449e32312d585dcd4190</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>get</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>af3fe621267da647c0691c444571b555a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a7a8ea0e8bcf03d8bf3e8526613649449</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a75f4f16b910f82c1d574bddc045f0e0f</anchor>
      <arglist>(const std::string &amp;name, T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a84af319d5fbe601a45916587a650cbcb</anchor>
      <arglist>(const std::string &amp;name, const T &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a66db8387d05a3f515e22ccdfe86c7b0d</anchor>
      <arglist>(const std::string &amp;name, const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>make</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a96e901b0b2a651aec1c6ffda2948a422</anchor>
      <arglist>(const std::string &amp;name, Args &amp;&amp;... args)</arglist>
      <docanchor file="structmc__rtc_1_1DataStore">make</docanchor>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_call</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>acad8593d08b3abccddafadb6fe588645</anchor>
      <arglist>(const std::string &amp;name, T fn) -&gt; typename internal::lambda_traits&lt; T &gt;::fn_t &amp;</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>make_initializer</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>ac02a9ef47c3c352094d032f0fc487a81</anchor>
      <arglist>(const std::string &amp;name, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>RetT</type>
      <name>call</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a82a98fff5bbd7050f611f7168b24c1eb</anchor>
      <arglist>(const std::string &amp;name, ArgsT &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>RetT</type>
      <name>call</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>aa8ecee836cc65a28b11f9b83da651e6e</anchor>
      <arglist>(const std::string &amp;name, ArgsT &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a53bfdc28c92e28fc6916a0bcc37ac921</anchor>
      <arglist>(const std::string &amp;name) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>a857f48478ac0771abf73f89fe2ec8ab0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>affcbae987f83f0423b73f9614248579f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>structmc__rtc_1_1DataStore.html</anchorfile>
      <anchor>ac1488cc8209d23ae6b0581d895e79c3d</anchor>
      <arglist>(const std::string &amp;name) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration</name>
    <filename>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</filename>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>a10955f1ae31122a5b54cfe04a51a3613</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>a949d57cc11d53d999682457a22896c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW double</type>
      <name>dcmMeasureErrorStd</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>abbfe11529cd8bed15f419ef28f84c05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zmpMeasureErrorStd</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>ad377affc6265727ec1d5939522ff053a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>biasDriftPerSecondStd</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>ab704ebb1e1630afd326b0643c2ebeecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>biasLimit</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>a35f46c04420cf9d3936ebeb71a2ad0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>comBiasLimit</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>ac67cc4752eab92b73ae51747966b7e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>withDCMBias</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>a7b344157591037726e435994165d846c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>withDCMFilter</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>a41a4ad61ac746f632ece2ef93aa59b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>correctCoMPos</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>a447ab7af04c97c1b2ee54db7ec0b3835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>correctDCM</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1DCMBiasEstimatorConfiguration.html</anchorfile>
      <anchor>a2fe120580865bc366febaa3cf7ca16db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::ParallelState::DelayedState</name>
    <filename>structmc__control_1_1fsm_1_1ParallelState_1_1DelayedState.html</filename>
    <member kind="function">
      <type></type>
      <name>DelayedState</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState_1_1DelayedState.html</anchorfile>
      <anchor>a217adbd0ad2da8c746df98646c67ffcb</anchor>
      <arglist>(Controller &amp;ctl, const std::string &amp;name, double delay, mc_rtc::Configuration config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState_1_1DelayedState.html</anchorfile>
      <anchor>a0069412544d7a76f5c724b570342918b</anchor>
      <arglist>(Controller &amp;ctl, double time)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr &amp;</type>
      <name>state</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState_1_1DelayedState.html</anchorfile>
      <anchor>a4fcc3ba3af0b760e0a62253e625ec3b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState_1_1DelayedState.html</anchorfile>
      <anchor>a73fc5ce2daf4b44468e4138e9b637df8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::MCController::DeprecatedAnchorFrame</name>
    <filename>structmc__control_1_1MCController_1_1DeprecatedAnchorFrame.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Device</name>
    <filename>structmc__rbdyn_1_1Device.html</filename>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>aac4fc1405587e64b75f2b8b7e81769d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>ab03a19828b8a5e670beb832a18e42281</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;parent, const sva::PTransformd &amp;X_p_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a10e51518c0cd7afd26b71fa6d39ae80d</anchor>
      <arglist>(const Device &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Device &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>acb0d4de20d18c168d3069f170dd568f5</anchor>
      <arglist>(const Device &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a5ef29dded30b518781405cde1b243089</anchor>
      <arglist>(Device &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Device &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a6ed916e8d88fd2032b790ab143ac7c13</anchor>
      <arglist>(Device &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Device</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a9ef17bdaf954ee5a88ea1673ef94a625</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>ac7f03a01fbf81e9e65c595e06c8db3a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>type</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a5f2b9cec0aafca49e350696f9fcc2cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>parent</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>aa4fa7c2fd9c533abc6e1bd965f128650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parent</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>aa195d74e93e262d231b44efaf6217758</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_p_d</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>af2b47d128a8964d8fe32f6c9279e816f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_p_s</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a018981488a410e62be4605726f953507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_p_d</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>aa4c6653e8ee6aed277bfbd96e1410b6a</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_p_s</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a9c69d16bdaed36b31375b419cdcddc0b</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_d</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a0f7c7a08133ec941b3cb8d12dacee6b3</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a89cf1a897146d487c4f2c9c915ff3ec5</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DevicePtr</type>
      <name>clone</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a836b2415a1379592403363bdc2dda8b0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type_</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a3b2069f13010466c01739606cd39d1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>abf31b34d57b3746dd96a745d67b5dbde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>parent_</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>aa24ec57cfee577ff0e85317ff4588c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_p_s_</name>
      <anchorfile>structmc__rbdyn_1_1Device.html</anchorfile>
      <anchor>a6a5a93f9a1e463e41da680695aca29c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::DevicePtrVector</name>
    <filename>structmc__rbdyn_1_1DevicePtrVector.html</filename>
    <member kind="function">
      <type></type>
      <name>DevicePtrVector</name>
      <anchorfile>structmc__rbdyn_1_1DevicePtrVector.html</anchorfile>
      <anchor>a39850850b50df785442c15d242d815f3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI</type>
      <name>DevicePtrVector</name>
      <anchorfile>structmc__rbdyn_1_1DevicePtrVector.html</anchorfile>
      <anchor>a5f5834c7848c1593e4dda8556731c172</anchor>
      <arglist>(const DevicePtrVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI DevicePtrVector &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1DevicePtrVector.html</anchorfile>
      <anchor>af28db08209588618e620a65c4187f34b</anchor>
      <arglist>(const DevicePtrVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DevicePtrVector</name>
      <anchorfile>structmc__rbdyn_1_1DevicePtrVector.html</anchorfile>
      <anchor>a4190aad2585fa49da5d130316a163741</anchor>
      <arglist>(DevicePtrVector &amp;&amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type>DevicePtrVector &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1DevicePtrVector.html</anchorfile>
      <anchor>a13610008605e9a409dc6b3c7efa4ec66</anchor>
      <arglist>(DevicePtrVector &amp;&amp;v)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::DynamicFunction</name>
    <filename>structmc__tvm_1_1DynamicFunction.html</filename>
    <class kind="struct">mc_tvm::DynamicFunction::ForceContact</class>
    <member kind="typedef">
      <type>tvm::function::abstract::LinearFunction::Output</type>
      <name>Output</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a16fd9e0f912dd11e88eaa9953e9828f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicFunction</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a0c848f358e36d713bd792eca75fff6f2</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>const tvm::VariableVector &amp;</type>
      <name>addContact</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a56a66ca557080e5b63d3d099626b6813</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, std::vector&lt; sva::PTransformd &gt; points, double dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeContact</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>aa7f5d8f9cd043247fb61d3f813d9de50</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>contactForce</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a72178db2fe4168c79a4081671a075ddd</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;f) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateb</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>ab4eb8bd4012f724a15c51393573914a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; ForceContact &gt;::const_iterator</type>
      <name>findContact</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a7f0e834af4ce8cc96d26552f0bc059c5</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a2b7f718f70ce7400c67f7f309850e32b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a99de28dfe142751e4b1a34605da0f499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ForceContact &gt;</type>
      <name>contacts_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction.html</anchorfile>
      <anchor>a57366a55b7b0cbc79f501569e9364ba1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::DynamicsConstraint</name>
    <filename>structmc__solver_1_1DynamicsConstraint.html</filename>
    <base>mc_solver::KinematicsConstraint</base>
    <member kind="function">
      <type></type>
      <name>DynamicsConstraint</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>a0f1097a536c65e610735d3314e86a4e3</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep, bool infTorque=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicsConstraint</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>a330391bd86278523ae70830fc2d7e9f9</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep, const std::array&lt; double, 3 &gt; &amp;damper, double velocityPercent=1.0, bool infTorque=false)</arglist>
    </member>
    <member kind="function">
      <type>tasks::qp::MotionConstr &amp;</type>
      <name>motionConstr</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>ac888a5f53afab169be85ef6609821c38</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_tvm::DynamicFunction &amp;</type>
      <name>dynamicFunction</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>aa987629d0f519973ba2b3c92468c75a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>aebe3a1c0ac228a8b688b95dfadf01cac</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>a8d3e0faeab3b3690a4a6c02c15dbc678</anchor>
      <arglist>(QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>a92463a157ffb06efd45398a8e46dddd3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::void_ptr</type>
      <name>motion_constr_</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>afb2a10971e64329c161cd0ea8af3ea4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>robotIndex_</name>
      <anchorfile>structmc__solver_1_1DynamicsConstraint.html</anchorfile>
      <anchor>abc5302b5c802be5f0610c071d74f52de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Element</name>
    <filename>structmc__rtc_1_1gui_1_1Element.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>a4f1f84cbf9bafb94cd41824712565f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>ad2e559a17ad52901a5e726ca03f300c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>id</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>a000ffd25b2fe0b3b36ad02b44cd190c3</anchor>
      <arglist>(int idIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>ab8e71ecce7dab695777a1a11faf119f7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>a00f7fa6be59c8cc61304d35e7dd2a914</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>a086e5b72ef29fb83ebba494135f0f579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>adb2f99cc312bfc645254b2cecd9f9c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Element</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>a6fcb5cd1168ebfd6b9dc8830df21956f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>a7b365cbe4764d76aafa03495be0ecd5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Element.html</anchorfile>
      <anchor>a208ba439700a31e9ff94abc76a466472</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::ElementId</name>
    <filename>structmc__control_1_1ElementId.html</filename>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a17c9c3f1700bd2f02814ca219844c934</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a84ad794dcfc845476f05d2cb1c283351</anchor>
      <arglist>(const ElementId &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a566ba8033fa8a7f50b016947ac5002d3</anchor>
      <arglist>(ElementId &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ElementId &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a781c1eac4041ede096f3fae9b0c775b2</anchor>
      <arglist>(const ElementId &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ElementId &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a24f027cf01658b8e6c701bab7d33f728</anchor>
      <arglist>(ElementId &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a232678c79a8f6faa8923330bd50ec053</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name, int sid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a200df31dd4025e687962b95ec3f7810d</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>category</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a72f672dd6379b02c13838974b2b04f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>afa0ea7e8ec08b383d992e9a8b408a879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sid</name>
      <anchorfile>structmc__control_1_1ElementId.html</anchorfile>
      <anchor>a5753e9c679e8109c6bce7c9a02dd5c37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::EnableControllerState</name>
    <filename>structmc__control_1_1fsm_1_1EnableControllerState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1EnableControllerState.html</anchorfile>
      <anchor>a168fa14ff5cbccc49aaa74609296f284</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1EnableControllerState.html</anchorfile>
      <anchor>adaf62dc42fa3a24438312df2d41ed563</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1EnableControllerState.html</anchorfile>
      <anchor>adceb9a9ccf2ca6ce391990a7be934d92</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::EncoderObserver</name>
    <filename>structmc__observers_1_1EncoderObserver.html</filename>
    <base>mc_observers::Observer</base>
    <member kind="function">
      <type></type>
      <name>EncoderObserver</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a038463bc586f4b49cf351cd3425a1499</anchor>
      <arglist>(const std::string &amp;type, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a89f499d2d14498469f00e0a758b7fc0c</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a2934c6f44a6b49aae0e8e412b04d37c1</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>ad65144731e89fc2d6ba40c39e9d5b691</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>ade68d7a05c230052c3507b327bcf82f1</anchor>
      <arglist>(mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>PosUpdate</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a2477d2b4531716700f65cea898a74274</anchor>
      <arglist></arglist>
      <enumvalue file="structmc__observers_1_1EncoderObserver.html" anchor="a2477d2b4531716700f65cea898a74274aa1595abbb4c3a326636dd178757cd6c1">Control</enumvalue>
      <enumvalue file="structmc__observers_1_1EncoderObserver.html" anchor="a2477d2b4531716700f65cea898a74274a5d2acfcccfdd535f49b67144392ae508">EncoderValues</enumvalue>
      <enumvalue file="structmc__observers_1_1EncoderObserver.html" anchor="a2477d2b4531716700f65cea898a74274a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>VelUpdate</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>aac0902eb5fa7af1436db7cc9ff06dff9</anchor>
      <arglist></arglist>
      <enumvalue file="structmc__observers_1_1EncoderObserver.html" anchor="aac0902eb5fa7af1436db7cc9ff06dff9aa1595abbb4c3a326636dd178757cd6c1">Control</enumvalue>
      <enumvalue file="structmc__observers_1_1EncoderObserver.html" anchor="aac0902eb5fa7af1436db7cc9ff06dff9af71c32125ed00f5671b8f9f8757c8580">EncoderVelocities</enumvalue>
      <enumvalue file="structmc__observers_1_1EncoderObserver.html" anchor="aac0902eb5fa7af1436db7cc9ff06dff9af36b285527c0884c23e8dd6da1ec899f">EncoderFiniteDifferences</enumvalue>
      <enumvalue file="structmc__observers_1_1EncoderObserver.html" anchor="aac0902eb5fa7af1436db7cc9ff06dff9a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a03e8f96f2c3140443c6a60bc0d9a607c</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::Logger &amp;, const std::string &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PosUpdate</type>
      <name>posUpdate_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a12831fe5df2163a7f517b95c3158a5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VelUpdate</type>
      <name>velUpdate_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a088c5ec59d2288b6a3499c8aae54853b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>computeFK_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a7f2b9fff6335475ffe98509249181e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>computeFV_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a2186bef7a7415c523bd7930d2ab8de16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>initialized_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>aebaac56395dd19dd58b32be3a3ec022d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>robot_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>ab80efb08a7f4ca5d960f423319c9ee59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>updateRobot_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a705080a654010c5928bb8f76225f6218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>prevEncoders_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a81e5682d74e14df7b3b65c6344b49cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>encodersVelocity_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a836476dda18a176da54e14ede5f0eabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logPosition_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a2aded6c41596d4fdb15732a615b44307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logVelocity_</name>
      <anchorfile>structmc__observers_1_1EncoderObserver.html</anchorfile>
      <anchor>a8a2ec1dcb1a36e2b0cef5c1e8f5a489d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::EndEffectorTask</name>
    <filename>structmc__tasks_1_1EndEffectorTask.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type></type>
      <name>EndEffectorTask</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>abbe5297b7d097f9713fa8b3445f610c4</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=2.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EndEffectorTask</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a10e9ffa606532e24dc2be4c5561abfeb</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a4ae325b8848afaae12051f1e02462e8b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_ef_pose</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a01f1c5053c8e6a7b8fa1cbd30936bd3b</anchor>
      <arglist>(const sva::PTransformd &amp;dtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_ef_pose</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a943ad2fc928accf735ce459f57b7c122</anchor>
      <arglist>(const sva::PTransformd &amp;tf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sva::PTransformd</type>
      <name>get_ef_pose</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a849f1bb907b638b0a2d3513630095155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a566c97665b6d80c1d5e035bf13b74d3a</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>abe6e3496c8f51c563f75b6507aa4676a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectActiveJoints</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a7ed97254c1f37a06ef4a05a1a9645c17</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a4863aefcbb6a6e9a72430a55c2a6f621</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetJointsSelector</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a8571303aab2101cb472ae70ee188d695</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>afd9eb745f23f22752530d3b86329ac61</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a1f32884c9cd511e180e1a9d5399766e4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>ad54a271a90a4ac60b338e5f50d24b743</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>ad666274c6712c5362271417f8b030ec4</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_tasks::PositionTask &gt;</type>
      <name>positionTask</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a9d4cf0afca9af76d232b408275e3b9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_tasks::OrientationTask &gt;</type>
      <name>orientationTask</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>ac426513e9c556336e75a09cd690ee30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>curTransform</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a0df1bdc1275d182569ec4e306ba6c395</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a945db27954f59e4d0c5c3a12728077d9</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a249185c608d3c78b7286f00e8bdb735a</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>af4fae4001f175768e25f77903af44ecc</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a2f2a05a42cb073ee71e2783b2a232ee6</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>ac22521542e7b290629884352f9014f78</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>a445bf38376823f52f538c7dcce64fb98</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tasks_1_1EndEffectorTask.html</anchorfile>
      <anchor>abc4d692ec2c4f8e958874c3fd5613468</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::FlatLog::entry</name>
    <filename>structmc__rtc_1_1log_1_1FlatLog_1_1entry.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1entry.html</anchorfile>
      <anchor>a67fbc08c9538e65ac214472f795e8dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; record &gt;</type>
      <name>records</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1entry.html</anchorfile>
      <anchor>abf3c8af81db34096910a6167aa54266c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::StabilizerTask::EnumClassHash</name>
    <filename>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask_1_1EnumClassHash.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask_1_1EnumClassHash.html</anchorfile>
      <anchor>a57c9597cece19ebcc216b9ae532000a7</anchor>
      <arglist>(T t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::EqualityConstraint</name>
    <filename>structmc__solver_1_1utils_1_1EqualityConstraint.html</filename>
    <templarg>UpdateT</templarg>
    <base>Constraint&lt; tasks::qp::Equality, UpdateT &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, UpdateT &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityConstraint&lt; utils::UpdateForce &gt;</name>
    <filename>structmc__solver_1_1utils_1_1EqualityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::Equality, utils::UpdateForce &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, utils::UpdateForce &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityConstraint&lt; utils::UpdateLambda &gt;</name>
    <filename>structmc__solver_1_1utils_1_1EqualityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::Equality, utils::UpdateLambda &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, utils::UpdateLambda &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityConstraint&lt; utils::UpdateRobot &gt;</name>
    <filename>structmc__solver_1_1utils_1_1EqualityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::Equality, utils::UpdateRobot &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, utils::UpdateRobot &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1EqualityConstraint.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::EqualityConstraintForce</name>
    <filename>structmc__solver_1_1EqualityConstraintForce.html</filename>
    <base>EqualityConstraint&lt; utils::UpdateForce &gt;</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraintForce</name>
      <anchorfile>structmc__solver_1_1EqualityConstraintForce.html</anchorfile>
      <anchor>a252d0cb3773296939c4fabf8802ee6ee</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::EqualityConstraintLambda</name>
    <filename>structmc__solver_1_1EqualityConstraintLambda.html</filename>
    <base>EqualityConstraint&lt; utils::UpdateLambda &gt;</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraintLambda</name>
      <anchorfile>structmc__solver_1_1EqualityConstraintLambda.html</anchorfile>
      <anchor>ad47fb029ea828403ea18f1d7d68bca15</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::EqualityConstraintRobot</name>
    <filename>structmc__solver_1_1EqualityConstraintRobot.html</filename>
    <base>EqualityConstraint&lt; utils::UpdateRobot &gt;</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraintRobot</name>
      <anchorfile>structmc__solver_1_1EqualityConstraintRobot.html</anchorfile>
      <anchor>a8f57f09de172e6a12c7d29717f6e6066</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::ExactCubic</name>
    <filename>structmc__trajectory_1_1ExactCubic.html</filename>
    <base>Spline&lt; Eigen::Vector3d, std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>Eigen::Vector3d</type>
      <name>point_t</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a696e4cd6c5ac9fda37888ac9b2c7a955</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, point_t &gt;</type>
      <name>waypoint_t</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a5e665c15b2b296658f1ec80caf0499e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ndcurves::exact_cubic&lt; double, double, false, point_t &gt;</type>
      <name>exact_cubic_t</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a289fb02c8988a89607844624d0e3d3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ndcurves::curve_constraints&lt; point_t &gt;</type>
      <name>spline_constraints_t</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a808079084680fabc35d41f2fcd2918fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExactCubic</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a1c4b7078a6df6537dc27a7b678d254c2</anchor>
      <arglist>(double duration, const point_t &amp;start, const point_t &amp;target, const std::vector&lt; waypoint_t &gt; &amp;waypoints={}, const point_t &amp;init_vel={}, const point_t &amp;init_acc={}, const point_t &amp;end_vel={}, const point_t &amp;end_acc={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a22a9af98b0a796589d8c25037b7cdb60</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoint</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>aec46e0e93dfe6c8483cd4ab96ec133ae</anchor>
      <arglist>(size_t idx, const point_t &amp;waypoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoint</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a012346ad965151024073f23d6261d977</anchor>
      <arglist>(size_t idx, const double t)</arglist>
    </member>
    <member kind="function">
      <type>const waypoint_t &amp;</type>
      <name>waypoint</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a83a0733b114960743205b1b3a390ca6e</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>waypointTime</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a48ee7c7819f41e00f485f3565d990106</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>af0dd28bb9136823399f3d85d5512bc33</anchor>
      <arglist>(const point_t &amp;init_vel, const point_t &amp;init_acc, const point_t &amp;end_vel, const point_t &amp;end_acc)</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>init_vel</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a342e98f2928656490fbcb12bf7d8bee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>init_acc</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>af47e1c92e5824f345b1616aacbd1891c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>end_vel</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a39c91f03c69b47e26871602fecb5dc09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>end_acc</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a36540b993aa3ca5af2f656335726b454</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>splev</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>a3df92dec43977efee8f5f4a8cc83ae87</anchor>
      <arglist>(double t, unsigned int der=0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>sampleTrajectory</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>ab73c2c2f06d04ee301e8ec0d1a15b831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__trajectory_1_1ExactCubic.html</anchorfile>
      <anchor>ae734960f82442e523fe5fa1077588e75</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::ExactCubicTrajectoryTask</name>
    <filename>structmc__tasks_1_1ExactCubicTrajectoryTask.html</filename>
    <base>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>ExactCubicTrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a5baa4e6ec467049164423b9a249fe265</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double duration, double stiffness, double weight, const sva::PTransformd &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt;&gt; &amp;posWp={}, const Eigen::Vector3d &amp;init_vel=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;init_acc=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;end_vel=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;end_acc=Eigen::Vector3d::Zero(), const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExactCubicTrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>ad27477a0f30c373765213f5e8288963e</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;surfaceName, double duration, double stiffness, double weight, const sva::PTransformd &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt;&gt; &amp;posWp={}, const Eigen::Vector3d &amp;init_vel=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;init_acc=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;end_vel=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;end_acc=Eigen::Vector3d::Zero(), const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_trajectory::ExactCubic &amp;</type>
      <name>spline</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a9e72a177388b55ed2773d1906bd28f9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_trajectory::ExactCubic &amp;</type>
      <name>spline</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a1aa0b41fae9369d28c6d1b7240a5df6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a1f68add7b8b70b9b6878bb0d72c0c6e7</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posWaypoints</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>ad8ed139887005e36a8ae46295ebecf60</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt;&gt; &amp;posWp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a14e12359f28675ec224ec009ae75b174</anchor>
      <arglist>(const Eigen::Vector3d &amp;init_vel, const Eigen::Vector3d &amp;init_acc, const Eigen::Vector3d &amp;end_vel, const Eigen::Vector3d &amp;end_acc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetPos</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a80741d234899b3571a97e48ac9fb2407</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetPos</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a8d6562ff64706e5957627bf66e7c8b44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::ExactCubic</type>
      <name>bspline</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a825212a1055ad43955b8284562905f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>initialPose_</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a7468619f2b047add1ee8a018daafb4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</name>
      <anchorfile>structmc__tasks_1_1ExactCubicTrajectoryTask.html</anchorfile>
      <anchor>a9bf87cb2f5679ce3181d696adad0a9d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Configuration::Exception</name>
    <filename>structmc__rtc_1_1Configuration_1_1Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>structmc__rtc_1_1Configuration_1_1Exception.html</anchorfile>
      <anchor>ae817c10e94b5dac7d6790f39138db9ff</anchor>
      <arglist>(const std::string &amp;msg, const Json &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>structmc__rtc_1_1Configuration_1_1Exception.html</anchorfile>
      <anchor>a7fb4c7e9f42ab610bc546f16c23e5bd4</anchor>
      <arglist>(const std::string &amp;msg, const Configuration &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Exception</name>
      <anchorfile>structmc__rtc_1_1Configuration_1_1Exception.html</anchorfile>
      <anchor>a262aab07d1d6f5b9b121e5af5fddfc11</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>structmc__rtc_1_1Configuration_1_1Exception.html</anchorfile>
      <anchor>a02a511274c6edbdfcf14ecc723a495c5</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silence</name>
      <anchorfile>structmc__rtc_1_1Configuration_1_1Exception.html</anchorfile>
      <anchor>a036273616d903f906ac28972cc16d902</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>msg</name>
      <anchorfile>structmc__rtc_1_1Configuration_1_1Exception.html</anchorfile>
      <anchor>a2a9ce02ed46c689d66f0dd5c2ccc7524</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::Executor</name>
    <filename>structmc__control_1_1fsm_1_1Executor.html</filename>
    <member kind="function">
      <type></type>
      <name>Executor</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>abee5011ac393cbe3234a4914b61656ab</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Executor</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a4c433b7fb3bbbab34dd26267b2d43958</anchor>
      <arglist>(const Executor &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Executor</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a1f532831204add37900188bef3f40fb1</anchor>
      <arglist>(Executor &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Executor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a045981311f758f434b56cb7187d1cb66</anchor>
      <arglist>(const Executor &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Executor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a41d60913b240b6eda0df758c5424affb</anchor>
      <arglist>(Executor &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a87b8dd1aa78d6d57ece49c9f0782a07f</anchor>
      <arglist>(Controller &amp;ctl, const mc_rtc::Configuration &amp;config, const std::string &amp;name=&quot;&quot;, const std::vector&lt; std::string &gt; &amp;category={})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>ac2002091bc35441bfbacbd3b4cbf3631</anchor>
      <arglist>(Controller &amp;ctl, bool keep_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>ade28e68814e850c8a9dc8028b36d1fdd</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a6418feaa36246f3f192b6d358b8f1f7e</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>aadfab91a3042bf4f737c0089e51c86d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>af860589b02d979cbaf762b9e266790eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a6fa9ca4d2397e28f48175b815a4cb2a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>complete</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>aa0151d38264e4c6536c37d1d8164ae11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resume</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>acb08422ac00c95dee1d5296eb386d71d</anchor>
      <arglist>(const std::string &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a75548e1c101ea1bb41fa7c9a2d7e7fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>state</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>ac630ca09d2a1aa216f840e6f9a9bf10c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>output</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>ab6b37334d736a1b7fdec12bc2fbad29c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>next_state</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>aaf24cd63af49e17bfb957bf8c45a8372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_msg</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a314a27acff2ed21f0dad648c51f459ac</anchor>
      <arglist>(std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_write_msg</name>
      <anchorfile>structmc__control_1_1fsm_1_1Executor.html</anchorfile>
      <anchor>a4ec5fe1a873d140b6ceb633ce4ae911e</anchor>
      <arglist>(std::string &amp;msg, std::string &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::ExponentialMovingAverage</name>
    <filename>structmc__filter_1_1ExponentialMovingAverage.html</filename>
    <templarg>VectorT</templarg>
    <member kind="function">
      <type></type>
      <name>ExponentialMovingAverage</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a156a26de235d293b4e94cb1f269dd16c</anchor>
      <arglist>(double dt, double timeConstant, const VectorT &amp;initValue=VectorT::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>afc5e32731c162cecc484c71b1cd6680f</anchor>
      <arglist>(const VectorT &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const VectorT &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a59a37436a454f4caa5d9ba49ab85b2e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>abc199c7a1935a35f01882c9ce6f355e4</anchor>
      <arglist>(double limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a4fe8efb515654281aa77b87296449f89</anchor>
      <arglist>(const VectorT &amp;initVal)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a25e06aceff6cb86deaba24edc060ef8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a5e116fb401af8c027896173066d8b8ed</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorT</type>
      <name>average_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>adaad48a146f8e945da36b18c0e9c4f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>accd3db44b24084922b2d1915e378b2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a6a235570200c501307ebc666fcd81e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeConstant_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a08b8eaf1a64cf2abc37a27311db4923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>saturation_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>aa39c03dbafb64fa46f4be54499b3ed48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExponentialMovingAverage&lt; Eigen::Vector3d &gt;</name>
    <filename>structmc__filter_1_1ExponentialMovingAverage.html</filename>
    <member kind="function">
      <type></type>
      <name>ExponentialMovingAverage</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a156a26de235d293b4e94cb1f269dd16c</anchor>
      <arglist>(double dt, double timeConstant, const Eigen::Vector3d &amp;initValue=Eigen::Vector3d ::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>afc5e32731c162cecc484c71b1cd6680f</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a59a37436a454f4caa5d9ba49ab85b2e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>abc199c7a1935a35f01882c9ce6f355e4</anchor>
      <arglist>(double limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a4fe8efb515654281aa77b87296449f89</anchor>
      <arglist>(const Eigen::Vector3d &amp;initVal)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a25e06aceff6cb86deaba24edc060ef8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a5e116fb401af8c027896173066d8b8ed</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>average_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>adaad48a146f8e945da36b18c0e9c4f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>accd3db44b24084922b2d1915e378b2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a6a235570200c501307ebc666fcd81e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeConstant_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>a08b8eaf1a64cf2abc37a27311db4923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>saturation_</name>
      <anchorfile>structmc__filter_1_1ExponentialMovingAverage.html</anchorfile>
      <anchor>aa39c03dbafb64fa46f4be54499b3ed48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::StabilizerTask::ExternalWrench</name>
    <filename>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask_1_1ExternalWrench.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW sva::ForceVecd</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask_1_1ExternalWrench.html</anchorfile>
      <anchor>ae9d03ec70b391be76eff714f09c3d9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::ForceVecd</type>
      <name>measured</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask_1_1ExternalWrench.html</anchorfile>
      <anchor>a82076f5b90cd1d001fa11fe63f0e2ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::MotionVecd</type>
      <name>gain</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask_1_1ExternalWrench.html</anchorfile>
      <anchor>af9765851f1823c93e170865b6c2978a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>surfaceName</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask_1_1ExternalWrench.html</anchorfile>
      <anchor>a1c50fb7bcd1942de3e2dcec516a2fcfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration</name>
    <filename>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</filename>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a7ffbc94c90b9db18e568822089740ce3</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a7a1b1da557ad35b9642820ed8a28464c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addExpectedCoMOffset</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a3e6307777775e934c7f102650565ef93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>subtractMeasuredValue</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a0c6ab2b29c544d4087d747936d9e4446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>modifyCoMErr</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a507c635c55a7cddbc95dc46fb9261907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>modifyZMPErr</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a07f7e6178872a0fba9b61975b707b1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>modifyZMPErrD</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>abfe6e931e6f6f77dd2ca657c0d5e3840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>excludeFromDCMBiasEst</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>adf774b10bdd24ff8788bb6fffa757719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comOffsetErrCoMLimit</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a37cc2ccf9652f8868edf8d8ee1f13edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comOffsetErrZMPLimit</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>ad636aa194409ba418d4f4c6377d0fe71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>extWrenchSumLowPassCutoffPeriod</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>abc2551e9efb790f462bf04173f5333cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comOffsetLowPassCutoffPeriod</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>af5d1903ed4c7cc1a0071edf8752d9e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comOffsetLowPassCoMCutoffPeriod</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a2a8cb02f8574c718d60edde5cb1276a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comOffsetDerivatorTimeConstant</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ExternalWrenchConfiguration.html</anchorfile>
      <anchor>a0c30e8b5d771f6d5ca4e80fc73c785f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::FDQPWeights</name>
    <filename>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</filename>
    <member kind="function">
      <type></type>
      <name>FDQPWeights</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</anchorfile>
      <anchor>aba4a576e4d7853321ccf5890465a1b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FDQPWeights</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</anchorfile>
      <anchor>a6d926ba6ea4f799ff815395dca3d9912</anchor>
      <arglist>(double netWrench, double ankleTorque, double pressure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</anchorfile>
      <anchor>aef93df80ad100bc6ff7b46286b1f92e4</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</anchorfile>
      <anchor>a59592e52c1a2c68746600855396b13cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ankleTorqueSqrt</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</anchorfile>
      <anchor>afb817ae2c1c643510fdaf15dc911cdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>netWrenchSqrt</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</anchorfile>
      <anchor>a982bc88cbf52ea49e182df9a81a6eb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pressureSqrt</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1FDQPWeights.html</anchorfile>
      <anchor>a2faca452947045f6c8f40e1947ac86a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::FirstOrderImpedanceTask</name>
    <filename>structmc__tasks_1_1force_1_1FirstOrderImpedanceTask.html</filename>
    <base>mc_tasks::force::ImpedanceTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>FirstOrderImpedanceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1FirstOrderImpedanceTask.html</anchorfile>
      <anchor>a4bd00e911e76a61218663694f09b7439</anchor>
      <arglist>(const std::string &amp;surfaceName, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FirstOrderImpedanceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1FirstOrderImpedanceTask.html</anchorfile>
      <anchor>aadb7f3eeaae1f09ae6c861580adf6b61</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;Frame, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1force_1_1FirstOrderImpedanceTask.html</anchorfile>
      <anchor>a1afaeb662f2f13553f323ae4c900d56c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::FlatLog</name>
    <filename>structmc__rtc_1_1log_1_1FlatLog.html</filename>
    <class kind="struct">mc_rtc::log::FlatLog::entry</class>
    <class kind="struct">mc_rtc::log::FlatLog::record</class>
    <member kind="function">
      <type></type>
      <name>FlatLog</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a904ba6cf9174416a99863f91d6e221df</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlatLog</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a16c024635d4ff9c7a817ace5507a75d4</anchor>
      <arglist>(const std::string &amp;fpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlatLog</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>ac636557632a2142945a24f276b179162</anchor>
      <arglist>(const FlatLog &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FlatLog &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a6ce88d6a3e1430c270cef304996f6a30</anchor>
      <arglist>(const FlatLog &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlatLog</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a4b5e22bfdbf82d2cbf7d98f5f6979d76</anchor>
      <arglist>(FlatLog &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FlatLog &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>aa0fad213fcaf514450b79d1710e78bbe</anchor>
      <arglist>(FlatLog &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>aaab239b6569c991b55472d3811e2360b</anchor>
      <arglist>(const std::string &amp;fpath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a712bdde57ac85de8725792a6040bd9e9</anchor>
      <arglist>(const std::string &amp;fpath)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>aff1cabef4b8d49e0c8736aa3985ea458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>entries</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a97f532a89ddd0bf098b8aac153109c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a92e0893128fd656707b37b31c26dd9e9</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; LogType &gt;</type>
      <name>types</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a92db42485fe91e0df8355298a344280d</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>adce27a288263487f7d87a6ed76db3f48</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a9a306a5082bbe5eeef9e6aeb6ecf0fe8</anchor>
      <arglist>(const std::string &amp;entry, size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const T * &gt;</type>
      <name>getRaw</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a13a0da9b94bfeffbdd9f4966a0a38697</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a2916d448d9bf2a1369b20cbc5566375e</anchor>
      <arglist>(const std::string &amp;entry, const T &amp;def) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a84715eb2284b398ea0fbe5de1b919179</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>af5fdf4f990d3bb351252dc0bcbe5cd5d</anchor>
      <arglist>(const std::string &amp;entry, size_t i, const T &amp;def) const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getRaw</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog.html</anchorfile>
      <anchor>a956945a4e75e5814a1910b5b560e9283</anchor>
      <arglist>(const std::string &amp;entry, size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Flexibility</name>
    <filename>structmc__rbdyn_1_1Flexibility.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>structmc__rbdyn_1_1Flexibility.html</anchorfile>
      <anchor>aae8d1a8eaa685b5efc3eb22b95fbb892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>K</name>
      <anchorfile>structmc__rbdyn_1_1Flexibility.html</anchorfile>
      <anchor>ad9fa8b3ad657cbfd784a906f80e2a493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>structmc__rbdyn_1_1Flexibility.html</anchorfile>
      <anchor>a6937033e6a1e29165b7a1f9b2005232a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>O</name>
      <anchorfile>structmc__rbdyn_1_1Flexibility.html</anchorfile>
      <anchor>aea9ed4cd59fb673fdac0d4f252d90987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ForceConfig</name>
    <filename>structmc__rtc_1_1gui_1_1ForceConfig.html</filename>
    <base>mc_rtc::gui::ArrowConfig</base>
    <member kind="function">
      <type></type>
      <name>ForceConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>aa43d330299a7e98bf4f71bb41203ef82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>a2d88ac62138a8f3a15a0c48468ec2d51</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>a9a4b2dd24ef25e1505a01f37a899349c</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>a3a1a3cbb8780c4dbf5d8e38e12f8c609</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>a78b1ea720927b2fa64a4f54b403a9184</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>saveConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>ab5a33c69de1d469bbb53b17ed0530968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>a172deb6bbb037afc2955e6ce0495a1cd</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>a3c32ba4f04a0903e09314c4fce866254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_scale</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceConfig.html</anchorfile>
      <anchor>a5b196a2d50081a662c2765c283a6d6b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::DynamicFunction::ForceContact</name>
    <filename>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</filename>
    <member kind="function">
      <type></type>
      <name>ForceContact</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a6afd56c6cef887b510d1578d857db851</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, std::vector&lt; sva::PTransformd &gt; points, double dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateJacobians</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a4d7f19c3e9e9599c870e1b90585404f2</anchor>
      <arglist>(DynamicFunction &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>force</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a1028eaec28b6c995c23551a8c8f671f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a463648e00be765f427c5c60cfe1bd3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tvm::VariableVector</type>
      <name>forces_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>ad3e48e877daf459f5d57d0b26f92b8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>points_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a4268e598360e134b74b8e159f5369071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dir_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a570239a35e85169b37d9fba9cd5f0c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Jacobian</type>
      <name>jac_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>ab12f3a24ff73efaeee9cc6dd33a5a1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Blocks</type>
      <name>blocks_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a49b22391e8b1cc096eddca37b995c978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>force_jac_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>a127ad4093d91337a119d33210bdcea2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>full_jac_</name>
      <anchorfile>structmc__tvm_1_1DynamicFunction_1_1ForceContact.html</anchorfile>
      <anchor>ab92b96545f498ad14f664bf6c0d001ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ForceImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ForceImpl.html</filename>
    <templarg>GetForce</templarg>
    <templarg>GetSurface</templarg>
    <templarg>SetForce</templarg>
    <base>mc_rtc::gui::ForceROImpl</base>
    <member kind="typedef">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>ForceRO</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceImpl.html</anchorfile>
      <anchor>a2ea650ce54d73f9bb231f2cce99163ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceImpl.html</anchorfile>
      <anchor>a7c1e5d0c24fad518cbb13c6949dba69e</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceImpl.html</anchorfile>
      <anchor>a19167cf6d2a2c0f0f14195e94098a11f</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceImpl.html</anchorfile>
      <anchor>a5a2a4971fe40e6b8805eb914392fb508</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceImpl.html</anchorfile>
      <anchor>a797c984faf37cff730edb2391a106968</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ForceROImpl</name>
    <filename>structmc__rtc_1_1gui_1_1ForceROImpl.html</filename>
    <templarg>GetForce</templarg>
    <templarg>GetSurface</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>ForceROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceROImpl.html</anchorfile>
      <anchor>afdf45b2767925077d95a3ef1bd372864</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceROImpl.html</anchorfile>
      <anchor>a57c555bb17d91446dfa6fc4b3c3721f1</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder, bool ro=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceROImpl.html</anchorfile>
      <anchor>a482f092b89cba7f1e6441d796104d013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1ForceROImpl.html</anchorfile>
      <anchor>abb6a80d44f1efee54399c80f0486615c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::ForceSensor</name>
    <filename>structmc__rbdyn_1_1ForceSensor.html</filename>
    <base>mc_rbdyn::Device</base>
    <member kind="function">
      <type></type>
      <name>ForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ae828d09148f8c17e1e1381055ab04a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>aa6327851fadc1e203db65471072aa3a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;parentBodyName, const sva::PTransformd &amp;X_p_f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a1ddf8c264c9370c5777df87328243f4b</anchor>
      <arglist>(const ForceSensor &amp;fs)</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ab4c7269c90f201bee45fda93ec7d88e3</anchor>
      <arglist>(const ForceSensor &amp;fs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a37735354c6d4aaaa666024dd5e86e667</anchor>
      <arglist>(ForceSensor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a349ba9b2264e0fa126265d2eba36fcb7</anchor>
      <arglist>(ForceSensor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a6b1376cf071908ece67005fdef95ea40</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>parentBody</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a6629c5e91037493e31492c2ee4c88ffb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_p_f</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a707f4a4c8178f9a626cdf802f744cd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_f</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>aa573d1f10146ae3a17209b404cade3aa</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>wrench</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>adea09dd3f17b8dd76849cfedb48fda90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>force</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ab2f342cd1d41306f103b913de674d5bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>couple</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>af437477c82db35d456f99ebef763b8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrench</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a60f9066555e70f594f40c2cf1f009061</anchor>
      <arglist>(const sva::ForceVecd &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>wrenchWithoutGravity</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ae32de74ac1608ecf37ed8c29f7c8bc14</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>worldWrench</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a0d803a62cce404fbb74677f26a104fee</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>worldWrenchWithoutGravity</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>aabd485bbaae60105f88cd5e6590dc06d</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>DevicePtr</type>
      <name>clone</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ab419d0879fbcd5e3b88b57a30070f55b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadCalibrator</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a0d51317c69787f6c822a77e0c2a9c2b6</anchor>
      <arglist>(const std::string &amp;calib_file, const Eigen::Vector3d &amp;gravity={0., 0., 9.81})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCalibrator</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a43271baa3d0937f8f68cf447764bcabf</anchor>
      <arglist>(const mc_rbdyn::ForceSensor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCalibrator</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a4484970b0298b13fcc9a18b9c93f6f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_fsmodel_fsactual</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a95d5b7f0eb0f2eea86ff77013df65787</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>X_fsactual_parent</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a9c831a9aa004b7f583de71ab26b8e5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ae8a09d7e1c2a1989c205d8a589c4aa59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>offset</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ab4a0bd19850840f9cd46301553b4d7a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadCalibrator</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a0d51317c69787f6c822a77e0c2a9c2b6</anchor>
      <arglist>(const std::string &amp;calib_file, const Eigen::Vector3d &amp;gravity={0., 0., 9.81})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCalibrator</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a43271baa3d0937f8f68cf447764bcabf</anchor>
      <arglist>(const mc_rbdyn::ForceSensor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCalibrator</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a4484970b0298b13fcc9a18b9c93f6f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_fsmodel_fsactual</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a95d5b7f0eb0f2eea86ff77013df65787</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>X_fsactual_parent</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>a9c831a9aa004b7f583de71ab26b8e5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ae8a09d7e1c2a1989c205d8a589c4aa59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>offset</name>
      <anchorfile>structmc__rbdyn_1_1ForceSensor.html</anchorfile>
      <anchor>ab4a0bd19850840f9cd46301553b4d7a2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::internal::FormArrayInput</name>
    <filename>structmc__rtc_1_1gui_1_1internal_1_1FormArrayInput.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>FormElement&lt; FormArrayInput&lt; T, DataCallback &gt;, Elements::ArrayInput &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormArrayInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormArrayInput.html</anchorfile>
      <anchor>af517a86e04b875b627267946781d8556</anchor>
      <arglist>(const std::string &amp;name, bool required, CallbackOrValue&lt; T, DataCallback &gt; def, bool fixed_size=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormArrayInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormArrayInput.html</anchorfile>
      <anchor>a851d4d522cb326acd8c55394d3b84045</anchor>
      <arglist>(const std::string &amp;name, bool required, bool fixed_size=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormArrayInput.html</anchorfile>
      <anchor>a83d0420bfef59b5241a90d4e9b237d59</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormArrayInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormArrayInput.html</anchorfile>
      <anchor>a0687cfd302655e5ba432ad1bd537c39c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormArrayInput.html</anchorfile>
      <anchor>a377487cbabe8532fe9a44f60cf12b511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_dynamic</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormArrayInput.html</anchorfile>
      <anchor>a1868e72270b01246f6d53338c6724476</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::FormattedTableImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1FormattedTableImpl.html</filename>
    <templarg>GetHeader</templarg>
    <templarg>GetFormat</templarg>
    <templarg>GetData</templarg>
    <base>mc_rtc::gui::details::TableImpl</base>
    <member kind="function">
      <type></type>
      <name>FormattedTableImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1FormattedTableImpl.html</anchorfile>
      <anchor>a6f17c4273427021ac165e1bf6b297d61</anchor>
      <arglist>(const std::string &amp;name, GetHeader get_header_fn, GetFormat get_format_fn, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1FormattedTableImpl.html</anchorfile>
      <anchor>a1b6fc2b88d050a5f7cb79694d8dd2619</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1FormattedTableImpl.html</anchorfile>
      <anchor>a1fa99d9e0b44b82827a7e7a0d94272e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; mc_rtc::Configuration &gt;</name>
    <filename>structfmt_1_1formatter_3_01mc__rtc_1_1Configuration_01_4.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01mc__rtc_1_1Configuration_01_4.html</anchorfile>
      <anchor>a4c98c9eb5c4adf4c8485ef306bc24c77</anchor>
      <arglist>(const mc_rtc::Configuration &amp;c, FormatContext &amp;ctx) -&gt; decltype(ctx.out())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; mc_solver::QPSolver::Backend &gt;</name>
    <filename>structfmt_1_1formatter_3_01mc__solver_1_1QPSolver_1_1Backend_01_4.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01mc__solver_1_1QPSolver_1_1Backend_01_4.html</anchorfile>
      <anchor>aeb432b9ff899051aee5412ccba9ce8a0</anchor>
      <arglist>(const mc_solver::QPSolver::Backend &amp;backend, FormatContext &amp;ctx) -&gt; decltype(ctx.out())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormComboInput</name>
    <filename>structmc__rtc_1_1gui_1_1FormComboInput.html</filename>
    <base>FormElement&lt; FormComboInput, Elements::ComboInput &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormComboInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormComboInput.html</anchorfile>
      <anchor>aabd26d907ca0cc2e882bab1dba2be99c</anchor>
      <arglist>(const std::string &amp;name, bool required, const std::vector&lt; std::string &gt; &amp;values, bool send_index=false, int def=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormComboInput.html</anchorfile>
      <anchor>ade120c97d849d5c36e15391f84a24422</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormComboInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormComboInput.html</anchorfile>
      <anchor>a072a747dd87980f5fc0d65fb401ddd90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormComboInput.html</anchorfile>
      <anchor>ae1372753a57496a61314d8eb0a9e4434</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormDataComboInput</name>
    <filename>structmc__rtc_1_1gui_1_1FormDataComboInput.html</filename>
    <base>FormElement&lt; FormDataComboInput, Elements::DataComboInput &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormDataComboInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormDataComboInput.html</anchorfile>
      <anchor>af453833d5d01430f2ce9674c26998b43</anchor>
      <arglist>(const std::string &amp;name, bool required, const std::vector&lt; std::string &gt; &amp;ref, bool send_index=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormDataComboInput.html</anchorfile>
      <anchor>a1b608ec12ddf49804eca58c3ba9445b7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormDataComboInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormDataComboInput.html</anchorfile>
      <anchor>afb3b67d526995fced7d01603d2efe213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormDataComboInput.html</anchorfile>
      <anchor>a9ec93215a0779c5bbad3bc1b4a720b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormDataComboInput.html</anchorfile>
      <anchor>abbcd49d3548e91a2dd518ffca7b4b34f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::internal::FormDataInput</name>
    <filename>structmc__rtc_1_1gui_1_1internal_1_1FormDataInput.html</filename>
    <templarg></templarg>
    <templarg>element</templarg>
    <templarg></templarg>
    <base>FormElement&lt; FormDataInput&lt; T, element, DataCallback &gt;, element &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormDataInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormDataInput.html</anchorfile>
      <anchor>ac223f2e4ec0a180c08c7c140ab9405f3</anchor>
      <arglist>(const std::string &amp;name, bool required, CallbackOrValue&lt; T, DataCallback &gt; def)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormDataInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormDataInput.html</anchorfile>
      <anchor>a184ed24b34fd350ca04c995556db1da4</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormDataInput.html</anchorfile>
      <anchor>af0e449bbcd40ba9f5b0891d997d3cb62</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormDataInput</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormDataInput.html</anchorfile>
      <anchor>ac7750dd445ee8f13c96e40be241a7980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormDataInput.html</anchorfile>
      <anchor>ab51fec44170fe661080cc755a059a949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_dynamic</name>
      <anchorfile>structmc__rtc_1_1gui_1_1internal_1_1FormDataInput.html</anchorfile>
      <anchor>a47f140750a6a361b3e75df982b1c01f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormElement</name>
    <filename>structmc__rtc_1_1gui_1_1FormElement.html</filename>
    <templarg>Derived</templarg>
    <templarg>element</templarg>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_dynamic</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ae1a360c963887beb4ccea6f109d57988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormArrayInput&lt; T, DataCallback &gt;, Elements::ArrayInput &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1FormElement.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_dynamic</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ae1a360c963887beb4ccea6f109d57988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormComboInput, Elements::ComboInput &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1FormElement.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_dynamic</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ae1a360c963887beb4ccea6f109d57988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormDataComboInput, Elements::DataComboInput &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1FormElement.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_dynamic</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ae1a360c963887beb4ccea6f109d57988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormDataInput&lt; T, element, DataCallback &gt;, element &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1FormElement.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_dynamic</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ae1a360c963887beb4ccea6f109d57988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormElement.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormImpl</name>
    <filename>structmc__rtc_1_1gui_1_1FormImpl.html</filename>
    <templarg>Callback</templarg>
    <base>CallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormImpl.html</anchorfile>
      <anchor>a0a9bdbcc3e4a6c161caf9f0dbf347c32</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormImpl.html</anchorfile>
      <anchor>ab9e4a119c65afeb42213d0e4a6fd7019</anchor>
      <arglist>(T &amp;&amp;element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormImpl.html</anchorfile>
      <anchor>a45371b1cc879901474c65fdee5f56808</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormImpl.html</anchorfile>
      <anchor>af03aec651081a3257a860feb38246c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormImpl.html</anchorfile>
      <anchor>acf9c033b7b7440e437a3327795424f02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1FormImpl.html</anchorfile>
      <anchor>a49d4514deb2452ef6908eda1daacf629</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Frame</name>
    <filename>structmc__rbdyn_1_1Frame.html</filename>
    <base>shared&lt; Frame &gt;</base>
    <class kind="struct">mc_rbdyn::Frame::NewFrameToken</class>
    <member kind="function">
      <type></type>
      <name>Frame</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a6acf359acd3f2ca97ae213d15fd5f23f</anchor>
      <arglist>(NewFrameToken, const std::string &amp;name) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frame</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a1063011c341653a82ad3cf52a6f19c44</anchor>
      <arglist>(NewFrameToken, const std::string &amp;name, Frame &amp;parent, sva::PTransformd X_p_f, bool bake) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Frame</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a9188d603302310854ecb37fccf72249e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frame</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>ae9eff8ad8b28c2f8c471fe84bc671f9b</anchor>
      <arglist>(const Frame &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frame</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a5e07af9e11a7958b5f0c3c46e6797e27</anchor>
      <arglist>(Frame &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Frame &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a714900e138854d9a2f692663558f3701</anchor>
      <arglist>(const Frame &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Frame &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a150c05d63d02bfc88542cf5f808a4412</anchor>
      <arglist>(Frame &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a69a99050050531ed1754a911671db55f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sva::PTransformd</type>
      <name>position</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>ad26f09e6682b94cf3458ad6cb8d2b67a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sva::MotionVecd</type>
      <name>velocity</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a791cfce50f3ba6c4e332a103f19137f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frame &amp;</type>
      <name>position</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a2deba592f58aaa20ecc42d070caf00d6</anchor>
      <arglist>(sva::PTransformd pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frame &amp;</type>
      <name>velocity</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a0680e37c019a401236857e0e039f3854</anchor>
      <arglist>(sva::MotionVecd velocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const FramePtr &amp;</type>
      <name>parent</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>ab5b1b4638a356565a7a436cdbafdcd08</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_tvm::Frame &amp;</type>
      <name>tvm_frame</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a06967e6b331dc60009f2211dcd6a4440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FramePtr</type>
      <name>make</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a731d62537dfcb6b1c5d76825222e8d08</anchor>
      <arglist>(const std::string &amp;name) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FramePtr</type>
      <name>make</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>acaff2a81ba1671c7bce8d3c843a6e4da</anchor>
      <arglist>(const std::string &amp;name, Frame &amp;parent, sva::PTransformd X_p_f, bool baked)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_tvm_frame</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a9599a61151625ad3e1cea1b0eba4535a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a5bdb2e9e19e0b0212ae641736492ab97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FramePtr</type>
      <name>parent_</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a8c216a5a27cd509659f04568e202a3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>position_</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a9b4907c46f5c23e55ff8a320fe027d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>velocity_</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a5ef74446f3269024319e688363a6fb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::FramePtr</type>
      <name>tvm_frame_</name>
      <anchorfile>structmc__rbdyn_1_1Frame.html</anchorfile>
      <anchor>a2a73c1e29441f8f488ed7511f24c391f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::Frame</name>
    <filename>structmc__tvm_1_1Frame.html</filename>
    <class kind="struct">mc_tvm::Frame::NewFrameToken</class>
    <member kind="function">
      <type></type>
      <name>Frame</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>a7ceda4d8c8c45be27bd9b808e415f89d</anchor>
      <arglist>(NewFrameToken, const mc_rbdyn::Frame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>position</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>a9bbd1d1ff27e4f5d5ec4f85eec4b93bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velocity</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>a8f0827e1f5b2f2bc90a3ecbb5afa28e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Frame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>a96c00fb84238c2dca4907934e99c6a95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>af8cc091e8c093bdaebdcc006aba6a34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>a7b7e2b9e307e6a42d1301e3a3d411826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Frame &amp;</type>
      <name>frame_</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>a3fc3e7bcafda4e2093869ef4930b57b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>position_</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>a0900471fd77a77c7d40b043e59b912aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>velocity_</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>acf3584761038bd036b4d18cd72963247</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_rbdyn::Frame</name>
      <anchorfile>structmc__tvm_1_1Frame.html</anchorfile>
      <anchor>aa42dab4e4f51adfb5fa6af7d25fdcdbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotModule::FrameDescription</name>
    <filename>structmc__rbdyn_1_1RobotModule_1_1FrameDescription.html</filename>
    <member kind="function">
      <type></type>
      <name>FrameDescription</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1FrameDescription.html</anchorfile>
      <anchor>a69da0e76f49a11001617ad227623da64</anchor>
      <arglist>(const std::string &amp;n, const std::string &amp;p, const sva::PTransformd &amp;pt, bool baked=false)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1FrameDescription.html</anchorfile>
      <anchor>a28e78e335a7b18953d13a7910956018b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>parent</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1FrameDescription.html</anchorfile>
      <anchor>a2b02996a4cbabd03f0b1da86942a1e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_p_f</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1FrameDescription.html</anchorfile>
      <anchor>a7c03e4cbce742f33818afd2b8930632a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>baked</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1FrameDescription.html</anchorfile>
      <anchor>a3d3ca07cf4a5774761eae3f4aa7f6b26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::FrameVelocity</name>
    <filename>structmc__tvm_1_1FrameVelocity.html</filename>
    <member kind="function">
      <type></type>
      <name>FrameVelocity</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>a0db188c7a0781e058fada1aa93a5598f</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const Eigen::Vector6d &amp;dof)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>a638512e7e4dc8530b50370adb7e56b64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>ae5689793295ce372530f9583c7a2f01d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>dof</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>abc61cb1d767bfa5b6c69d141ff6a1c54</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dof</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>a60ef513b051a168390896dd223848d1f</anchor>
      <arglist>(const Eigen::Vector6d &amp;dof) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>a5569f24f03592ca00dfc3d7b5dc120bd</anchor>
      <arglist>(const Eigen::Vector6d &amp;refV) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>refVel</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>a0dce94c3f59ae8c318fd4bc7034429c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>a5e5c4bc0762e3d8685c474164b477c44</anchor>
      <arglist>(const Eigen::Vector6d &amp;refA) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>refAccel</name>
      <anchorfile>structmc__tvm_1_1FrameVelocity.html</anchorfile>
      <anchor>a14e983543f8fd1f5051b3fc9128e83bf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Gains</name>
    <filename>structmc__rbdyn_1_1Gains.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>Gains</name>
      <anchorfile>structmc__rbdyn_1_1Gains.html</anchorfile>
      <anchor>a376b202a881efa2bfbdb8484439c500e</anchor>
      <arglist>(double value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gains&lt; 2 &gt;</name>
    <filename>structmc__rbdyn_1_1Gains.html</filename>
    <member kind="function">
      <type></type>
      <name>Gains</name>
      <anchorfile>structmc__rbdyn_1_1Gains.html</anchorfile>
      <anchor>a376b202a881efa2bfbdb8484439c500e</anchor>
      <arglist>(double value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gains&lt; 3 &gt;</name>
    <filename>structmc__rbdyn_1_1Gains.html</filename>
    <member kind="function">
      <type></type>
      <name>Gains</name>
      <anchorfile>structmc__rbdyn_1_1Gains.html</anchorfile>
      <anchor>a376b202a881efa2bfbdb8484439c500e</anchor>
      <arglist>(double value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::GazeFunction</name>
    <filename>structmc__tvm_1_1GazeFunction.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>GazeFunction</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a252a96edd8ef0e93fb59c63155b1ba44</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a6cca31c1bf570aca6fecd7e6b48e8ecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a59104f3d09de6a76afe650029ddbc4c9</anchor>
      <arglist>(const Eigen::Vector2d &amp;point, std::optional&lt; double &gt; depth=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimate</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a2d60982335d860c0de76ac6619ec26f4</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a578c62797147e1ce30749bb95872e339</anchor>
      <arglist>(const Eigen::Vector2d &amp;ref) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector2d &amp;</type>
      <name>target</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a999674c2c6f44f1167b918b965e8046a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>aacf1ca7fdb9f2913128d366278de2c38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a03a21038f61e035bf05b1ed2f68c9099</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a23ac4daf288cf9b74bdb0a165de4a8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a6cf12427404d53a64bf17ef2a9e62cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a890f53351fed61c1f5b4090bde29d73f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDepthEstimate</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>ac9b99cb66f863e32f73074f2263eb42a</anchor>
      <arglist>(double depth)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a33251c07b3176126f8d82a4dae7d5c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::RobotFrame &amp;</type>
      <name>tvm_frame_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a295fe6fa32bb6033ef8a5338b282a903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Jacobian</type>
      <name>frameJac_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a215602b167c44aaa4643ecb8e5ac75fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector2d</type>
      <name>point_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a8b976940c23e8c536b5f3eda817a1e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector2d</type>
      <name>pointRef_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a6f084f334b3bc6ea553cae44bd143c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>depthEstimate_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>aad8ae85ec055f756d888f9f45d7429de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, 6 &gt;</type>
      <name>L_img_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a0988c704abe22b041088a2abd35bfb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>surfaceVelocity_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>af08a5022ce754f24900192b872c3f7ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; double, 1, 6 &gt;</type>
      <name>L_Z_dot_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a2089b01a40331d63b594fd2489bc734d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, 6 &gt;</type>
      <name>L_img_dot_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>ab331b4bd0b50d25e0a12d13eb49a5f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>shortJacMat_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>acf5184f28cd64c8eb4bd52b35d9bdf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacMat_</name>
      <anchorfile>structmc__tvm_1_1GazeFunction.html</anchorfile>
      <anchor>a5be95d891f3fc9a9ee8a4982d1ce2c4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::GazeTask</name>
    <filename>structmc__tasks_1_1GazeTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>structmc__tasks_1_1GazeTask.html</anchorfile>
      <anchor>a766def74764adad3f745a1d6b048c0aa</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=2.0, double weight=500.0, const Eigen::Vector3d &amp;error=Eigen::Vector3d::UnitZ())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>structmc__tasks_1_1GazeTask.html</anchorfile>
      <anchor>a84332429e702444553058f37edcbe1d8</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector2d &amp;point2d, double depthEstimate, const sva::PTransformd &amp;X_b_gaze, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>structmc__tasks_1_1GazeTask.html</anchorfile>
      <anchor>abbb977995875cf7717d4ad89d78b0e12</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;point3d, const sva::PTransformd &amp;X_b_gaze, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1GazeTask.html</anchorfile>
      <anchor>aa486bc5c13fb2ae1baa946e76752c0db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>structmc__tasks_1_1GazeTask.html</anchorfile>
      <anchor>acc7bf6883b72a0d7082addb417956037</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>structmc__tasks_1_1GazeTask.html</anchorfile>
      <anchor>afeef6a71bd72087a707d60a093664d86</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::GenericLoader</name>
    <filename>structmc__solver_1_1GenericLoader.html</filename>
    <templarg>Derived</templarg>
    <templarg>T</templarg>
    <class kind="struct">mc_solver::GenericLoader::Handle</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>T_ptr</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>adb735279d914086553de0a21285126e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T_ptr(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;)&gt;</type>
      <name>load_fun</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a02dbea2e4a083ed146cea53d7b648483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, load_fun &gt;</type>
      <name>storage_t</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>afc58a28dae04a63aa3ed180a654ec223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handle</type>
      <name>register_load_function</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>ac24012d951d6a04490b05a64f5ccf620</anchor>
      <arglist>(const std::string &amp;type, load_fun fn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregister_load_function</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a35fcd3b9f4280a31049089aa57b54330</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a5da6be5874e61bd328a5452dda08950c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>adb825defeb480187f9584f84e8441a43</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a13b1f947ca0b22d2985f580ec57caf85</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a5236104825bda3a24cc3645e0e3bf448</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>aca794f13fede4900b9ee9cf70ee621b2</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>ab10c87faa2a1fb4721163c6a479fdd78</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLoader&lt; ConstraintSetLoader, ConstraintSet &gt;</name>
    <filename>structmc__solver_1_1GenericLoader.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>T_ptr</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>adb735279d914086553de0a21285126e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T_ptr(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;)&gt;</type>
      <name>load_fun</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a02dbea2e4a083ed146cea53d7b648483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, load_fun &gt;</type>
      <name>storage_t</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>afc58a28dae04a63aa3ed180a654ec223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handle</type>
      <name>register_load_function</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>ac24012d951d6a04490b05a64f5ccf620</anchor>
      <arglist>(const std::string &amp;type, load_fun fn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregister_load_function</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a35fcd3b9f4280a31049089aa57b54330</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a5da6be5874e61bd328a5452dda08950c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>adb825defeb480187f9584f84e8441a43</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a13b1f947ca0b22d2985f580ec57caf85</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a5236104825bda3a24cc3645e0e3bf448</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>aca794f13fede4900b9ee9cf70ee621b2</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>ab10c87faa2a1fb4721163c6a479fdd78</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLoader&lt; MetaTaskLoader, MetaTask &gt;</name>
    <filename>structmc__solver_1_1GenericLoader.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaTask &gt;</type>
      <name>T_ptr</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>adb735279d914086553de0a21285126e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T_ptr(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;)&gt;</type>
      <name>load_fun</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a02dbea2e4a083ed146cea53d7b648483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, load_fun &gt;</type>
      <name>storage_t</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>afc58a28dae04a63aa3ed180a654ec223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handle</type>
      <name>register_load_function</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>ac24012d951d6a04490b05a64f5ccf620</anchor>
      <arglist>(const std::string &amp;type, load_fun fn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregister_load_function</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a35fcd3b9f4280a31049089aa57b54330</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a5da6be5874e61bd328a5452dda08950c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>adb825defeb480187f9584f84e8441a43</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a13b1f947ca0b22d2985f580ec57caf85</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>a5236104825bda3a24cc3645e0e3bf448</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>aca794f13fede4900b9ee9cf70ee621b2</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const char *file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>structmc__solver_1_1GenericLoader.html</anchorfile>
      <anchor>ab10c87faa2a1fb4721163c6a479fdd78</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::GenInequalityConstraint</name>
    <filename>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</filename>
    <templarg>UpdateT</templarg>
    <base>Constraint&lt; tasks::qp::GenInequality, UpdateT &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, UpdateT &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenInequalityConstraint&lt; utils::UpdateForce &gt;</name>
    <filename>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::GenInequality, utils::UpdateForce &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, utils::UpdateForce &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenInequalityConstraint&lt; utils::UpdateLambda &gt;</name>
    <filename>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::GenInequality, utils::UpdateLambda &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, utils::UpdateLambda &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenInequalityConstraint&lt; utils::UpdateRobot &gt;</name>
    <filename>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::GenInequality, utils::UpdateRobot &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, utils::UpdateRobot &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1GenInequalityConstraint.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::GenInequalityConstraintForce</name>
    <filename>structmc__solver_1_1GenInequalityConstraintForce.html</filename>
    <base>GenInequalityConstraint&lt; utils::UpdateForce &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraintForce</name>
      <anchorfile>structmc__solver_1_1GenInequalityConstraintForce.html</anchorfile>
      <anchor>a65c6b5724f5c8a839dc5cfd4170ac3ce</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::GenInequalityConstraintLambda</name>
    <filename>structmc__solver_1_1GenInequalityConstraintLambda.html</filename>
    <base>GenInequalityConstraint&lt; utils::UpdateLambda &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraintLambda</name>
      <anchorfile>structmc__solver_1_1GenInequalityConstraintLambda.html</anchorfile>
      <anchor>a42ad6d2e1a60aadcd98ee19529d68f17</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::GenInequalityConstraintRobot</name>
    <filename>structmc__solver_1_1GenInequalityConstraintRobot.html</filename>
    <base>GenInequalityConstraint&lt; utils::UpdateRobot &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraintRobot</name>
      <anchorfile>structmc__solver_1_1GenInequalityConstraintRobot.html</anchorfile>
      <anchor>a389cffd5e1cba80d9636658f3c887a4a</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::GetLogType</name>
    <filename>structmc__rtc_1_1log_1_1GetLogType.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr mc_rtc::log::LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1GetLogType.html</anchorfile>
      <anchor>a7b718d634332b545266bbe2298a624d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::GetLogType&lt; Eigen::Ref&lt; Type, Options, StrideType &gt; &gt;</name>
    <filename>structmc__rtc_1_1log_1_1GetLogType_3_01Eigen_1_1Ref_3_01Type_00_01Options_00_01StrideType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Options</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr mc_rtc::log::LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1GetLogType_3_01Eigen_1_1Ref_3_01Type_00_01Options_00_01StrideType_01_4_01_4.html</anchorfile>
      <anchor>a398a7ff87a94fb2329f34dcbb78d79e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::GetLogType&lt; std::array&lt; double, N &gt; &gt;</name>
    <filename>structmc__rtc_1_1log_1_1GetLogType_3_01std_1_1array_3_01double_00_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr mc_rtc::log::LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1GetLogType_3_01std_1_1array_3_01double_00_01N_01_4_01_4.html</anchorfile>
      <anchor>abb810ed56b47cc1072dd33f1f40ca8a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::GetLogType&lt; std::vector&lt; double, A &gt; &gt;</name>
    <filename>structmc__rtc_1_1log_1_1GetLogType_3_01std_1_1vector_3_01double_00_01A_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr mc_rtc::log::LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1GetLogType_3_01std_1_1vector_3_01double_00_01A_01_4_01_4.html</anchorfile>
      <anchor>af37730234c3db7fedadf42ef4699c090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Global</name>
    <filename>classGlobal.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_control::MCGlobalController::GlobalConfiguration</name>
    <filename>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalConfiguration</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a987a966351ac8bc6f17d94cc8103a408</anchor>
      <arglist>(const std::string &amp;conf, std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; rm=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>ac2d357671c1f2ba1c316a128a6bf6549</anchor>
      <arglist>(const std::string &amp;ctrl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_controllers_configs</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a25be914af3f8f7543109624e44f820f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_plugin_configs</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a4a03b269639f6f50e2b43ecfb7434c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_controller_plugin_configs</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>aab0038f60606738d6567df31a6a0fa8e</anchor>
      <arglist>(const std::string &amp;controller, const std::vector&lt; std::string &gt; &amp;plugins)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose_loader</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a02a37bf8e560cc576b7fd7579aeeaf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>init_attitude_from_sensor</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a4f838a5287a1cbd4156961e77e389165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>init_attitude_sensor</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>ab6fb51a60d74fbfcfa7f8effe292aeef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>robot_module_paths</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>ac21e4689082d5955c94ec95eadfc9479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;</type>
      <name>main_robot_module</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a0f8466a2f2e104ed4fd266c5d50a1390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>observer_module_paths</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>aa294a1ad2731835821d3669f7bd770ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>global_plugin_paths</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a66adac4c10fc9599308e15741a15f0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>global_plugins</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a9b7cb460139df0aa576f76bfb45e4bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>global_plugin_configs</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a71b30a62cbfd288deb840dd294a181ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>controller_module_paths</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>afe307dbd38d3487b7ef154f35333cb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>enabled_controllers</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a6e0f82cdd3da14f8caf29a201d4f7d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>initial_controller</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a160c16f13781fc249731c80cb25b9dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>controllers_configs</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a59375fa06c589ffb9616139fbecd9426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timestep</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a570a304a795594860cfd5733a04588c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>include_halfsit_controller</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a098660ebece62cefc4b8cf0e108845e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_log</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a1fa58d70b7f6aea1d24376d1e2263adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::Logger::Policy</type>
      <name>log_policy</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>acbde34fb861228455a925e57f38b2e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>log_directory</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a8eedde988acfcfba5942a52d69f2b1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>log_template</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a0ca07c26b98991be2e1036a78c5f9702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_gui_server</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a10a18732116f39ff9f8bce06edf764a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gui_timestep</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>aefc4cb0145c34e7595b346186ed8a2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>gui_server_pub_uris</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a669bd8f5926553a0091c2f2118d5d5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>gui_server_rep_uris</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>a86b0d00d5943bf98a345f513b03f5388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Configuration</type>
      <name>config</name>
      <anchorfile>structmc__control_1_1MCGlobalController_1_1GlobalConfiguration.html</anchorfile>
      <anchor>aa22943a039c650dcc7f6b338506380a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::GlobalPlugin</name>
    <filename>structmc__control_1_1GlobalPlugin.html</filename>
    <class kind="struct">mc_control::GlobalPlugin::GlobalPluginConfiguration</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalPlugin</name>
      <anchorfile>structmc__control_1_1GlobalPlugin.html</anchorfile>
      <anchor>ae68386345dfc2a1820747a566d37c4af</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalPluginConfiguration</type>
      <name>configuration</name>
      <anchorfile>structmc__control_1_1GlobalPlugin.html</anchorfile>
      <anchor>ae3212f0cbf1958e84a6363bd7f9336bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>structmc__control_1_1GlobalPlugin.html</anchorfile>
      <anchor>acd8832c0335bbf2493bd04697b721bd7</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller, const mc_rtc::Configuration &amp;config)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structmc__control_1_1GlobalPlugin.html</anchorfile>
      <anchor>a034ddfcb8958c36c5812cdb7e0a2e9ca</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>before</name>
      <anchorfile>structmc__control_1_1GlobalPlugin.html</anchorfile>
      <anchor>a83ce36f99de7b4a3e7af152ed88e0f5b</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>after</name>
      <anchorfile>structmc__control_1_1GlobalPlugin.html</anchorfile>
      <anchor>ab661e381f418ad5f9afa4adf25b4f282</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::GlobalPlugin::GlobalPluginConfiguration</name>
    <filename>structmc__control_1_1GlobalPlugin_1_1GlobalPluginConfiguration.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>should_run_before</name>
      <anchorfile>structmc__control_1_1GlobalPlugin_1_1GlobalPluginConfiguration.html</anchorfile>
      <anchor>a8d5d8ec0e6f797e19f52c661902581c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>should_run_after</name>
      <anchorfile>structmc__control_1_1GlobalPlugin_1_1GlobalPluginConfiguration.html</anchorfile>
      <anchor>a5eac14f1a695e60030cd2a104e75168f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>should_always_run</name>
      <anchorfile>structmc__control_1_1GlobalPlugin_1_1GlobalPluginConfiguration.html</anchorfile>
      <anchor>a4acbf002781aa0c45fbd43c8829c0bbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::GlobalPluginLoader</name>
    <filename>structmc__control_1_1GlobalPluginLoader.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rtc::ObjectLoader&lt; GlobalPlugin &gt; &amp;</type>
      <name>loader</name>
      <anchorfile>structmc__control_1_1GlobalPluginLoader.html</anchorfile>
      <anchor>a07a0514ff5bc744064b7534f4f51daf5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::Gripper</name>
    <filename>structmc__control_1_1Gripper.html</filename>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a8d7b0576bb756c6936732170f6075c56</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;jointNames, const std::string &amp;robot_urdf, bool reverseLimits, const mc_rbdyn::RobotModule::Gripper::Safety &amp;safety)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a483d47181d0cfa400b038a69b4a55a77</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;jointNames, const std::vector&lt; mc_rbdyn::Mimic &gt; &amp;mimics, bool reverseLimits, const mc_rbdyn::RobotModule::Gripper::Safety &amp;safety)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDefaults</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a5a1af6322efc9a5896b0c18890e27231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveConfig</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a14de4e5ac7668163dd07358caa1ead4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreConfig</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ada9148786b02947b3db21cec72ff81bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a200872123e1278c66747c2a35e991123</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ada608acad76122b69018232d54480801</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;currentQ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>af8d2812249f9a609ed32cb1a43ac45fc</anchor>
      <arglist>(const Gripper &amp;gripper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a9fc1ebc4fa711f899a3ae47e75cbef45</anchor>
      <arglist>(double timeStep, mc_rbdyn::Robot &amp;robot, mc_rbdyn::Robot &amp;real)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a1e92af3c043c39987da91fb4f53d708e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;targetQ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a1cbad8b20585770931b8e2496193d5e0</anchor>
      <arglist>(const std::string &amp;jointName, double targetQ)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTargetQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a6cc3775f48277db0ad4f80ec24af38f2</anchor>
      <arglist>(const std::string &amp;jointName) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getTargetQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>adb8b3c24a0acd644827a3a829f5a48e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a1627ecadc67cc990de55e11283f2da8b</anchor>
      <arglist>(double targetOpening)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>abab8a5d952afd7d69a39fac45d7a4f74</anchor>
      <arglist>(const std::string &amp;jointName, double targetOpening)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTargetOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a39397815377ea951403fd34befb1359a</anchor>
      <arglist>(const std::string &amp;jointName) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>curPosition</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ad0e50e298dbf9b0a2be480a40a207c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>curOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a38f825e4e67bde2ec4b2f0088b81e91b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>curOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a6a33a0839ffab15eb5fb0411dd13dc5d</anchor>
      <arglist>(const std::string &amp;jointName) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>joints</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>aa789942e53cc165d37e40819a233ddbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>activeJoints</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a6acabadc915ad853670a65f5a83697e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasActiveJoint</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a4df55158c2f68b17313b0eb90e74f227</anchor>
      <arglist>(const std::string &amp;jointName) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>q</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a942af31983cf3ee9caecd5fff237258b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a7095762206c00c3b8a3de9d54a981a2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>percentVMAX</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>aad4ca73d511751dca580ea0f372780e1</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>percentVMAX</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a255e63b9cd2411c182b63f7d645414ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>actualCommandDiffTrigger</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a9021dad5d917b8bc8d27b786a3f619ff</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualCommandDiffTrigger</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a7b3b7316af2e3f34f89da026e04c5c67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overCommandLimitIterN</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a852a2f31c98679c44ab5548976412a65</anchor>
      <arglist>(unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>overCommandLimitIterN</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a6e41d5e49c7dd4eb8e72abea2897eb58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseSafetyOffset</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ad808c7685be58f6523c38284b642e101</anchor>
      <arglist>(double offset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>releaseSafetyOffset</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>af91c5965773d7b9f0d70d807c9a78c71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>complete</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a1f9ced059d4998dab6150b7796e974af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_metric</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a7f7b4fa1ac249a3f4f5682ec32064dc9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reversed</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>aa3a5bd62e0af52b3b1d61015ed83be5a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>mc_rbdyn::RobotModule::Gripper::Safety</type>
      <name>Config</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ab343f75540cb23dadf80172b9b5e1e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTargetOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a1f06a62ba8efe640ca4e9ff4745030ba</anchor>
      <arglist>(size_t activeJointId, double targetOpening)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTargetQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a1760f434fbb9e5a4b22263f6569af824</anchor>
      <arglist>(size_t activeJointId, double targetQ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTargetQ_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ad45a2f57cc804d0a072e98b61946de48</anchor>
      <arglist>(size_t activeJoints, double targetQ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTargetQ_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a44438b867b1b5a068c94d1c837cacb7e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;targetQ)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>curPosition</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a08436bafb2ff8e5862894800d33bef3f</anchor>
      <arglist>(size_t jointId) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>curOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a4a8fd8850db3e9d9bbb2f2263a85eab3</anchor>
      <arglist>(size_t jointId) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>targetOpening</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a4561c4e1bc0a57bc1b2537f787fb9334</anchor>
      <arglist>(size_t jointId) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getTargetQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a3e965969e9340e69f70016d9fc6a0697</anchor>
      <arglist>(size_t jointId) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>clampQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a76b99a848a82fb27651c5f81a8eea5b2</anchor>
      <arglist>(size_t activeJoint, double q)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>names</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a256da9263781bdd51abeeea862c5e7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>active_joints</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a22fa930ce8c386d8ccae3bd2664cdad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>active_joints_idx</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a0f87c5c3ff7cd5ffb5219add516b2c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>joints_mbc_idx</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a30fe14a15d20853d1d0ddd2c3cedcb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_metric_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ae91facfa1c3c3a58e72f6bf75dd42fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>closeP</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a5eb0a94fccb4aa671546b6c635e7bb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>openP</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>aa6a495f7018cd71dcc4d366df8807cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>vmax</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a35f8adae647723d47d34a4f1037e3fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; size_t, double &gt; &gt;</type>
      <name>mult</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a6fe10788bcdbf6760ab2d6aabe8afdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>offset</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a3d7cfa4cecffe109ec06217fa5e7ad8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_q</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>aa662e2af56018d19e5655934616d8943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>targetQIn</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a673081ad7c193519c89a22eba4119840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt; *</type>
      <name>targetQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a95690e9746ea4f736d5cae7372e20f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>reached_threshold_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ad84f25b2a67860816c5e86957f928bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>actualQ</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>aceef1a71c3113b84067decf4ba37ed66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Config</type>
      <name>config_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>ab388cbc7157fea187e7398746b37e436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Config</type>
      <name>savedConfig_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a6d32efc8e91965c32c9429c4610f7e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Config</type>
      <name>defaultConfig_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>adfb9313e52dfae85bf657914fd45b5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>percentOpen</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a8d40258cf16f5f0f65e938a5aaac330d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>overCommandLimit</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>aff69bd84c7afd52a4633b5dd49d70170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>overCommandLimitIter</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>acd2dade357fca9fa8f2261a8f29fc6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>reversed_</name>
      <anchorfile>structmc__control_1_1Gripper.html</anchorfile>
      <anchor>a1dc21cebf510e761cd4e4c9e37d2a24c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotModule::Gripper</name>
    <filename>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</filename>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper::Safety</class>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>a095ecf4ebd9b675117bf1c5b45f093ca</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;joints, bool reverse_limits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>a3fa8ce090be890c8fd518592fe65b25e</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;joints, bool reverse_limits, const Safety &amp;safety)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>acbbf290bba17b0b3becaf8c84da9c066</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;joints, bool reverse_limits, const Safety &amp;safety, const std::vector&lt; Mimic &gt; &amp;mimics)</arglist>
    </member>
    <member kind="function">
      <type>const Safety *</type>
      <name>safety</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>ae5dccc3ca07db76cec2cd0e70cc0bff5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Mimic &gt; *</type>
      <name>mimics</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>ada9b553ac4484e6920c981bf71a92368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>a4c63d69cf61ff0c5ae634a549eadecd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>joints</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>a8ed52bd8f3d7ce552f62843c352b3d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reverse_limits</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper.html</anchorfile>
      <anchor>a61df660109da82ecf0cb5cb476525045</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::Grippers</name>
    <filename>structmc__control_1_1fsm_1_1Grippers.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1Grippers.html</anchorfile>
      <anchor>a6ba0f75a698bceabed668835046d382f</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1Grippers.html</anchorfile>
      <anchor>a62babf4e58b81ce358e6cb43779c564b</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1Grippers.html</anchorfile>
      <anchor>ae05d422fa90c06b058c890323d792581</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_control::GripperRef &gt;</type>
      <name>grippers_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Grippers.html</anchorfile>
      <anchor>abd9bd9863a30fad30f940c0a6baeecab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>keepSafetyConfig_</name>
      <anchorfile>structmc__control_1_1fsm_1_1Grippers.html</anchorfile>
      <anchor>a60f24c6e8135e2439b521ed1d8797df7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::GripperSurface</name>
    <filename>structmc__rbdyn_1_1GripperSurface.html</filename>
    <base>mc_rbdyn::Surface</base>
    <member kind="function">
      <type></type>
      <name>GripperSurface</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>acee39c73b63b2e7f72ae116002bb42ad</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName, const std::vector&lt; sva::PTransformd &gt; &amp;pointsFromOrigin, const sva::PTransformd &amp;X_b_motor, const double &amp;motorMaxTorque)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GripperSurface</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>aeae1f456b4be7ed9cce2cda368f01ed8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePoints</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>a1b4a58b8831e412fdc7b7cd31fcf94dc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>originTransform</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>a8df89e1076a2b0962ea1892b5db0070e</anchor>
      <arglist>(const sva::PTransformd &amp;X_s_sp)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>aa40c47e1fd7799f7dec70ad283f1bc5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>a8c620aadf02e4692a512bc250643df80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>pointsFromOrigin</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>a027aa5e8df99bc421791c350e2793213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_motor</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>a754909a2d87e053e76c070df2f5c876b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>motorMaxTorque</name>
      <anchorfile>structmc__rbdyn_1_1GripperSurface.html</anchorfile>
      <anchor>a88a3339b86716f672000736fefbb267a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::HalfSittingState</name>
    <filename>structmc__control_1_1fsm_1_1HalfSittingState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1HalfSittingState.html</anchorfile>
      <anchor>abde9259e5f3759b0266294abbad8c40b</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1HalfSittingState.html</anchorfile>
      <anchor>a8a8b45fdafd6e8b70d81a48ec20357c0</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1HalfSittingState.html</anchorfile>
      <anchor>a653b1d0395c408a264a954a4d8ba77be</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>robot_</name>
      <anchorfile>structmc__control_1_1fsm_1_1HalfSittingState.html</anchorfile>
      <anchor>af2cef21b4b88c3ea3b48d86367404e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>eval_threshold_</name>
      <anchorfile>structmc__control_1_1fsm_1_1HalfSittingState.html</anchorfile>
      <anchor>a93bf204a6601aa3294f2759817dc71e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>default_stiffness_</name>
      <anchorfile>structmc__control_1_1fsm_1_1HalfSittingState.html</anchorfile>
      <anchor>a84f53c91784c88fd59a7863dba0c2a30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::GenericLoader::Handle</name>
    <filename>structmc__solver_1_1GenericLoader_1_1Handle.html</filename>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>structmc__solver_1_1GenericLoader_1_1Handle.html</anchorfile>
      <anchor>a38ff1a03e3d23844851fbb6945052b6e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>structmc__solver_1_1GenericLoader_1_1Handle.html</anchorfile>
      <anchor>a3abf3568270608f66c2f3d8f42b158c5</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handle</name>
      <anchorfile>structmc__solver_1_1GenericLoader_1_1Handle.html</anchorfile>
      <anchor>acb9b93dfdd948310129a694363b1d018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>structmc__solver_1_1GenericLoader_1_1Handle.html</anchorfile>
      <anchor>ad1354d6ec1298c55743594d5f7e959d7</anchor>
      <arglist>(const Handle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__solver_1_1GenericLoader_1_1Handle.html</anchorfile>
      <anchor>a7bcd67bfff206e0063212e99dca891bc</anchor>
      <arglist>(const Handle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>structmc__solver_1_1GenericLoader_1_1Handle.html</anchorfile>
      <anchor>a8d34eedd99c2441236c01717b2ec7291</anchor>
      <arglist>(Handle &amp;&amp;h)</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__solver_1_1GenericLoader_1_1Handle.html</anchorfile>
      <anchor>a1002f0272ae3957fe636d3b06dc34148</anchor>
      <arglist>(Handle &amp;&amp;h)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::has_configuration_load_object</name>
    <filename>structmc__rtc_1_1internal_1_1has__configuration__load__object.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::has_configuration_save_object</name>
    <filename>structmc__rtc_1_1internal_1_1has__configuration__save__object.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mc_control::Contact &gt;</name>
    <filename>structstd_1_1hash_3_01mc__control_1_1Contact_01_4.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01mc__control_1_1Contact_01_4.html</anchorfile>
      <anchor>a136956d43236e07a07314c0a3d24ad05</anchor>
      <arglist>(const mc_control::Contact &amp;c) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::ImpedanceGains</name>
    <filename>structmc__tasks_1_1force_1_1ImpedanceGains.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW const details::ImpedanceVecd&lt; true &gt; &amp;</type>
      <name>M</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a6b88536a57828978dc2877d83b65001d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>details::ImpedanceVecd&lt; true &gt; &amp;</type>
      <name>M</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a898e2a2ca110dfe75e95402f78cd739f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const details::ImpedanceVecd&lt; true &gt; &amp;</type>
      <name>mass</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>af439de9cd741d581b292c2cfc8d8b289</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>details::ImpedanceVecd&lt; true &gt; &amp;</type>
      <name>mass</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a32892f4c1d6ca689541dbd2fc97a1d30</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>D</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a039734ae57878cec03ded2f15a499737</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>D</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a738759b89bc0325fd66daf8d70be9072</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>damper</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>aa21cd07b2528a1502d4612dec70a1783</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>damper</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a6be8a021cc0967787e4bfcd3619d6a10</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>K</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a076633d27b8ad48da2e8f3a19e275377</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>K</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>af17ffbe654708a0fb9d823ca0af40766</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>spring</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>adfdf8d0b4aabcc9b460d3a91dd8bc02f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>spring</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a4aa76bf8f0fb24b8683f9ae6a79d76a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>wrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a5bace86a7fa64130588279be37094b5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>details::ImpedanceVecd&lt; false &gt; &amp;</type>
      <name>wrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>aa19366ab8103c6ff0661c54860511d8e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImpedanceGains</type>
      <name>Default</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>aeff73ae8e61f3bea6441bb952a33a9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>details::ImpedanceVecd&lt; true &gt;</type>
      <name>M_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>aa4508b0a826c61e6a820c9fb56785cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>details::ImpedanceVecd&lt; false &gt;</type>
      <name>D_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>af7334f9f95bc125183f10487faa6cb93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>details::ImpedanceVecd&lt; false &gt;</type>
      <name>K_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a89707b58ca496b54f97c2e02c80e8243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>details::ImpedanceVecd&lt; false &gt;</type>
      <name>wrench_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceGains.html</anchorfile>
      <anchor>a7d9f24350044abdb57754a79aba2ea9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::ImpedanceTask</name>
    <filename>structmc__tasks_1_1force_1_1ImpedanceTask.html</filename>
    <base>mc_tasks::TransformTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>ImpedanceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a0ef3a7aced29828c13a1db97ca2c4d0b</anchor>
      <arglist>(const std::string &amp;surfaceName, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImpedanceTask</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ad22745f66f514b82fe1aaa047f07d90f</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a5ec5110aafaba8ecda490a3ce43f7676</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const ImpedanceGains &amp;</type>
      <name>gains</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a400d65123a02706e466611180d6bf4f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ImpedanceGains &amp;</type>
      <name>gains</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ae257bdea578b9c3f62b7cbeb8791d2f8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>targetPose</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ab48cd89c0e4d3fe4413d0df8f83ccd3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetPose</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ab82147120e3992c1f02313025ea8e2c1</anchor>
      <arglist>(const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>targetVel</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ab334d38e827d6917708178233c7feb9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetVel</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ad8b7c40175ae9d55ae86d4d89ffabe52</anchor>
      <arglist>(const sva::MotionVecd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>targetAccel</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a9fd6bbf9a5f6fbc67431ab603f946ac3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetAccel</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a693cd5a9fe5ae71b58dd0ffa29ded801</anchor>
      <arglist>(const sva::MotionVecd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>deltaCompliancePose</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a844b1c2fe28ca0036e829be80d2f3090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>compliancePose</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ab5d822a972b518fc10d7e2444d73b3d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>targetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a9887a44eed16940dbf620dc109b968cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetWrenchW</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a61a7f7ed47d98c51238404e7791d7357</anchor>
      <arglist>(const sva::ForceVecd &amp;wrenchW)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ad9dcb8ef222560d520f4822adf3fe3e2</anchor>
      <arglist>(const sva::ForceVecd &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>measuredWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>af4919382d3f17d9a9fd081e42bf6b6ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>filteredMeasuredWrench</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>acb7157b34fdcca4258a70a6bfd7b7353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>aea22f399012aa8a105df6d8fd4b8364c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a1e77e2a302a4cf27533adc9f2da8a293</anchor>
      <arglist>(double cutoffPeriod)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hold</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a368728466058fc1edfef2c7d665409df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hold</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a2c8e9929610ccffee183379536524cad</anchor>
      <arglist>(bool hold) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ab8f7ed4e3d9f2393c9d91ef1a7456eae</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ae6312131c165e96ff3e7cf4e1bf2e6c4</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a1014edb78929f3768bd4dd9c2260fab1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ae6658a431750580958b194b2d0a4963c</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a2d68f87660e62b62cbaa910632d68a3c</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImpedanceGains</type>
      <name>gains_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a650f1aad54ff5b3f1b7b9a344c975187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaCompPoseLinLimit_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a7a16fc84a51fc01c5fb4c50ad8fc8f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaCompPoseAngLimit_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a16c1d651a15167637fac4f799dfef762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaCompVelLinLimit_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a6aac1452e731ae1c901b274ad696babc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaCompVelAngLimit_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a52d02e32e84b95ec75eb87ea0e89486a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaCompAccelLinLimit_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>aa034a1be6d85da9b895931ac5d55e38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaCompAccelAngLimit_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a1cd3a8cd8dd8633b86b784cab515f5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>targetPoseW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a34c17bbcd0348e7b67a99241a97aa7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>targetVelW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a4e705a22da0d1a9d49bf015e868be245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>targetAccelW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>afda9ff98e5fdb2421896a9179e5e0f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>targetWrench_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>aec98a7aad766a8464dc2bf418af12ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>measuredWrench_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>acdc427a08b2669b8010a47f912c31a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>filteredMeasuredWrench_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>adcee9b37135af91695753725a9f9d139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cutoffPeriod_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a8e2f70a02937c5f41ddec3183ecaf924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPass&lt; sva::ForceVecd &gt;</type>
      <name>lowPass_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a51861dc893e2a8aa733f48423e48c6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hold_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>ae1abae5aed22bdd4007eaccabffdc4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>deltaCompPoseW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a81d1902dc6a242225524416168d35fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>deltaCompVelW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>adf26c7977065bdefdf4fc00c526bc365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>deltaCompAccelW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a3ef2ca726f8b8257f21d8aefd636ea66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>deltaCompPoseW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a81d1902dc6a242225524416168d35fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>deltaCompVelW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>adf26c7977065bdefdf4fc00c526bc365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>deltaCompAccelW_</name>
      <anchorfile>structmc__tasks_1_1force_1_1ImpedanceTask.html</anchorfile>
      <anchor>a3ef2ca726f8b8257f21d8aefd636ea66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::details::ImpedanceVecd</name>
    <filename>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</filename>
    <templarg>StrictlyPositive</templarg>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a37ea3072f25c6e2a67638f58faee361f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a1535fb3d37060f7ff2488e9d335f8ca6</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adcec6e04f8a148a886ddc9612de460c3</anchor>
      <arglist>(double angular_, double linear_)</arglist>
    </member>
    <member kind="function">
      <type>ImpedanceVecd &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a81d3d27c6a974f550c916f464f59bcd4</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>vector</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ae32fa91f201e480931523c5242ef6204</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ad4f990865443586d64ad36a08164a48f</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adb8ace8cfded17727b36db93552cf1d3</anchor>
      <arglist>(const Eigen::Vector6d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a3058636047bf6483914b05d2bb54866f</anchor>
      <arglist>(const Eigen::Vector3d &amp;a, const Eigen::Vector3d &amp;l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ab806eb5d0129b204e2f2e4e90d2cef6e</anchor>
      <arglist>(double a, double l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const sva::ImpedanceVecd &amp;</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adb5014718233aecef9fd571589ea6320</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a602a43c43854cce8160895b03b34817a</anchor>
      <arglist>(const Eigen::Vector3d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a42ef95125d0b4c9989eea1ed74cb1413</anchor>
      <arglist>(double angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a7a4bc91cba946ddbe1043be48da838d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>afd1316255060bd035cf6c6c31e4b140b</anchor>
      <arglist>(const Eigen::Vector3d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a37187ece11c1b67d92751412ce49e9c1</anchor>
      <arglist>(double linear) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a7a2b2ae194302cc32740d2482ec74af0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImpedanceVecd&lt; false &gt;</name>
    <filename>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a37ea3072f25c6e2a67638f58faee361f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a1535fb3d37060f7ff2488e9d335f8ca6</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adcec6e04f8a148a886ddc9612de460c3</anchor>
      <arglist>(double angular_, double linear_)</arglist>
    </member>
    <member kind="function">
      <type>ImpedanceVecd &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a81d3d27c6a974f550c916f464f59bcd4</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>vector</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ae32fa91f201e480931523c5242ef6204</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ad4f990865443586d64ad36a08164a48f</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adb8ace8cfded17727b36db93552cf1d3</anchor>
      <arglist>(const Eigen::Vector6d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a3058636047bf6483914b05d2bb54866f</anchor>
      <arglist>(const Eigen::Vector3d &amp;a, const Eigen::Vector3d &amp;l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ab806eb5d0129b204e2f2e4e90d2cef6e</anchor>
      <arglist>(double a, double l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const sva::ImpedanceVecd &amp;</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adb5014718233aecef9fd571589ea6320</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a602a43c43854cce8160895b03b34817a</anchor>
      <arglist>(const Eigen::Vector3d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a42ef95125d0b4c9989eea1ed74cb1413</anchor>
      <arglist>(double angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a7a4bc91cba946ddbe1043be48da838d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>afd1316255060bd035cf6c6c31e4b140b</anchor>
      <arglist>(const Eigen::Vector3d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a37187ece11c1b67d92751412ce49e9c1</anchor>
      <arglist>(double linear) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a7a2b2ae194302cc32740d2482ec74af0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImpedanceVecd&lt; true &gt;</name>
    <filename>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a37ea3072f25c6e2a67638f58faee361f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a1535fb3d37060f7ff2488e9d335f8ca6</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImpedanceVecd</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adcec6e04f8a148a886ddc9612de460c3</anchor>
      <arglist>(double angular_, double linear_)</arglist>
    </member>
    <member kind="function">
      <type>ImpedanceVecd &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a81d3d27c6a974f550c916f464f59bcd4</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>vector</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ae32fa91f201e480931523c5242ef6204</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ad4f990865443586d64ad36a08164a48f</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adb8ace8cfded17727b36db93552cf1d3</anchor>
      <arglist>(const Eigen::Vector6d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a3058636047bf6483914b05d2bb54866f</anchor>
      <arglist>(const Eigen::Vector3d &amp;a, const Eigen::Vector3d &amp;l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>ab806eb5d0129b204e2f2e4e90d2cef6e</anchor>
      <arglist>(double a, double l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const sva::ImpedanceVecd &amp;</type>
      <name>vec</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>adb5014718233aecef9fd571589ea6320</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a602a43c43854cce8160895b03b34817a</anchor>
      <arglist>(const Eigen::Vector3d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a42ef95125d0b4c9989eea1ed74cb1413</anchor>
      <arglist>(double angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>angular</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a7a4bc91cba946ddbe1043be48da838d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>afd1316255060bd035cf6c6c31e4b140b</anchor>
      <arglist>(const Eigen::Vector3d &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a37187ece11c1b67d92751412ce49e9c1</anchor>
      <arglist>(double linear) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>linear</name>
      <anchorfile>structmc__tasks_1_1force_1_1details_1_1ImpedanceVecd.html</anchorfile>
      <anchor>a7a2b2ae194302cc32740d2482ec74af0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::InequalityConstraint</name>
    <filename>structmc__solver_1_1utils_1_1InequalityConstraint.html</filename>
    <templarg>UpdateT</templarg>
    <base>Constraint&lt; tasks::qp::Inequality, UpdateT &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, UpdateT &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InequalityConstraint&lt; utils::UpdateForce &gt;</name>
    <filename>structmc__solver_1_1utils_1_1InequalityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::Inequality, utils::UpdateForce &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, utils::UpdateForce &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InequalityConstraint&lt; utils::UpdateLambda &gt;</name>
    <filename>structmc__solver_1_1utils_1_1InequalityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::Inequality, utils::UpdateLambda &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, utils::UpdateLambda &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InequalityConstraint&lt; utils::UpdateRobot &gt;</name>
    <filename>structmc__solver_1_1utils_1_1InequalityConstraint.html</filename>
    <base>Constraint&lt; tasks::qp::Inequality, utils::UpdateRobot &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, utils::UpdateRobot &gt;</type>
      <name>Base</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>structmc__solver_1_1utils_1_1InequalityConstraint.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::InequalityConstraintForce</name>
    <filename>structmc__solver_1_1InequalityConstraintForce.html</filename>
    <base>InequalityConstraint&lt; utils::UpdateForce &gt;</base>
    <member kind="function">
      <type></type>
      <name>InequalityConstraintForce</name>
      <anchorfile>structmc__solver_1_1InequalityConstraintForce.html</anchorfile>
      <anchor>aa02dd7575c860883c51f5de6bd94b677</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::InequalityConstraintLambda</name>
    <filename>structmc__solver_1_1InequalityConstraintLambda.html</filename>
    <base>InequalityConstraint&lt; utils::UpdateLambda &gt;</base>
    <member kind="function">
      <type></type>
      <name>InequalityConstraintLambda</name>
      <anchorfile>structmc__solver_1_1InequalityConstraintLambda.html</anchorfile>
      <anchor>ab6d5399263c39310ea3161c429873ca5</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::InequalityConstraintRobot</name>
    <filename>structmc__solver_1_1InequalityConstraintRobot.html</filename>
    <base>InequalityConstraint&lt; utils::UpdateRobot &gt;</base>
    <member kind="function">
      <type></type>
      <name>InequalityConstraintRobot</name>
      <anchorfile>structmc__solver_1_1InequalityConstraintRobot.html</anchorfile>
      <anchor>a3a76371902953809f84f92a1c642a75b</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::IntegerInputImpl</name>
    <filename>structmc__rtc_1_1gui_1_1IntegerInputImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>IntegerInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1IntegerInputImpl.html</anchorfile>
      <anchor>abb43e816875fdb07339135c65fa7982e</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1IntegerInputImpl.html</anchorfile>
      <anchor>a5b3e150b460bd7c5b4fc426a1d08e370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1IntegerInputImpl.html</anchorfile>
      <anchor>ad03092ac48c1ea07ce3ee119e000229b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::InterpolatedRotation</name>
    <filename>structmc__trajectory_1_1InterpolatedRotation.html</filename>
    <base>Spline&lt; Eigen::Matrix3d, std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>std::pair&lt; double, Eigen::Matrix3d &gt;</type>
      <name>waypoint_t</name>
      <anchorfile>structmc__trajectory_1_1InterpolatedRotation.html</anchorfile>
      <anchor>acbce3f9de05b28314ad0f61bb753d940</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatedRotation</name>
      <anchorfile>structmc__trajectory_1_1InterpolatedRotation.html</anchorfile>
      <anchor>a35aa6707fcb6b62d7be8daa9df9991eb</anchor>
      <arglist>(double duration, const Eigen::Matrix3d &amp;start, const Eigen::Matrix3d &amp;target, const std::vector&lt; waypoint_t &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__trajectory_1_1InterpolatedRotation.html</anchorfile>
      <anchor>a00b27ba3e5f5c5028a5c3f1b18552617</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>eval</name>
      <anchorfile>structmc__trajectory_1_1InterpolatedRotation.html</anchorfile>
      <anchor>a3848a3c1a1d3796760025d7504c0e7a7</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoint</name>
      <anchorfile>structmc__trajectory_1_1InterpolatedRotation.html</anchorfile>
      <anchor>aa0cdeef0cd6d5a0f7daea52f53bac171</anchor>
      <arglist>(size_t idx, const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const waypoint_t &amp;</type>
      <name>waypoint</name>
      <anchorfile>structmc__trajectory_1_1InterpolatedRotation.html</anchorfile>
      <anchor>a6188c9c45b2e7b836e82d911131c6f71</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; waypoint_t &gt;</type>
      <name>all_waypoints_</name>
      <anchorfile>structmc__trajectory_1_1InterpolatedRotation.html</anchorfile>
      <anchor>a3a83a147d6040fd550d83b1fa2a5e37c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::is_serializable</name>
    <filename>structmc__rtc_1_1log_1_1is__serializable.html</filename>
    <templarg>T</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1is__serializable.html</anchorfile>
      <anchor>aac6a1e39522eb1812e11c2a4d103c6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1log_1_1is__serializable.html</anchorfile>
      <anchor>a61a101e0e713dff37bd79ec91d6581de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::is_serializable_getter</name>
    <filename>structmc__rtc_1_1log_1_1is__serializable__getter.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1log_1_1is__serializable__getter.html</anchorfile>
      <anchor>a99bb9b50b93aea7f4c88eedd9a14cd69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::is_serializable_getter&lt; MethodRetT(T::*)() const &gt;</name>
    <filename>structmc__rtc_1_1log_1_1is__serializable__getter_3_01MethodRetT_07T_1_1_5_08_07_08_01const_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1log_1_1is__serializable__getter_3_01MethodRetT_07T_1_1_5_08_07_08_01const_01_4.html</anchorfile>
      <anchor>a6392b38fdc24d52cc977b70b0298ecba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::is_serializable_member</name>
    <filename>structmc__rtc_1_1log_1_1is__serializable__member.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1log_1_1is__serializable__member.html</anchorfile>
      <anchor>adef804a39a6131b6fba4614ff6675cdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::is_serializable_member&lt; MemberT T::* &gt;</name>
    <filename>structmc__rtc_1_1log_1_1is__serializable__member_3_01MemberT_01T_1_1_5_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmc__rtc_1_1log_1_1is__serializable__member_3_01MemberT_01T_1_1_5_01_4.html</anchorfile>
      <anchor>a3803162b228ef30c180c9b549ac4495d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::IsUpdate</name>
    <filename>structmc__solver_1_1utils_1_1IsUpdate.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::JointSensor</name>
    <filename>structmc__rbdyn_1_1JointSensor.html</filename>
    <member kind="function">
      <type></type>
      <name>JointSensor</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>ac0ae6ebd134c29a687ac45f234648e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointSensor</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>aa98c2a4e6de570b90d8d3813ca07e246</anchor>
      <arglist>(const std::string &amp;jointName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointSensor</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a8146f210db7f5327db2790accce04e0b</anchor>
      <arglist>(const JointSensor &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>JointSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a1f6ea7b4b8c8d540834d479a43c68481</anchor>
      <arglist>(const JointSensor &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointSensor</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>abeb589efccbf28f0614568516829c052</anchor>
      <arglist>(JointSensor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>JointSensor &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a9ca43a7f508a4749070de344481077b2</anchor>
      <arglist>(JointSensor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointSensor</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a760681e45e716ee3a648d2b833375da4</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>joint</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a5bc82e5bc792b1205bab90bbc0db9ff0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>motorTemperature</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>abfa5c1b8b13fe8bd3a7ddc4e241fda1a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>motorTemperature</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>aea5410f5e72c9a14732809820c5b7fc7</anchor>
      <arglist>(double motor_temperature) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>driverTemperature</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>abbd216e688e549ffdbadbacb9abb97a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>driverTemperature</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a5474e649ba72ec2d82c3b196b7ee52f3</anchor>
      <arglist>(double driver_temperature) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>motorCurrent</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a94a894a6d608152e9ffd574db02f3aae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>motorCurrent</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>a0cb1c64c1bad340b0c85d615af6bb5ee</anchor>
      <arglist>(double motor_current) noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>joint_</name>
      <anchorfile>structmc__rbdyn_1_1JointSensor.html</anchorfile>
      <anchor>ab42af9da49bc5e327d328b9360f205bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_tvm::JointsSelectorFunction</name>
    <filename>classmc__tvm_1_1JointsSelectorFunction.html</filename>
    <member kind="typedef">
      <type>tvm::function::abstract::Function</type>
      <name>Function</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a48d9de29ab8d9a06624bdfa17169588a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a0470f5d9e5677210dba01c7788c23fbf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>velocity</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a48d7132bb2c491a0db62ddad4a1d6430</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>ac195ef168eb07238c8631b5f08c98cb3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; JointsSelectorFunction &gt;</type>
      <name>ActiveJoints</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a50372912b1b5e89ada2dbfa8ef61831e</anchor>
      <arglist>(Function *f, const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;activeJoints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; JointsSelectorFunction &gt;</type>
      <name>InactiveJoints</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a6360c203cd2c5ce520f0107020ee03aa</anchor>
      <arglist>(Function *f, const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;inactiveJoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JointsSelectorFunction</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a83c0a4f2ae78f1ecceb7bfc3248b8b7a</anchor>
      <arglist>(Function *f, tvm::VariablePtr variable, const std::vector&lt; std::pair&lt; Eigen::DenseIndex, Eigen::DenseIndex &gt;&gt; &amp;activeIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>adcd3b4fdbde3f5d99dd914e31bab91a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJDot</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a7f0678f3c90274aabb3bc51a391a17d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Function *</type>
      <name>f_</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a2b5180a5b27bb5171020bd5c199d8316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tvm::VariablePtr</type>
      <name>variable_</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>a409e3d1e708b8d85120963f37ee563e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; Eigen::DenseIndex, Eigen::DenseIndex &gt; &gt;</type>
      <name>activeIndex_</name>
      <anchorfile>classmc__tvm_1_1JointsSelectorFunction.html</anchorfile>
      <anchor>ae1ddfd54fe4d1bae85f7e96713a62422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Logger::KeyAddedEvent</name>
    <filename>structmc__rtc_1_1Logger_1_1KeyAddedEvent.html</filename>
    <member kind="variable">
      <type>log::LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1Logger_1_1KeyAddedEvent.html</anchorfile>
      <anchor>a5f225c76b4e9c18c3f916eae8335dee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>structmc__rtc_1_1Logger_1_1KeyAddedEvent.html</anchorfile>
      <anchor>a69cb01c2c7ca268506b411d9836aa270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Logger::KeyRemovedEvent</name>
    <filename>structmc__rtc_1_1Logger_1_1KeyRemovedEvent.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>structmc__rtc_1_1Logger_1_1KeyRemovedEvent.html</anchorfile>
      <anchor>ab2cdb9dbf11b8a63fce9d79297c2b63f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::KinematicInertialObserver</name>
    <filename>structmc__observers_1_1KinematicInertialObserver.html</filename>
    <base>mc_observers::KinematicInertialPoseObserver</base>
    <member kind="function">
      <type></type>
      <name>KinematicInertialObserver</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>af656fb5e6ef17df0623c3efdf418445a</anchor>
      <arglist>(const std::string &amp;type, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>a8f0200900e2e6bc3bd393ef639811e70</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>add735e8b844fc3b8f45c91e759dfb784</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>a218d679b8851235ad18b2a49b2c71e01</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, const sva::MotionVecd &amp;velW)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>a2c4b4fe83ab2ad282f02ad6c093e1be6</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>a50c580f031d943ac2d1eb4e7ca0eb43e</anchor>
      <arglist>(mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velW</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>a2c973c62cabf96b73042047669579a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>a1807fabd299a82e90c22e43cde3c885f</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::Logger &amp;, const std::string &amp;category) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__observers_1_1KinematicInertialObserver.html</anchorfile>
      <anchor>a230a352457d5b0b03d57ead4b7f1a292</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::gui::StateBuilder &amp;, const std::vector&lt; std::string &gt; &amp;category) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::KinematicInertialPoseObserver</name>
    <filename>structmc__observers_1_1KinematicInertialPoseObserver.html</filename>
    <base>mc_observers::Observer</base>
    <member kind="function">
      <type></type>
      <name>KinematicInertialPoseObserver</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a5f02e8385441a9bd528692217ebe27bc</anchor>
      <arglist>(const std::string &amp;type, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>abea98fd588b27d2e403a9c6016ea483a</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a5564591fc150e119fbfe35991031c7da</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a91574e17a50e7d77a05835335accc0ec</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a17ff8ce022b0eaf92d9f0ffb8ed66619</anchor>
      <arglist>(mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>posW</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a5bf8eadeba583a5e22559cba9f68bc7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a4ee29f149c87cc108b3d442e65dd01c9</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::Logger &amp;, const std::string &amp;category) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>ad4fcb1e52c9369c8b22e565d695edfd1</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::gui::StateBuilder &amp;, const std::vector&lt; std::string &gt; &amp;category) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>estimateOrientation</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a6b6a2d32b41691feec87fbff77276731</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const mc_rbdyn::Robot &amp;realRobot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>estimatePosition</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>af4516c687fb2683eea570e5afc926165</anchor>
      <arglist>(const mc_control::MCController &amp;ctl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>mergeRoll1Pitch1WithYaw2</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>ad2349c169584c20be6c8e80e361f1724</anchor>
      <arglist>(const Eigen::Matrix3d &amp;R1, const Eigen::Matrix3d &amp;R2, double epsilonAngle=1e-16)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>robot_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a7c4c9801de6c5b5dfca453e47a13132f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>realRobot_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a2443f434baf71da5973e9aa27b9b4fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>imuSensor_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a53e962c7b77f5162ffbd2f573156a239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>anchorFrameFunction_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a5764a9e879bc0a36b86fac6a4dba1766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_0_anchorFrame_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a983d036629ae49c8bee92ef45406be13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_0_anchorFrameReal_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>aea4ba33860b43e6a2438b3478e8df21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxAnchorFrameDiscontinuity_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a1835f044c542fd67351022c873f2d29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>anchorFrameJumped_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a0962069b8dd23329e068a7d3234fd8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>firstIter_</name>
      <anchorfile>structmc__observers_1_1KinematicInertialPoseObserver.html</anchorfile>
      <anchor>a99b1513ac739b395e903f8f414ad1b10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::KinematicsConstraint</name>
    <filename>structmc__solver_1_1KinematicsConstraint.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>KinematicsConstraint</name>
      <anchorfile>structmc__solver_1_1KinematicsConstraint.html</anchorfile>
      <anchor>ae4fa119dd4f6643ea9bfd6e71d100e48</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinematicsConstraint</name>
      <anchorfile>structmc__solver_1_1KinematicsConstraint.html</anchorfile>
      <anchor>a8e18bf7aa8ff9324f2c12163ec26e784</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep, const std::array&lt; double, 3 &gt; &amp;damper, double velocityPercent=0.5)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolverImpl</name>
      <anchorfile>structmc__solver_1_1KinematicsConstraint.html</anchorfile>
      <anchor>a06616183807eb79abc5cf88ef2b02f97</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromSolverImpl</name>
      <anchorfile>structmc__solver_1_1KinematicsConstraint.html</anchorfile>
      <anchor>a3751b44937ce331f390feae67cae798c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::void_ptr</type>
      <name>constraint_</name>
      <anchorfile>structmc__solver_1_1KinematicsConstraint.html</anchorfile>
      <anchor>a6444ac62b2a85edcbd3f49d86b53ff31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::LabelImpl</name>
    <filename>structmc__rtc_1_1gui_1_1LabelImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>LabelImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LabelImpl.html</anchorfile>
      <anchor>a8d875328b3e6dcc3d22287cdc7b65d9f</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LabelImpl.html</anchorfile>
      <anchor>aa27962fafec53add87be74c45388891a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LabelImpl.html</anchorfile>
      <anchor>a4701d75e61153ae03eb9137a254e603f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::lambda_traits</name>
    <filename>structmc__rtc_1_1internal_1_1lambda__traits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...) const &gt;</name>
    <filename>structmc__rtc_1_1internal_1_1lambda__traits_3_01RetT_07C_1_1_5_08_07Args_8_8_8_08_01const_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>std::function&lt; RetT(Args...)&gt;</type>
      <name>fn_t</name>
      <anchorfile>structmc__rtc_1_1internal_1_1lambda__traits_3_01RetT_07C_1_1_5_08_07Args_8_8_8_08_01const_01_4.html</anchorfile>
      <anchor>ac1c1ac09e955e6e155ee38a3114908c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...)&gt;</name>
    <filename>structmc__rtc_1_1internal_1_1lambda__traits_3_01RetT_07C_1_1_5_08_07Args_8_8_8_08_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>std::function&lt; RetT(Args...)&gt;</type>
      <name>fn_t</name>
      <anchorfile>structmc__rtc_1_1internal_1_1lambda__traits_3_01RetT_07C_1_1_5_08_07Args_8_8_8_08_4.html</anchorfile>
      <anchor>a41b09899ae7e27ef7427ce4b6968ea9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::LeakyIntegrator</name>
    <filename>structmc__filter_1_1LeakyIntegrator.html</filename>
    <templarg>VectorT</templarg>
    <member kind="function">
      <type></type>
      <name>LeakyIntegrator</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>aa7768ba3fcbdb293ff11e389f5161826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>a5d1fe6b17b1cab5807291e292f25b778</anchor>
      <arglist>(const VectorT &amp;value, double dt)</arglist>
    </member>
    <member kind="function">
      <type>const VectorT &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>af225809442be54a20499760103efa8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rate</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>aebcd30857d45fde67e66651ff62c0376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rate</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>a1c6f1172e2ed09d564b4df366e5d7f21</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>aa8cf04d67353d666454a4e5f689ace5e</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>a0e45cd463d07d4659224c0c3a53be35c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LeakyIntegrator&lt; Eigen::Vector3d &gt;</name>
    <filename>structmc__filter_1_1LeakyIntegrator.html</filename>
    <member kind="function">
      <type></type>
      <name>LeakyIntegrator</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>aa7768ba3fcbdb293ff11e389f5161826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>a5d1fe6b17b1cab5807291e292f25b778</anchor>
      <arglist>(const Eigen::Vector3d &amp;value, double dt)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>af225809442be54a20499760103efa8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rate</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>aebcd30857d45fde67e66651ff62c0376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rate</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>a1c6f1172e2ed09d564b4df366e5d7f21</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>aa8cf04d67353d666454a4e5f689ace5e</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LeakyIntegrator.html</anchorfile>
      <anchor>a0e45cd463d07d4659224c0c3a53be35c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::Limits</name>
    <filename>structmc__tvm_1_1Limits.html</filename>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>ql</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a2360ec17c689110e4ab9cca8186937d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>qu</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a011ef48653dbc8c46052612c5654a837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>vl</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a6fc408083c8b2d61bb6735c4f9aa23f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>vu</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a86d01f7b1e4daaa205354192fe06e724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>al</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a6f64ade1725764661ecbd7e26c6a66ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>au</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a2abbf0a708ea442dfce810a7c23eb2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>jl</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a44f23d9779ab8fa65be10e166cfc7ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>ju</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>a8b2917ef4d7494d3e87f7fcd41066dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>tl</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>ae18aaf69112fa76e0492dcdd6f616bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>tu</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>ab320ea6e9577825f5da0af26db8bb6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>tdl</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>aa174eb77fff84c78b6bcd885f641a186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>tdu</name>
      <anchorfile>structmc__tvm_1_1Limits.html</anchorfile>
      <anchor>abddd453ae6f7d9328d360b207a227432</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::LinearInterpolation</name>
    <filename>structmc__trajectory_1_1LinearInterpolation.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmc__trajectory_1_1LinearInterpolation.html</anchorfile>
      <anchor>a283b5bb138c051d1a3e3ef6d7690dedf</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, double t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearInterpolation&lt; Eigen::Vector6d &gt;</name>
    <filename>structmc__trajectory_1_1LinearInterpolation.html</filename>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>operator()</name>
      <anchorfile>structmc__trajectory_1_1LinearInterpolation.html</anchorfile>
      <anchor>a283b5bb138c051d1a3e3ef6d7690dedf</anchor>
      <arglist>(const Eigen::Vector6d &amp;v1, const Eigen::Vector6d &amp;v2, double t) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::LineConfig</name>
    <filename>structmc__rtc_1_1gui_1_1LineConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>LineConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a15dd7cd44bf0edc5b475448de6e26451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a0ba859719a9ff99290fec7b8e8add72b</anchor>
      <arglist>(const Color &amp;color, double width=0.01, const LineStyle &amp;style=LineStyle::Solid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a05fe24ecd21753185e6da09151f35ce2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>ad4aeb44edfd21ecdce924ab1a0f52f19</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>abe7b4faea6ac146c6897af4c863fdf18</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>saveConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>abbb100a82d14ff110a122854fed43e8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a2845b8dfdbdaeb72cb473086c6bdf8a7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a76ab2e9dcb6923c3877c2822dec478dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a4f88bdc8e23bf720a90553abaca4d6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>width</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a57cd8fdd493c21993724fe26828cf47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineStyle</type>
      <name>style</name>
      <anchorfile>structmc__rtc_1_1gui_1_1LineConfig.html</anchorfile>
      <anchor>a2678eadbdc5908c80e0dcc9c39941a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::Loader</name>
    <filename>structmc__rtc_1_1Loader.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, LTDLHandlePtr &gt;</type>
      <name>handle_map_t</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>a9c2401890571dbbde00eda2fb1e87710</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const std::string &amp;, LTDLHandle &amp;)&gt;</type>
      <name>callback_t</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>ae88a2f28e5fa458257316949fd08a539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static callback_t</type>
      <name>default_cb</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>a2569410b656743e1d955a9aafc7ee793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>debug_suffix</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>a37f09e171d6297368bc91ee901f2cb64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>init</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>a2d478e04efaa0d71d340ed45577b478a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>a63ca4850e72fbb0ea10d1362c5402a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>load_libraries</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>a9611f8c05257ffd4651e68ea2f4f7e68</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, handle_map_t &amp;out, bool verbose, callback_t cb)</arglist>
      <docanchor file="structmc__rtc_1_1Loader">loader_load_libraries_doc</docanchor>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>ObjectLoader</name>
      <anchorfile>structmc__rtc_1_1Loader.html</anchorfile>
      <anchor>a0b9f840f1f1352debe8e77115e2454b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::LoaderException</name>
    <filename>structmc__rtc_1_1LoaderException.html</filename>
    <member kind="function">
      <type></type>
      <name>LoaderException</name>
      <anchorfile>structmc__rtc_1_1LoaderException.html</anchorfile>
      <anchor>a52e22f0a82bd6634d02ca30961643c25</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>structmc__rtc_1_1LoaderException.html</anchorfile>
      <anchor>a2db77040caace4fc6f15e231a328a608</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::LoadRobotParameters</name>
    <filename>structmc__rbdyn_1_1LoadRobotParameters.html</filename>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robot</name>
      <anchorfile>structmc__rbdyn_1_1LoadRobotParameters.html</anchorfile>
      <anchor>ad03b49f51df2ba1d492ced03d923fdd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Logger</name>
    <filename>structmc__rtc_1_1Logger.html</filename>
    <class kind="struct">mc_rtc::Logger::KeyAddedEvent</class>
    <class kind="struct">mc_rtc::Logger::KeyRemovedEvent</class>
    <member kind="enumeration">
      <type></type>
      <name>Policy</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a0fefb36635930cf5a9db966442756b9b</anchor>
      <arglist></arglist>
      <enumvalue file="structmc__rtc_1_1Logger.html" anchor="a0fefb36635930cf5a9db966442756b9ba1515271d5edd3952e5aa146109a98e78">NON_THREADED</enumvalue>
      <enumvalue file="structmc__rtc_1_1Logger.html" anchor="a0fefb36635930cf5a9db966442756b9ba1ba1ba2bd2141794d82c4363b7e533f7">THREADED</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(mc_rtc::MessagePackBuilder &amp;)&gt;</type>
      <name>serialize_fn</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a6fd0d1237a81647e462f7af2b4225d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::variant&lt; KeyAddedEvent, KeyRemovedEvent &gt;</type>
      <name>LogEvent</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a3d000eb7adffb8f9a0a016466f232e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a18ce85d2d7612f7029b47a3931c72316</anchor>
      <arglist>(const Policy &amp;policy, const std::string &amp;directory, const std::string &amp;tmpl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Logger</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a7692f0ca12a02805cba83a9422de5a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a986b2719c1337aa9d1e84e2b0b34481c</anchor>
      <arglist>(const Policy &amp;policy, const std::string &amp;directory, const std::string &amp;tmpl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a93a57921c9019097a0903b86d0ba7571</anchor>
      <arglist>(const std::string &amp;ctl_name, double timestep, bool resume=false, double start_t=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>acf6c621790b393b717c9a6b0c0ec0394</anchor>
      <arglist>(const std::string &amp;file, double timestep, double start_t=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>aec88caf27ebb9c9615ed4fd51d9ccd98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogEntry</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a1ac561eb83965fa394393d5f48cf2d8e</anchor>
      <arglist>(const std::string &amp;name, const SourceT *source, CallbackT &amp;&amp;get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogEntry</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>ae7cc40f50bb8edbcc79c06476f7a4540</anchor>
      <arglist>(const std::string &amp;name, const SourceT *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogEntry</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>ae7cc40f50bb8edbcc79c06476f7a4540</anchor>
      <arglist>(const std::string &amp;name, const SourceT *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogEntry</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a1281ebd02828e3e56a41e013867a0cb8</anchor>
      <arglist>(const std::string &amp;name, T &amp;&amp;get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogEntries</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a6c2708ce7007adcfe7eca5cc3d8f1801</anchor>
      <arglist>(const SourceT *source, const std::string &amp;name, CallbackT &amp;&amp;get_fn, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLogEntry</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a2b1427e1251ebbd90947468fc4bdf964</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLogEntries</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a5299ba868f3a7b643978caa1620f19fe</anchor>
      <arglist>(const void *source)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>t</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>aeb0d9597ada6a67eb2a89fcda8c74e7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>path</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a89fb05a7430fab3ebe3ccb5061dddc60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a2c33c14a348ab11f39ab33056078e4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a0741f5b75b8a3b54ed0f761b546e13e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>magic</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>ae70a958cf17138f9b726740deab0d34c</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>version</name>
      <anchorfile>structmc__rtc_1_1Logger.html</anchorfile>
      <anchor>a261a53cc69d6192d20ea03ecb94c3f55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::LogWriter</name>
    <filename>structmc__rtc_1_1log_1_1LogWriter.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1log_1_1LogWriter.html</anchorfile>
      <anchor>ac76dfb54b68fb04d65d6fcb1cb6e061d</anchor>
      <arglist>(const T &amp;data, mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::LookAtFrameTask</name>
    <filename>structmc__tasks_1_1LookAtFrameTask.html</filename>
    <base>mc_tasks::LookAtTask</base>
    <member kind="function">
      <type></type>
      <name>LookAtFrameTask</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>aaa82fc728893b07fc39bd710f5825d7b</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const Eigen::Vector3d &amp;frameVector, const mc_rbdyn::Frame &amp;target, double stiffness=0.5, double weight=200.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookAtFrameTask</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>ad198c5944a3e534196c8833781eb3fd8</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, unsigned int surfaceRobotIndex, const std::string &amp;surfaceName, double stiffness=0.5, double weight=200)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>a3d6e4349e8e324fbb76419d13c463521</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>offset</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>ac4aeca4b3300bd4484051bf041f69efa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>ae0a604daef3084247fe5c3fef3926bb3</anchor>
      <arglist>(const sva::PTransformd &amp;off) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>a906f567d08a0e34110c750fe791f68f8</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstFramePtr</type>
      <name>target_</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>a49f0fece5eb474b86986e9d59c01300c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>offset_</name>
      <anchorfile>structmc__tasks_1_1LookAtFrameTask.html</anchorfile>
      <anchor>a2cfd76aef2c88a3c411eaeef9e50fdb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::LookAtTask</name>
    <filename>structmc__tasks_1_1LookAtTask.html</filename>
    <base>mc_tasks::VectorOrientationTask</base>
    <member kind="function">
      <type></type>
      <name>LookAtTask</name>
      <anchorfile>structmc__tasks_1_1LookAtTask.html</anchorfile>
      <anchor>ad8e9f85a189339ae9e88b6db28636c03</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const Eigen::Vector3d &amp;frameVector, double stiffness=2.0, double weight=500.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookAtTask</name>
      <anchorfile>structmc__tasks_1_1LookAtTask.html</anchorfile>
      <anchor>aa8ac514e5194309507f7032f47c0cbd4</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetPos, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookAtTask</name>
      <anchorfile>structmc__tasks_1_1LookAtTask.html</anchorfile>
      <anchor>a6ab5055c130fd2813d825c7bcd508fb9</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1LookAtTask.html</anchorfile>
      <anchor>abe25dfb65d85b23932ca41150a9f97a6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1LookAtTask.html</anchorfile>
      <anchor>a99e4cc8d6d381936d58bc7675dea901a</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1LookAtTask.html</anchorfile>
      <anchor>acdb7b5c10685b0a725af082547b473c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1LookAtTask.html</anchorfile>
      <anchor>aca990900b9de5525e0c85f3ad8859b3d</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::LookAtTFTask</name>
    <filename>structmc__tasks_1_1LookAtTFTask.html</filename>
    <base>mc_tasks::LookAtTask</base>
    <member kind="function">
      <type></type>
      <name>LookAtTFTask</name>
      <anchorfile>structmc__tasks_1_1LookAtTFTask.html</anchorfile>
      <anchor>a99f87ba3d72d5c2e019e35c8637821f4</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const Eigen::Vector3d &amp;frameVector, const std::string &amp;sourceFrame, const std::string &amp;targetFrame, double stiffness=0.5, double weight=200)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookAtTFTask</name>
      <anchorfile>structmc__tasks_1_1LookAtTFTask.html</anchorfile>
      <anchor>aad7bb499a5ca16373eb9420ee5ac33ab</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const std::string &amp;sourceFrame, const std::string &amp;targetFrame, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=0.5, double weight=200)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1LookAtTFTask.html</anchorfile>
      <anchor>a15ea55b0712695f2b46284710b49aad1</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::LowPass</name>
    <filename>structmc__filter_1_1LowPass.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>LowPass</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3ddcbbc84aae62aad621a14a91c39bf</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac48741a383af10509d4678c5a0673f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac3c92851291e84d2347271125877dc0c</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>af9ccdd55e5d7f3beabcf4c26bcea9620</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a03ab891a2b1f5cd2fd2398b7016ba633</anchor>
      <arglist>(const T &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a543781fd1c5ec7b653de6e2189de8fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a41bcea9e9de194a6816f03cacbd534dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3cde740d8c36a8e683eeae38bb4bc00</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a54232494fa4fa74a08d85acf3f95ab7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowPass&lt; Eigen::Vector3d &gt;</name>
    <filename>structmc__filter_1_1LowPass.html</filename>
    <member kind="function">
      <type></type>
      <name>LowPass</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3ddcbbc84aae62aad621a14a91c39bf</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac48741a383af10509d4678c5a0673f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac3c92851291e84d2347271125877dc0c</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>af9ccdd55e5d7f3beabcf4c26bcea9620</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a03ab891a2b1f5cd2fd2398b7016ba633</anchor>
      <arglist>(const Eigen::Vector3d &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a543781fd1c5ec7b653de6e2189de8fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a41bcea9e9de194a6816f03cacbd534dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3cde740d8c36a8e683eeae38bb4bc00</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a54232494fa4fa74a08d85acf3f95ab7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowPass&lt; sva::ForceVecd &gt;</name>
    <filename>structmc__filter_1_1LowPass.html</filename>
    <member kind="function">
      <type></type>
      <name>LowPass</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3ddcbbc84aae62aad621a14a91c39bf</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac48741a383af10509d4678c5a0673f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac3c92851291e84d2347271125877dc0c</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>af9ccdd55e5d7f3beabcf4c26bcea9620</anchor>
      <arglist>(const sva::ForceVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a03ab891a2b1f5cd2fd2398b7016ba633</anchor>
      <arglist>(const sva::ForceVecd &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a543781fd1c5ec7b653de6e2189de8fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a41bcea9e9de194a6816f03cacbd534dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3cde740d8c36a8e683eeae38bb4bc00</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a54232494fa4fa74a08d85acf3f95ab7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowPass&lt; sva::MotionVecd &gt;</name>
    <filename>structmc__filter_1_1LowPass.html</filename>
    <member kind="function">
      <type></type>
      <name>LowPass</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3ddcbbc84aae62aad621a14a91c39bf</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac48741a383af10509d4678c5a0673f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ac3c92851291e84d2347271125877dc0c</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>af9ccdd55e5d7f3beabcf4c26bcea9620</anchor>
      <arglist>(const sva::MotionVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a03ab891a2b1f5cd2fd2398b7016ba633</anchor>
      <arglist>(const sva::MotionVecd &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a543781fd1c5ec7b653de6e2189de8fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a41bcea9e9de194a6816f03cacbd534dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>ae3cde740d8c36a8e683eeae38bb4bc00</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1LowPass.html</anchorfile>
      <anchor>a54232494fa4fa74a08d85acf3f95ab7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::LowPassCompose</name>
    <filename>structmc__filter_1_1LowPassCompose.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>LowPassCompose</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a7e0a3a63985bcbe4304ce4b1314ae0e6</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a80c33c72f2aea1d2c1d74b2cfd3d63bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a2dd78dbccd35a9a733811b29ddb6b6a3</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a7f46ce62deea611cc28c1e2ceb4af642</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a9fd2155357d9c895023db9abbf420083</anchor>
      <arglist>(const T &amp;newValue_hp, const T &amp;newValue_lp)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>ae9f7ed9268b1cd1c1c95003dc9dd7971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>input_lp</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a72e203e4ce83a77ee216885e32a3ee3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>input_hp</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>ab8e31710e639fcbcd906a3404cfb51b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a17ccf94bb433a45d1f577ad6fbf4211e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>ad557a04cb22cea4ed06206997d17e894</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a1d92b23e03b65ae1fac33a54ebc7d08a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowPassCompose&lt; Eigen::Vector3d &gt;</name>
    <filename>structmc__filter_1_1LowPassCompose.html</filename>
    <member kind="function">
      <type></type>
      <name>LowPassCompose</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a7e0a3a63985bcbe4304ce4b1314ae0e6</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a80c33c72f2aea1d2c1d74b2cfd3d63bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a2dd78dbccd35a9a733811b29ddb6b6a3</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a7f46ce62deea611cc28c1e2ceb4af642</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a9fd2155357d9c895023db9abbf420083</anchor>
      <arglist>(const Eigen::Vector3d &amp;newValue_hp, const Eigen::Vector3d &amp;newValue_lp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>ae9f7ed9268b1cd1c1c95003dc9dd7971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>input_lp</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a72e203e4ce83a77ee216885e32a3ee3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>input_hp</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>ab8e31710e639fcbcd906a3404cfb51b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a17ccf94bb433a45d1f577ad6fbf4211e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dt</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>ad557a04cb22cea4ed06206997d17e894</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__filter_1_1LowPassCompose.html</anchorfile>
      <anchor>a1d92b23e03b65ae1fac33a54ebc7d08a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::LowPassFiniteDifferences</name>
    <filename>structmc__filter_1_1LowPassFiniteDifferences.html</filename>
    <templarg></templarg>
    <base>mc_filter::LowPass</base>
    <member kind="typedef">
      <type>LowPass&lt; T &gt;</type>
      <name>LowPassT</name>
      <anchorfile>structmc__filter_1_1LowPassFiniteDifferences.html</anchorfile>
      <anchor>aaac75c58b8f9680abe5bd377c9701253</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LowPassFiniteDifferences</name>
      <anchorfile>structmc__filter_1_1LowPassFiniteDifferences.html</anchorfile>
      <anchor>a6b34f60855856174042323741e8ca777</anchor>
      <arglist>(double dt, double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1LowPassFiniteDifferences.html</anchorfile>
      <anchor>a2e407b95655d11d8cc0e07b127670771</anchor>
      <arglist>(const T &amp;pos, const T &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1LowPassFiniteDifferences.html</anchorfile>
      <anchor>a48566df5537776a9c6fa06de4181fada</anchor>
      <arglist>(const T &amp;newPos)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>prevValue</name>
      <anchorfile>structmc__filter_1_1LowPassFiniteDifferences.html</anchorfile>
      <anchor>a8f494156496ade7966576d36e01da12d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>prevValue_</name>
      <anchorfile>structmc__filter_1_1LowPassFiniteDifferences.html</anchorfile>
      <anchor>a04124d30b5fc9745746a89f4dcad802e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::LTDLHandle</name>
    <filename>structmc__rtc_1_1LTDLHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>LTDLHandle</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>a1d2ebbcff7e52decbb18a9dc96b7671b</anchor>
      <arglist>(const std::string &amp;class_name, const std::string &amp;path, const std::string &amp;rpath, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LTDLHandle</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>ac3f676e1ef23ac13767069ebf1018af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LTDLHandle</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>aeb254d88dad0c357ba003eb2ef458556</anchor>
      <arglist>(const LTDLHandle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LTDLHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>ab5ad49d16629787bd61589dbf4924c4e</anchor>
      <arglist>(const LTDLHandle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SymT</type>
      <name>get_symbol</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>ac9e807398c51fe641aa12610ee1d35fc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>aad84c0ae1a67095338adf0205ee6cbfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>classes</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>a5027f7059635b26c598d8547787c70da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>path</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>aab506987ae59f5623e4875126b3ad06b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dir</name>
      <anchorfile>structmc__rtc_1_1LTDLHandle.html</anchorfile>
      <anchor>a3361bcbea28569d1da56e78a253d115b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::LTDLMutex</name>
    <filename>structmc__rtc_1_1LTDLMutex.html</filename>
    <member kind="variable" static="yes">
      <type>static std::mutex</type>
      <name>MTX</name>
      <anchorfile>structmc__rtc_1_1LTDLMutex.html</anchorfile>
      <anchor>afcfeb223cb286a46632179f71671c26f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::MCController</name>
    <filename>structmc__control_1_1MCController.html</filename>
    <class kind="struct">mc_control::MCController::DeprecatedAnchorFrame</class>
    <member kind="typedef">
      <type>mc_solver::QPSolver::Backend</type>
      <name>Backend</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a854fd50e7f3b75b30a422a5a1a75d42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MCController</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>adbb448aeae9565e56d32cf50067dc9ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a9fcbf5dd454a9300a4d16e75549e22b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createObserverPipelines</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a023985cee8da531d5426a65fa6c613e6</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>runObserverPipelines</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a49fc72e5be121546b68cd1d8b4edccc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resetObserverPipelines</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae47b233aee0c9428445ead4f9e57eb4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObserverPipeline</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>af3caf78b3601e0806d9ebf6cfe9b5e5e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObserverPipeline</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ac6529a8c099a0c775a7c99514086544b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_observers::ObserverPipeline &gt; &amp;</type>
      <name>observerPipelines</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a3a382908f04c5b6a741b51ccfeb8b2bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; mc_observers::ObserverPipeline &gt; &amp;</type>
      <name>observerPipelines</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>adc6ace5546e8de7efae897965ac0c133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_observers::ObserverPipeline &amp;</type>
      <name>observerPipeline</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a8d899edca3c7090efa847f9975f4b1bc</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>mc_observers::ObserverPipeline &amp;</type>
      <name>observerPipeline</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a4bf14f9d37dd91c6d2fc35e9e312cfc8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const mc_observers::ObserverPipeline &amp;</type>
      <name>observerPipeline</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0abd8eaa6dac11ce547701c6998f9a9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_observers::ObserverPipeline &amp;</type>
      <name>observerPipeline</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>add87a6181792e773d082954a5a533b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a7d9a2ee7d9c553bc3ced736b7ee9a3e7</anchor>
      <arglist>(mc_solver::FeedbackType fType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a94ad5bc971729e691d57c711f6fac88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a3c4ebbba1c40f48c3e9f3d35e2f7e432</anchor>
      <arglist>(const ControllerResetData &amp;reset_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollisions</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a5b18800fa1afe04bd4907d27a2115415</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;collisions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisions</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a756482ec8b98db7dc81a18e6f2c94a8a</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;collisions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisions</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0389c011f6c7085b3c46918fa69f6dad</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addContact</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a1554bc52dc85cb3757baa7e2ee952487</anchor>
      <arglist>(const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeContact</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae4f6a7f58f86388010999c29972dd5f4</anchor>
      <arglist>(const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearContacts</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0ae78cb1de1f0f3e4beab180cfc0bd73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ContactSet &amp;</type>
      <name>contacts</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a518047dbed9be076844193c312dfc791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContact</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a03c94ba02ba9428b4804c6c1a221f721</anchor>
      <arglist>(const Contact &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>afaa78577373a2362772543b2b6c12b40</anchor>
      <arglist>(const std::string &amp;robot) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae45b98b34b9c614d9eb3aaa86371f53d</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_robots_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a628684adf3f6e304077a376c6b955626</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_solver::QPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2ba815b606908b3c2798234812bbecf4</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_qpsolver_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_solver::QPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ac04f6067bb9aa467f914fc202676e8bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Logger &amp;</type>
      <name>logger</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab35bed98f155238c6df771595cc2b939</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt;</type>
      <name>gui</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae0156b939ab3f41184257ec763988c93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::DataStore &amp;</type>
      <name>datastore</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>af8bcfa30a03911b0e31373ebcf2b4e24</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rtc::DataStore &amp;</type>
      <name>datastore</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab79d84107b2223df41dab5679efb017d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>supported_robots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab071255e2e17b62e05aec6f67d88ce44</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>loadRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a3110512ea26812d8a58d3945e739c751</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr rm, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aea29ca137334fbf6d9aefdc426ad1184</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration &amp;</type>
      <name>config</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aca6f0bb79c273474a9e6ed524ff4d33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rtc::Configuration &amp;</type>
      <name>config</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a7d12aa9497219df451e115d53e62bcd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Gripper &amp;</type>
      <name>gripper</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a64c51eba81ba10f77a9281041b706fac</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;gripper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anchorFrame</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a30b4488e0cfd3fdbba775ba38766703b</anchor>
      <arglist>(const sva::PTransformd &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anchorFrameReal</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>abac248c9494ff8e4e5cc7bc2816fbad0</anchor>
      <arglist>(const sva::PTransformd &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>anchorFrame</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a33b108398428ad6ad8619ca25d8e3029</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>anchorFrameReal</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae736f4f84fcbea832107c350efece532</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>robot_config</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a57eef25de6183e0e9ee95c56b52e2b30</anchor>
      <arglist>(const std::string &amp;robot_name) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>robot_config</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a7d1458be920670236c06055142f7cd23</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>acfd9a66de7436236e8f18f609d540335</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a81f29a3cfb16a760a8055af259ad816b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a6784579e052281787348a47eb3113943</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_robot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae49802b3de0837b6c43b8fac4174480e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ad90423e437af145cf9163b556aa611cb</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_env_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab00874f83e2bad308801656301018cb8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0300e29b876797fe06dd7c16c971905d</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_real_robots_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a782b17730a57144b815c8b4f5cceccc9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a4102d10f1ab1d631e010b0424509c1d3</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_real_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2963e586daefa5602cd71756be0e2a63</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0a3a3bbc225e57c006dc2caaad5b9973</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_realRobot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aeccb28ff63147f9cf19a67eb73546a27</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>outputRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ad743c41c4c0ec7a351f387f6ebf2767e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>outputRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a8acf876963e88e4100b80b9ad589d762</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ad8e60fcd8bc61def814c2bf1121d5fee</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_output_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab4e6a2d9cba993718c4b25c754403b85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a060e9f6c8402de1d0d37b13f570cc8c1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_outputRobot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2e8a9481f16e0accfece637e13060745</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>outputRealRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a55b0f3d5665621fdc7f34951a429905f</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_output_real_robots_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>outputRealRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a282081d4de374d22bfc04f3aaae1a1bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a24e996fa1da0b182546e44ca000136e7</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_output_real_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a18d296efa2e989b1b0a92cbb9a21430e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a16ddd24ea64b2dd9c808b4a5eab52a3d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_outputRealRobot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0d60a9910007f631da04c3ef658520ce</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_loading_location</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a79533fd245db86634006b825e0f6ebf5</anchor>
      <arglist>(std::string_view location)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_name</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a6ee461e0067b75d12e2a3fb2b99dda6d</anchor>
      <arglist>(std::string_view name)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>timeStep</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae5f48849d9e4d7ed3a1f02a1380a7fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::unique_ptr&lt; mc_solver::ContactConstraint &gt;</type>
      <name>contactConstraint</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0a24d4d8f93d58d9d6bc387d7585a9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::unique_ptr&lt; mc_solver::DynamicsConstraint &gt;</type>
      <name>dynamicsConstraint</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a160000a6494473e0002d2fc618406ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::unique_ptr&lt; mc_solver::KinematicsConstraint &gt;</type>
      <name>kinematicsConstraint</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ad24355323dfbaf797edafe04586b9dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::unique_ptr&lt; mc_solver::CollisionsConstraint &gt;</type>
      <name>selfCollisionConstraint</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a3f37903af5e6a3806018826f196f28ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::unique_ptr&lt; mc_solver::CompoundJointConstraint &gt;</type>
      <name>compoundJointConstraint</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2eb94d4003e90bb71b4d600443045787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_tasks::PostureTask &gt;</type>
      <name>postureTask</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a3d17bb7e20af4d312617d7d5f6288889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>name_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a098fd4d2fd8339d20a585389019940cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>loading_location_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a386949ec1993532e88b2fee0719820a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::tuple&lt; std::string, std::string, std::string, std::string, std::string, double &gt;</type>
      <name>ContactTableDataT</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a08f926e0caf69e427332ebcb95257e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::chrono::duration&lt; double, std::milli &gt;</type>
      <name>duration_ms</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a5bd5718a3b2acc5933161f12a03cd00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a5e7fd09430e519c1bcb4e527bdbf5543</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; robot, double dt, ControllerParameters params={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2b6a6f913f0bd3fc5ca43b5a43978327</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; robot, double dt, const mc_rtc::Configuration &amp;config, ControllerParameters params={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2a5755e56c9afd7cb7ca3bd06b67a1a2</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;&gt; &amp;robot_modules, double dt, ControllerParameters params={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aee37a0705a5659b64a7e0ff1fa6b62b6</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;&gt; &amp;robot_modules, double dt, const mc_rtc::Configuration &amp;config, ControllerParameters params={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>loadRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>af5e7664c119aa760e63927f2df193927</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr rm, const std::string &amp;name, mc_rbdyn::Robots &amp;robots, const mc_rbdyn::LoadRobotParameters &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addRobotToLog</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab3c033438648c65e4f7aa29300b41603</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addRobotToGUI</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aa494450b7b8e405cbdc4b2b493988008</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateContacts</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a4a26e878c32b5821c12a634114ff160a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_solver::QPSolver &gt;</type>
      <name>qpsolver</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a4523facc71906c6622227d0fa2597963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::RobotsPtr</type>
      <name>outputRobots_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aacbfcf3ecd0fc3aeec5cc4b9611e3324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::RobotsPtr</type>
      <name>outputRealRobots_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a389be3c7a5ded058156621b73cb240a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_rbdyn::RobotConverter &gt;</type>
      <name>converters_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae3dfca5993f1e6fe3467fa3cf4c8fcc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_observers::ObserverPipeline &gt;</type>
      <name>observerPipelines_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab3eedc56410fb67db9057a766686243a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_rtc::Logger &gt;</type>
      <name>logger_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a5de6a08cbbe04ccc032bc4ebbd2773dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt;</type>
      <name>gui_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a5761e783caf225454e03628b2533fc13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>adbb3001e8874fedbdc2b71a0db93965c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::DataStore</type>
      <name>datastore_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a40233bd6dab6721085d266e1dc306de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_solver::ConstraintSetPtr &gt;</type>
      <name>constraints_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a22dcf52d8a93d0375a3338fa692c31b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_solver::ContactConstraint &gt;</type>
      <name>contact_constraint_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aae17a7ca719068e77b4e1946582a5841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::pair&lt; std::string, std::string &gt;, std::shared_ptr&lt; mc_solver::CollisionsConstraint &gt; &gt;</type>
      <name>collision_constraints_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae1fe9557c49461d939183a4b1f00f3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContactSet</type>
      <name>contacts_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>af791c0b95647f3a3a9f38851e23ea2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>contacts_changed_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a5658afe35311b0458ad2a6795fa41fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ContactTableDataT &gt;</type>
      <name>contacts_table_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a3a4fde3d3917343a367aa14533953be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>duration_ms</type>
      <name>updateContacts_dt_</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a8f92d8a51bb3305bb0afdffac691b941</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>MCGlobalController</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a3e2b38b036ecf0354d551a491d342a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>acfd9a66de7436236e8f18f609d540335</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a81f29a3cfb16a760a8055af259ad816b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a6784579e052281787348a47eb3113943</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_robot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ae49802b3de0837b6c43b8fac4174480e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ad90423e437af145cf9163b556aa611cb</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_env_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab00874f83e2bad308801656301018cb8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0300e29b876797fe06dd7c16c971905d</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_real_robots_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a782b17730a57144b815c8b4f5cceccc9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a4102d10f1ab1d631e010b0424509c1d3</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_real_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2963e586daefa5602cd71756be0e2a63</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0a3a3bbc225e57c006dc2caaad5b9973</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_realRobot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>aeccb28ff63147f9cf19a67eb73546a27</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>outputRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ad743c41c4c0ec7a351f387f6ebf2767e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>outputRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a8acf876963e88e4100b80b9ad589d762</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ad8e60fcd8bc61def814c2bf1121d5fee</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_output_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>ab4e6a2d9cba993718c4b25c754403b85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a060e9f6c8402de1d0d37b13f570cc8c1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_outputRobot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a2e8a9481f16e0accfece637e13060745</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>outputRealRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a55b0f3d5665621fdc7f34951a429905f</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_output_real_robots_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>outputRealRobots</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a282081d4de374d22bfc04f3aaae1a1bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a24e996fa1da0b182546e44ca000136e7</anchor>
      <arglist>() const noexcept</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_output_real_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a18d296efa2e989b1b0a92cbb9a21430e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a16ddd24ea64b2dd9c808b4a5eab52a3d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
      <docanchor file="structmc__control_1_1MCController">mc_controller_outputRealRobot_name_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>outputRealRobot</name>
      <anchorfile>structmc__control_1_1MCController.html</anchorfile>
      <anchor>a0d60a9910007f631da04c3ef658520ce</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::MCGlobalController</name>
    <filename>structmc__control_1_1MCGlobalController.html</filename>
    <class kind="struct">mc_control::MCGlobalController::GlobalConfiguration</class>
    <member kind="typedef">
      <type>Eigen::aligned_allocator&lt; std::pair&lt; const std::string, Eigen::Quaterniond &gt; &gt;</type>
      <name>QuaternionMapAllocator</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a865cf8ffa3c30f8936b7e384706cff2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, Eigen::Quaterniond, std::less&lt; std::string &gt;, QuaternionMapAllocator &gt;</type>
      <name>QuaternionMap</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a9710af004519962c8b37f64c6f362c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCGlobalController</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ada6a6704926ff4a94138f54d8bd27180</anchor>
      <arglist>(const std::string &amp;conf=&quot;&quot;, std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; rm=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCGlobalController</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af45e74287a7013436ac01f3f20aed010</anchor>
      <arglist>(const GlobalConfiguration &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MCGlobalController</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a00228c857f39700abeb100a5ae744390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>enabled_controllers</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a9c5570ffc5e37e8f7160ec0defbc091e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>loaded_controllers</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ade9a721cc73a024b045e4f439a6f2cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>loaded_robots</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a4c165732f9165c80c79e9d77a918dcc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;</type>
      <name>get_robot_module</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a2cb9a1a94b61fdaf3369f06b5f4aabd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>current_controller</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5beed5b1e8d4aa37b58c03f510420283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ac49cb563047d30361c781b96ec2a8e5d</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;initq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ad09a57645d0f72046484da7bfb4592c1</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;initq, const std::array&lt; double, 7 &gt; &amp;initAttitude)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>afa22752ce1130d6cc4fc7ab4fef53309</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;initq, const sva::PTransformd &amp;initAttitude)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5630e751af3e2ef1ea72f78b63744bd9</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;initqs={}, const std::map&lt; std::string, sva::PTransformd &gt; &amp;initAttitudes={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ae0b1e4eabca46ba58faef362b03dce49</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;resetqs={}, const std::map&lt; std::string, sva::PTransformd &gt; &amp;resetAttitudes={})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a153432b8c6ebfc4f9484deb1439ca3ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ControllerServer &amp;</type>
      <name>server</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6fa39ac887fc881a4e99c3a30efbb3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MCController &amp;</type>
      <name>controller</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ab0208889660687499cbb3b62b8f22f55</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const MCController &amp;</type>
      <name>controller</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a8e7baccc0ca5a627a7e876291949487d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timestep</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a81d56d40787c8ecff59283a9c85109ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>ref_joint_order</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a79771a3802850528a20d4d35f1d5f271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlobalConfiguration &amp;</type>
      <name>configuration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a0fff6472a1d77b4b4866ff7cad1149a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_controller_module_paths</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ae39ca0ba2da5ea1302ba620208a625eb</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddController</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6d37998fc235be910210d1fb643402df</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddController</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ae523aecb2481a8721dac8bf08780fd75</anchor>
      <arglist>(const std::string &amp;name, std::shared_ptr&lt; mc_control::MCController &gt; controller)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EnableController</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a4a46a8f41797fa4b79632ab4fc24afbd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshLog</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a07310532c70c9cb3087cbbec3a2f14e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>abb317d4970e11c3a477f7eed5522c6e0</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a9b3f65f8e2ba31971f5ba2a7c65d261e</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a1c98e6515e4c33ddaf4f0ef1a1724ef5</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aa2668437899d9b5a213a397cd79488cf</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientation</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ad47e3a62e047053d0f69bf05b5f91b1a</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientation</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a1f2ed270c1f3bda613a8bb8006ed374c</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a10d3410db9986b61837175c73adc6009</anchor>
      <arglist>(const QuaternionMap &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>abd38f947b653b762f0371cf97864acd9</anchor>
      <arglist>(const std::string &amp;robotName, const QuaternionMap &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a40cbc0fdf54504a920b737dd373c2a88</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6c85b7f6d62514f4e6aef17460600d01</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a3ae21b22df5dc2185d3b4f6197f9b887</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a938a5a360f3d97c155975ccfdd36cac9</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a16dd35dd0e4ecc22c1fd04ee4a09f7d5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a0226bfe03137da2817dc804338102eef</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aee1e0c31b2a18df3d803a7befe7c4f1a</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af94a53a2a439ac76a164db341eac135d</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setSensorAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a306120f9dfe11ac53b025c609e39148e</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ac3700efc103aef8819abdc0c444e5895</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ae654a53b3dd0eeab35bb91d06a8e93d8</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a210d931f5f2785d60bfb0a23408ba389</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a96f16e96cb41a0bf1edfa2d48f427bc8</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a8c38d4793edb8d7c910be3e80b348f7b</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a81741b8b19919c98fb7998372f902535</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a43b68df5a0d8994ec19f5e6ecd4c0dcc</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5feda63896222cd0dac12dfeb73c7354</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a143974b4fba7876bc84a14c1cd5aa9ee</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderValues</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a2703ab87cc9556a1f18cc883113da33c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderValues</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a94410b73f4fae3e1115ad37eefe27976</anchor>
      <arglist>(const std::string &amp;robotName, const std::vector&lt; double &gt; &amp;eValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a0dca39c45c9a87e08d48b6d34c75c44a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eVelocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a10908456431ff240d54fb48cf6ddfdbd</anchor>
      <arglist>(const std::string &amp;robotName, const std::vector&lt; double &gt; &amp;eVelocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointTorques</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a893f4ffae6fbc419efff45b53ef6ffd2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;tValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointTorques</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>afb2411b47f1aa3b5e0755e64fc7359a3</anchor>
      <arglist>(const std::string &amp;robotName, const std::vector&lt; double &gt; &amp;tValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a501402db79c4bc10aeb0b6e6afbb70d8</anchor>
      <arglist>(const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a72e0751e2864a0d6ad5f53baaf227338</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setWrenches</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a97a206dec8ea065ce843dce750957630</anchor>
      <arglist>(unsigned int robotIndex, const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aff57491a7d2d7cc96d4977f736c6bd8b</anchor>
      <arglist>(const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6b662443e9002a90bca5dfe756236684</anchor>
      <arglist>(const std::string &amp;robotName, const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aeecb1c8207e307aabfdc08c8ffb31786</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6a48de8fb529eec3c8cd9ae68b179e07</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ac71808ca04462db2ca9f4a65f6d46bb9</anchor>
      <arglist>(const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a79fcb50fb8bfba2cb526aa9cef41e44a</anchor>
      <arglist>(const std::string &amp;robotName, const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a019e64216e49d2d2ea642e0d44a4cbd2</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a748c8fc7580a3e19fff42f30b47f9483</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aaca57626cc7f1603ed95ece43047ebc9</anchor>
      <arglist>(const std::string &amp;joint, double current)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af3b4c5e9eb726b100ab1f45e71bb9c73</anchor>
      <arglist>(const std::string &amp;robotName, const std::string &amp;joint, double current)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrents</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aa6658156e5c54320aaf08917ff7cbbf2</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;currents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrents</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af5dff8941f459c180697a3987d0e9552</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, double &gt; &amp;currents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperTargetQ</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af318a5f7b3b092cc3b3627b4d5c7d1c2</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5c275034fb2272a81725d93e6fd07d0c</anchor>
      <arglist>(const std::string &amp;robot, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5633e9a932dae96b0cfbbaec6d372f86</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose_service</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a2d40bcee8da26d53936db099e15771a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aa704071d4f01e635a389e50f01463a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>running</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aab73d3fc95c0d7d61dd7b22d5ef72849</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aad49afd7a0cf9bf3ffe1471f02ef6d31</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorAngularAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ad23a9adb9d5c58cb2acf2847c325f2ba</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorLinearAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a8edb6de6f440bba78a4401d2e03231f4</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a8ad898a9f117fc71508d7e5aec5ffa3d</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a9aa3256fc16f73d872c7acb2ad02dd3a</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const QuaternionMap &amp;oris)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a4cfb5f45bc1157af17254918935a462c</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a68e21ec603b1a212cf4e4c2fc2cf704d</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>abb317d4970e11c3a477f7eed5522c6e0</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a9b3f65f8e2ba31971f5ba2a7c65d261e</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a1c98e6515e4c33ddaf4f0ef1a1724ef5</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aa2668437899d9b5a213a397cd79488cf</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientation</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ad47e3a62e047053d0f69bf05b5f91b1a</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientation</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a1f2ed270c1f3bda613a8bb8006ed374c</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a10d3410db9986b61837175c73adc6009</anchor>
      <arglist>(const QuaternionMap &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>abd38f947b653b762f0371cf97864acd9</anchor>
      <arglist>(const std::string &amp;robotName, const QuaternionMap &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a40cbc0fdf54504a920b737dd373c2a88</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6c85b7f6d62514f4e6aef17460600d01</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a3ae21b22df5dc2185d3b4f6197f9b887</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a938a5a360f3d97c155975ccfdd36cac9</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a16dd35dd0e4ecc22c1fd04ee4a09f7d5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocity</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a0226bfe03137da2817dc804338102eef</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aee1e0c31b2a18df3d803a7befe7c4f1a</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af94a53a2a439ac76a164db341eac135d</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setSensorAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a306120f9dfe11ac53b025c609e39148e</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ac3700efc103aef8819abdc0c444e5895</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ae654a53b3dd0eeab35bb91d06a8e93d8</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a210d931f5f2785d60bfb0a23408ba389</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a96f16e96cb41a0bf1edfa2d48f427bc8</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a8c38d4793edb8d7c910be3e80b348f7b</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a81741b8b19919c98fb7998372f902535</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAcceleration</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a43b68df5a0d8994ec19f5e6ecd4c0dcc</anchor>
      <arglist>(const std::string &amp;robotName, const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5feda63896222cd0dac12dfeb73c7354</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a143974b4fba7876bc84a14c1cd5aa9ee</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderValues</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a2703ab87cc9556a1f18cc883113da33c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderValues</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a94410b73f4fae3e1115ad37eefe27976</anchor>
      <arglist>(const std::string &amp;robotName, const std::vector&lt; double &gt; &amp;eValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a0dca39c45c9a87e08d48b6d34c75c44a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eVelocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a10908456431ff240d54fb48cf6ddfdbd</anchor>
      <arglist>(const std::string &amp;robotName, const std::vector&lt; double &gt; &amp;eVelocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointTorques</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a893f4ffae6fbc419efff45b53ef6ffd2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;tValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointTorques</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>afb2411b47f1aa3b5e0755e64fc7359a3</anchor>
      <arglist>(const std::string &amp;robotName, const std::vector&lt; double &gt; &amp;tValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a501402db79c4bc10aeb0b6e6afbb70d8</anchor>
      <arglist>(const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a72e0751e2864a0d6ad5f53baaf227338</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setWrenches</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a97a206dec8ea065ce843dce750957630</anchor>
      <arglist>(unsigned int robotIndex, const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aff57491a7d2d7cc96d4977f736c6bd8b</anchor>
      <arglist>(const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6b662443e9002a90bca5dfe756236684</anchor>
      <arglist>(const std::string &amp;robotName, const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aeecb1c8207e307aabfdc08c8ffb31786</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a6a48de8fb529eec3c8cd9ae68b179e07</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ac71808ca04462db2ca9f4a65f6d46bb9</anchor>
      <arglist>(const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperature</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a79fcb50fb8bfba2cb526aa9cef41e44a</anchor>
      <arglist>(const std::string &amp;robotName, const std::string &amp;joint, double temperature)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a019e64216e49d2d2ea642e0d44a4cbd2</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointDriverTemperatures</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a748c8fc7580a3e19fff42f30b47f9483</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, double &gt; &amp;temperatures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aaca57626cc7f1603ed95ece43047ebc9</anchor>
      <arglist>(const std::string &amp;joint, double current)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af3b4c5e9eb726b100ab1f45e71bb9c73</anchor>
      <arglist>(const std::string &amp;robotName, const std::string &amp;joint, double current)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrents</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aa6658156e5c54320aaf08917ff7cbbf2</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;currents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointMotorCurrents</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af5dff8941f459c180697a3987d0e9552</anchor>
      <arglist>(const std::string &amp;robotName, const std::map&lt; std::string, double &gt; &amp;currents)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aad49afd7a0cf9bf3ffe1471f02ef6d31</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorAngularAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>ad23a9adb9d5c58cb2acf2847c325f2ba</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorLinearAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a8edb6de6f440bba78a4401d2e03231f4</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MC_RTC_DEPRECATED void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a8ad898a9f117fc71508d7e5aec5ffa3d</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a9aa3256fc16f73d872c7acb2ad02dd3a</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const QuaternionMap &amp;oris)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a4cfb5f45bc1157af17254918935a462c</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a68e21ec603b1a212cf4e4c2fc2cf704d</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperTargetQ</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>af318a5f7b3b092cc3b3627b4d5c7d1c2</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5c275034fb2272a81725d93e6fd07d0c</anchor>
      <arglist>(const std::string &amp;robot, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a5633e9a932dae96b0cfbbaec6d372f86</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose_service</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>a2d40bcee8da26d53936db099e15771a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose</name>
      <anchorfile>structmc__control_1_1MCGlobalController.html</anchorfile>
      <anchor>aa704071d4f01e635a389e50f01463a23</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::MCPythonController</name>
    <filename>structmc__control_1_1MCPythonController.html</filename>
    <base>mc_control::MCController</base>
    <member kind="function">
      <type></type>
      <name>MCPythonController</name>
      <anchorfile>structmc__control_1_1MCPythonController.html</anchorfile>
      <anchor>a032e887f83331f4138a8b4125010930a</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;&gt; &amp;robots, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structmc__control_1_1MCPythonController.html</anchorfile>
      <anchor>a9f6c69c9b96a4fadd5f94d7500d633d7</anchor>
      <arglist>(const ControllerResetData &amp;reset_data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1MCPythonController.html</anchorfile>
      <anchor>a3700ef59c7492c0be19158e991ccf6e6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; bool()&gt;</type>
      <name>run_callback</name>
      <anchorfile>structmc__control_1_1MCPythonController.html</anchorfile>
      <anchor>ac76e53f48809f9cede138425a0b7aac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(const ControllerResetData &amp;)&gt;</type>
      <name>reset_callback</name>
      <anchorfile>structmc__control_1_1MCPythonController.html</anchorfile>
      <anchor>a912a0dc9659948113b9eca0605c2cd12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::MessagePackBuilder</name>
    <filename>structmc__rtc_1_1MessagePackBuilder.html</filename>
    <member kind="function">
      <type></type>
      <name>MessagePackBuilder</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a8a18d3d529d183d8ebc255f750bd2785</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessagePackBuilder</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>aedcb04e783e5da81ad1e6cf82219ecf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_array</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a1251bf6d65a490f2e149f2edfb2a956f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish_array</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a296dff689d0fe65aa0925fce937d25c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_map</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a9e1def0478eb0254194498a59409ab34</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish_map</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a276abd82bca94ec432b2cf95a4ba1d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_object</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a791ef2952ffb1a6f8b4db3118b8d9e35</anchor>
      <arglist>(const char *data, size_t s)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>finish</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>af622ee7709cb33c22d6d40cb34ba71d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ab7c6cb64330027b2fec8e69d218a866d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a5a743846c35147473814f1df27223be4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ae3980d77ade44ab490ea9d4ca75ec164</anchor>
      <arglist>(int8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ab76daa4136aa82a8b07f46bc11de04ab</anchor>
      <arglist>(int16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a42536e87c8671025ab1220d069c83b74</anchor>
      <arglist>(int32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>af8b75017d8de6dd590cbd5257413e244</anchor>
      <arglist>(int64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a7c94452f85aaaae78212cc764546f907</anchor>
      <arglist>(uint8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ac0c7a9a19f16c58f512e500d89a9ab22</anchor>
      <arglist>(uint16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ad77f11c5d489b292fd00d97b62ce3d4d</anchor>
      <arglist>(uint32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a9aa97f6d95239884929625a08e0cac35</anchor>
      <arglist>(uint64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a6d56aa3b133f26426361556823abdf80</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a92e09fbed9161cea08676d368e27d0fa</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a01c67ae50c59f128747e4b94ffaa5a5f</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a5250cc8a284bafa0ce519a99916281f4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a9e723757f1b9e4baf971d8212b60666a</anchor>
      <arglist>(const char *s, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ac438d3ed0ab1cec9477dfe63e9bb0299</anchor>
      <arglist>(const Eigen::Vector2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a2c8ad12c224ebf3a1b58ed54c66b6354</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a0adc8c8177e22ed2fa4b05982bc53e6e</anchor>
      <arglist>(const Eigen::Vector4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>af2131c707b052d666de663c56ebc4203</anchor>
      <arglist>(const Eigen::Vector6d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>afeb27a7c5296c14410a786a17694dd90</anchor>
      <arglist>(const Eigen::VectorXd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a74da4251765d4fc62aafac0fab05519e</anchor>
      <arglist>(const Eigen::Quaterniond &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>aa9b29c6e647ca8cae9b77d2a9a9cf422</anchor>
      <arglist>(const Eigen::Matrix3d &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a5106a9ce75422dc91abac33bd4c4f8e9</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a4943a63bcfbaeddca62d209dcd08e885</anchor>
      <arglist>(const sva::ForceVecd &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a83480f7381e658b282b0132b5b495ce7</anchor>
      <arglist>(const sva::MotionVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ab4c3e3612a75cd29da998497fcc81c4e</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a8ecdea776e00c52344616ef74040065a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a8ff5aeafe52b8c4559036d8def37ddfe</anchor>
      <arglist>(const T &amp;number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a4cf78dd3a81d2c0d3fb848ae892f8e12</anchor>
      <arglist>(const std::vector&lt; T, A &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a90dd5ca64d759e4cbe4b7616e5e08b81</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>af402f0657bfdd62c221c3c6f987f418f</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a766e1234e36e2068ee419b6d5aef8083</anchor>
      <arglist>(const std::map&lt; KeyT, T, C, A &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a1e1b7151bf1db5da13fae7bcadf04d4d</anchor>
      <arglist>(const std::set&lt; T, C, A &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>abbdabc927f9f2c4313903839283637ac</anchor>
      <arglist>(const std::tuple&lt; Args... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a511066bbf8b9b1bb9ebfc4ecefffc30c</anchor>
      <arglist>(const Eigen::Ref&lt; Type, Options, StrideType &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ab7c6cb64330027b2fec8e69d218a866d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a5a743846c35147473814f1df27223be4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ae3980d77ade44ab490ea9d4ca75ec164</anchor>
      <arglist>(int8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ab76daa4136aa82a8b07f46bc11de04ab</anchor>
      <arglist>(int16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a42536e87c8671025ab1220d069c83b74</anchor>
      <arglist>(int32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>af8b75017d8de6dd590cbd5257413e244</anchor>
      <arglist>(int64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a7c94452f85aaaae78212cc764546f907</anchor>
      <arglist>(uint8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ac0c7a9a19f16c58f512e500d89a9ab22</anchor>
      <arglist>(uint16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ad77f11c5d489b292fd00d97b62ce3d4d</anchor>
      <arglist>(uint32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a9aa97f6d95239884929625a08e0cac35</anchor>
      <arglist>(uint64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a6d56aa3b133f26426361556823abdf80</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a92e09fbed9161cea08676d368e27d0fa</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a01c67ae50c59f128747e4b94ffaa5a5f</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a5250cc8a284bafa0ce519a99916281f4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a9e723757f1b9e4baf971d8212b60666a</anchor>
      <arglist>(const char *s, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ac438d3ed0ab1cec9477dfe63e9bb0299</anchor>
      <arglist>(const Eigen::Vector2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a2c8ad12c224ebf3a1b58ed54c66b6354</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a0adc8c8177e22ed2fa4b05982bc53e6e</anchor>
      <arglist>(const Eigen::Vector4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>af2131c707b052d666de663c56ebc4203</anchor>
      <arglist>(const Eigen::Vector6d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>afeb27a7c5296c14410a786a17694dd90</anchor>
      <arglist>(const Eigen::VectorXd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a74da4251765d4fc62aafac0fab05519e</anchor>
      <arglist>(const Eigen::Quaterniond &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>aa9b29c6e647ca8cae9b77d2a9a9cf422</anchor>
      <arglist>(const Eigen::Matrix3d &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a5106a9ce75422dc91abac33bd4c4f8e9</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a4943a63bcfbaeddca62d209dcd08e885</anchor>
      <arglist>(const sva::ForceVecd &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a83480f7381e658b282b0132b5b495ce7</anchor>
      <arglist>(const sva::MotionVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>ab4c3e3612a75cd29da998497fcc81c4e</anchor>
      <arglist>(const sva::ImpedanceVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a8ecdea776e00c52344616ef74040065a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a8ff5aeafe52b8c4559036d8def37ddfe</anchor>
      <arglist>(const T &amp;number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a4cf78dd3a81d2c0d3fb848ae892f8e12</anchor>
      <arglist>(const std::vector&lt; T, A &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a90dd5ca64d759e4cbe4b7616e5e08b81</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>af402f0657bfdd62c221c3c6f987f418f</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a766e1234e36e2068ee419b6d5aef8083</anchor>
      <arglist>(const std::map&lt; KeyT, T, C, A &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a1e1b7151bf1db5da13fae7bcadf04d4d</anchor>
      <arglist>(const std::set&lt; T, C, A &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>abbdabc927f9f2c4313903839283637ac</anchor>
      <arglist>(const std::tuple&lt; Args... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1MessagePackBuilder.html</anchorfile>
      <anchor>a511066bbf8b9b1bb9ebfc4ecefffc30c</anchor>
      <arglist>(const Eigen::Ref&lt; Type, Options, StrideType &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MessageState</name>
    <filename>structmc__control_1_1fsm_1_1MessageState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a803539f968b698dc20c1e393072a8328</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a19bb59f7d7f27358310774e0cee836c7</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a32d7b135708d46a0f671cb656e142b28</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a13aaf77e6c79a2dc709e4951499ec36f</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>prefix_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a32f3abf8754efc147187ae3eb00e8ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>message_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a58da17ef00e79d1a799b39a4cb10e186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>logType_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a17d7efa8afe689d0859dbc2c353a857d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>gui_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a19e4c8d49c2b042b5e5b75064b4a5925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>guiCategory_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>ae8548ec14b74cdb3585fe4605bdca0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>labelName_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MessageState.html</anchorfile>
      <anchor>a19f38c0a2486d70b98b287fd201581cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MetaState</name>
    <filename>structmc__control_1_1fsm_1_1MetaState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>aa9271d4d0cc82bf5dee97093242f2a30</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>a9b808dc76539033d70da8117b889a71e</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>a7f3dee5b3328e795f56374e1f6a710d1</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>a53ae3a72e0ae0eb99d74025e11a55686</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_msg</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>a92a3be690dc783cb7f77f7fd39ec1cdf</anchor>
      <arglist>(std::string &amp;msg) override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>transitions</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>a497aed9c6a7dfc6477ab04ba76ada7c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>configs</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>ade4cc463d4a5a20bbd32b642e81831f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Executor</type>
      <name>executor_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaState.html</anchorfile>
      <anchor>a9666773e74f14ce95d27e0215d1146f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::MetaTask</name>
    <filename>structmc__tasks_1_1MetaTask.html</filename>
    <member kind="typedef">
      <type>mc_solver::QPSolver::Backend</type>
      <name>Backend</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a33509a37fe853747dcacae6cdda089f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaTask</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>aa9d8f2bfa435c5386adcafddf3ea087d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MetaTask</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>aea3e513dfe137830b38272336451b8cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>type</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>ac090b29eae1954585e32572d40731ca1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>name</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>aac5374371bf979a30705fe2db701c13b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a94831a7f067fdd5b05e03e83bfc4166b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a7821083f6def1d54f22ea7c0e223e21a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a98221b876dab3cc67fbd60036213eb46</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>ae6437fb02541a7c63e177ee13170b5a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a2fd93334634a24c2955f83cbf71926c1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={})=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>aa4d582c6cd1934d8a4ac2fed6fb296da</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={})=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a745e75d72133feaf9b7aef649485168f</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>ad6451130cee8c71e4045d48f7b8b7a18</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a2f04c2bc3c4806a13bd383826127f7e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a27dbee0df32ae7f803184cb6222fc427</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>iterInSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a0cc220528fbda2fd29effb73dd45de71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIterInSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>ab514063e0b34773dd57aca57a39d9c8f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementIterInSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>add295cbec3ec53cebb64a5df13244bf7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Backend</type>
      <name>backend</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a2827c0bf7b69c7d349c34e9b3db19958</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a87fbfd10dd81b8ce64a7a9f82d80d078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>afa7c055d8cef8f4a8bb1e76689445130</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a21e9870f7434084d52299f18f8f86da7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a19bd5d3b7b1b36dae48b516457de16a8</anchor>
      <arglist>(mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromLogger</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a1db4ea4e03d00823e7ee10b444a697b1</anchor>
      <arglist>(mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a6be5d66b0aba0cac4f65093d5d3b7c7f</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromGUI</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a44d85f3f65abc8a5f8965efec40ebe7d</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a753237535cc3e200e44ae0fa276f733e</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a6f753630a5e0aca76308b4d652e62277</anchor>
      <arglist>(MetaTask &amp;t, mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>removeFromSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>af374c0658624a4cb7a6a9f900ab9f69a</anchor>
      <arglist>(MetaTask &amp;t, mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a570ef153c01abad5d5642b7a16f44d79</anchor>
      <arglist>(MetaTask &amp;t, mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>ac29af31e9eb526d06b6d4ec1d2f3d5bb</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::Logger &amp;logger)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>removeFromLogger</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a256b3b8d5c00bc81ef7726f536f79bfb</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::Logger &amp;logger)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a73ce0e373c9cf7f5b8db6745c46c3ef4</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>removeFromGUI</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a780d496b8148d863b2aa0462abcba525</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>ensureHasJoints</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a5d90bfa419602be569c6098e822cdb0d</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;joints, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Backend</type>
      <name>backend_</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>abde4ba259deee57ffed51fa090aad188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type_</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>addf8dbe10befa2b37c8e7ea386561775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a6e55f0bff9a3d49ba0b92e0a4dff9a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>iterInSolver_</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a5bf5a9f30f1497e15abc33faf7a97e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_solver::QPSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a1f3a8dff16b572ac14d1ab4cf32a9e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_solver::TasksQPSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a0465ff354dd0a25c4bd0aa0785f2652e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_solver::TVMQPSolver</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a65e310b25c25e470b830648347f020f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_control::CompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1MetaTask.html</anchorfile>
      <anchor>a93d28090bec75d3e17832041ced6e3f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::MetaTaskLoader</name>
    <filename>structmc__tasks_1_1MetaTaskLoader.html</filename>
    <base>GenericLoader&lt; MetaTaskLoader, MetaTask &gt;</base>
    <member kind="function" static="yes">
      <type>static storage_t &amp;</type>
      <name>storage</name>
      <anchorfile>structmc__tasks_1_1MetaTaskLoader.html</anchorfile>
      <anchor>af1c528df92fba63c0ff4f56be2007bdd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MetaTasksState</name>
    <filename>structmc__control_1_1fsm_1_1MetaTasksState.html</filename>
    <base>mc_control::fsm::State</base>
    <class kind="struct">mc_control::fsm::MetaTasksState::TaskCriteria</class>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState.html</anchorfile>
      <anchor>a7ea26c3c3626ad237567cd0bb4d8c077</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState.html</anchorfile>
      <anchor>ab76034ae6d2f04688543a13a49c15493</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState.html</anchorfile>
      <anchor>aa58d3f76e1bdcee77b08b1786765e5aa</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState.html</anchorfile>
      <anchor>a60321fa59012d49604c9e38d760aa7db</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>outputCrit_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState.html</anchorfile>
      <anchor>a15385e3dba9c3a9ceacf9aa32ee4d0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, TaskCriteria &gt;</type>
      <name>criterias_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState.html</anchorfile>
      <anchor>abf365e7d07d5e71915cfa982fc0eb3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finished_first_</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState.html</anchorfile>
      <anchor>aef0fdf94ede34d66242bd301c560ea74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Mimic</name>
    <filename>structmc__rbdyn_1_1Mimic.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1Mimic.html</anchorfile>
      <anchor>a461c2efe0da4d17cc75ce43837a0503f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>joint</name>
      <anchorfile>structmc__rbdyn_1_1Mimic.html</anchorfile>
      <anchor>a4d23695d0cbacd0471313e1323d9e4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>multiplier</name>
      <anchorfile>structmc__rbdyn_1_1Mimic.html</anchorfile>
      <anchor>acae914e7c2302757339b3f4624394c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>offset</name>
      <anchorfile>structmc__rbdyn_1_1Mimic.html</anchorfile>
      <anchor>a07938e029fb7d951388c0b1ad64642b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::Momentum</name>
    <filename>structmc__tvm_1_1Momentum.html</filename>
    <member kind="function">
      <type></type>
      <name>Momentum</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>a4f6fd8e9b9aedffae2a428baa56fa158</anchor>
      <arglist>(NewMomentumToken, CoM &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>momentum</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>ab066b7e347b9a08c8257ef453d7b2897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>velocity</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>a4cd826b0d05b87adb4e84dfbfffac019</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>aedba5584208c407f99c8ab49bea98046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobian</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>aef05f63bee758e0e7031bd196b16cdc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>JDot</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>ad751b30cbc34ec1c9c6e4ca206b70bb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>a764f88dfcbc1cf6f3547843c4fc8a996</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>ae476c3cd5f3bcf2de14b07d7493f1022</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robot</name>
      <anchorfile>structmc__tvm_1_1Momentum.html</anchorfile>
      <anchor>ad03b49f51df2ba1d492ced03d923fdd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::MomentumFunction</name>
    <filename>structmc__tvm_1_1MomentumFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>MomentumFunction</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>a97f1d9f19e45e625989714f7d55323e8</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>ad93c39ec7cc7e00edfbd02ea13cc08a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>momentum</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>a196777ba6dda3f1167ac2dbb4ff60e7b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>momentum</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>acd13388dba7e67ec8a83b885cf252e13</anchor>
      <arglist>(const sva::ForceVecd &amp;momentum) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>refVel</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>aacd65392fecb76c893830e5581eb627b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>af973a8d6a9f5ec6db41cd84308c46269</anchor>
      <arglist>(const Eigen::Vector6d &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>refAccel</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>aafc3c2b6e9bdd699ffafb61435de77ad</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>ab7ffa18290d97b6df34d1537f023599e</anchor>
      <arglist>(const Eigen::Vector6d &amp;refAccel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_tvm::Momentum &amp;</type>
      <name>algo</name>
      <anchorfile>structmc__tvm_1_1MomentumFunction.html</anchorfile>
      <anchor>a32b6eafc280cd385fad6930e75a181a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::MomentumTask</name>
    <filename>structmc__tasks_1_1MomentumTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>MomentumTask</name>
      <anchorfile>structmc__tasks_1_1MomentumTask.html</anchorfile>
      <anchor>ad208d3c2d0ec9d8a1db4a3b16bb6b0b9</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1MomentumTask.html</anchorfile>
      <anchor>ab4c83463d464cb179c2f914fccfcd3b2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>momentum</name>
      <anchorfile>structmc__tasks_1_1MomentumTask.html</anchorfile>
      <anchor>a6ba0b4c9ecf9da4571b8c052b325c5d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>momentum</name>
      <anchorfile>structmc__tasks_1_1MomentumTask.html</anchorfile>
      <anchor>a288104247dc5c93a7915300458da2f06</anchor>
      <arglist>(const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1MomentumTask.html</anchorfile>
      <anchor>ac09760de5c209d12568dac6817e79395</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1MomentumTask.html</anchorfile>
      <anchor>a722bd3ba35066d38f9d301126f46e8fc</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1MomentumTask.html</anchorfile>
      <anchor>ac4048a9a19001b1f81ee6a39bf75677d</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::Frame::NewFrameToken</name>
    <filename>structmc__tvm_1_1Frame_1_1NewFrameToken.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Frame::NewFrameToken</name>
    <filename>structmc__rbdyn_1_1Frame_1_1NewFrameToken.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::RobotFrame::NewRobotFrameToken</name>
    <filename>structmc__tvm_1_1RobotFrame_1_1NewRobotFrameToken.html</filename>
    <base>mc_tvm::Frame::NewFrameToken</base>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotFrame::NewRobotFrameToken</name>
    <filename>structmc__rbdyn_1_1RobotFrame_1_1NewRobotFrameToken.html</filename>
    <base>mc_rbdyn::Frame::NewFrameToken</base>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Robots::NewRobotsToken</name>
    <filename>structmc__rbdyn_1_1Robots_1_1NewRobotsToken.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::Robot::NewRobotToken</name>
    <filename>structmc__tvm_1_1Robot_1_1NewRobotToken.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Robot::NewRobotToken</name>
    <filename>structmc__rbdyn_1_1Robot_1_1NewRobotToken.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::NotAGetter</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1NotAGetter.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::NumberInputImpl</name>
    <filename>structmc__rtc_1_1gui_1_1NumberInputImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>NumberInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberInputImpl.html</anchorfile>
      <anchor>adc6a76d29546ffa6d09e6e244cde1310</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberInputImpl.html</anchorfile>
      <anchor>a33da2f6fd4d4ffeb4ed07e93094b002f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberInputImpl.html</anchorfile>
      <anchor>ae1b80d0abc5e1d9e04ff01069779aaf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::NumberSliderImpl</name>
    <filename>structmc__rtc_1_1gui_1_1NumberSliderImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>NumberSliderImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberSliderImpl.html</anchorfile>
      <anchor>ad32d76eae5aae6d20a58743e4744947d</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberSliderImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberSliderImpl.html</anchorfile>
      <anchor>a63a81dc88237bae8b029eaf615b0acdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberSliderImpl.html</anchorfile>
      <anchor>a8e216317bf0a49f9f776b0a81d708c71</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberSliderImpl.html</anchorfile>
      <anchor>a3a7ce274a193ddbde40a23f4391e38eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1NumberSliderImpl.html</anchorfile>
      <anchor>ad6ef847b456858e8283667379b82dda0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::CollisionFunction::ObjectData</name>
    <filename>structmc__tvm_1_1CollisionFunction_1_1ObjectData.html</filename>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>nearestPoint_</name>
      <anchorfile>structmc__tvm_1_1CollisionFunction_1_1ObjectData.html</anchorfile>
      <anchor>ad98624e0c53bc5977b5e209eeab55073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Jacobian</type>
      <name>jac_</name>
      <anchorfile>structmc__tvm_1_1CollisionFunction_1_1ObjectData.html</anchorfile>
      <anchor>aed46a1ab73b2e5bbaeae6020df4618fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>selector_</name>
      <anchorfile>structmc__tvm_1_1CollisionFunction_1_1ObjectData.html</anchorfile>
      <anchor>a4d34de48fe9791f7c04817024b0fc8e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ObjectLoader::ObjectDeleter</name>
    <filename>structmc__rtc_1_1ObjectLoader_1_1ObjectDeleter.html</filename>
    <member kind="function">
      <type></type>
      <name>ObjectDeleter</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader_1_1ObjectDeleter.html</anchorfile>
      <anchor>ad9d8c7bebf11fd046f3264f25d73f56d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectDeleter</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader_1_1ObjectDeleter.html</anchorfile>
      <anchor>a3527e6200ab7ef9bf24606c987072039</anchor>
      <arglist>(void(*fn)(T *))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader_1_1ObjectDeleter.html</anchorfile>
      <anchor>a7cd3bbddec0b057af90444eb5794ad80</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::ObjectLoader</name>
    <filename>structmc__rtc_1_1ObjectLoader.html</filename>
    <templarg>T</templarg>
    <class kind="struct">mc_rtc::ObjectLoader::ObjectDeleter</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aeaf25529680235b9456cd013ee2596b2</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>adbc1003c6e200934f93eca0d42306fe5</anchor>
      <arglist>(const std::string &amp;name, std::function&lt; RetT *(const Args &amp;...)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>create_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T *</type>
      <name>create</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T *</type>
      <name>create_from_handles</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a85c8eb232b0448a1c695ded4daec3edf</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T *</type>
      <name>create_from_callbacks</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a1bb13fcf5a8dc58bb5b4aa04345790d9</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::DataStore</type>
      <name>callbacks_</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aa3d38a0e58eb0ce60923047b4b698d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>afd3cb32f499540bf36b44bbfa53018c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectLoader&lt; State &gt;</name>
    <filename>structmc__rtc_1_1ObjectLoader.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; State, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aeaf25529680235b9456cd013ee2596b2</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>adbc1003c6e200934f93eca0d42306fe5</anchor>
      <arglist>(const std::string &amp;name, std::function&lt; RetT *(const Args &amp;...)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; State &gt;</type>
      <name>create_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>State *</type>
      <name>create</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>State *</type>
      <name>create_from_handles</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a85c8eb232b0448a1c695ded4daec3edf</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>State *</type>
      <name>create_from_callbacks</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a1bb13fcf5a8dc58bb5b4aa04345790d9</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::DataStore</type>
      <name>callbacks_</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>aa3d38a0e58eb0ce60923047b4b698d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>structmc__rtc_1_1ObjectLoader.html</anchorfile>
      <anchor>afd3cb32f499540bf36b44bbfa53018c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::Observer</name>
    <filename>structmc__observers_1_1Observer.html</filename>
    <member kind="function">
      <type></type>
      <name>Observer</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a0f31c5d70d08486d118c3ac97bde377e</anchor>
      <arglist>(const std::string &amp;type, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Observer</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a7884d771baae4ffcef532ba6a248be69</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>aac7a0d76689c884cbec886fb15d208c5</anchor>
      <arglist>(const mc_control::MCController &amp;, const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>aa59bc21df7afff4f66cecc9315898c6b</anchor>
      <arglist>(const mc_control::MCController &amp;ctl)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a4805153c7a65f4f5ff444fdfd6528d73</anchor>
      <arglist>(const mc_control::MCController &amp;ctl)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>abb5cf4fc58a1178120bc2bea858518f7</anchor>
      <arglist>(mc_control::MCController &amp;ctl)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a9266bf0e19a321fd933a1fd29cc6a7e7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>afb00b8e7fde2d086d3e8674bf70f1c9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>afaf68e30ac5a8d4fdb65a781b124f0cb</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::Logger &amp;logger, const std::string &amp;category=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a2e721e52ad8618fce8eb1cb0a89697af</anchor>
      <arglist>(mc_rtc::Logger &amp;logger, const std::string &amp;category=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a33f44f594be3c724f57552389924ea72</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::gui::StateBuilder &amp;gui, std::vector&lt; std::string &gt; category={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromGUI_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>ac170276078f1d4b1a018b48be0e7bbb1</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, std::vector&lt; std::string &gt; category={})</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>desc</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a000cb5b45f3ae16d5deec144fbfd0d96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>type</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a221d24df2ef49cb0f3439a4a99a59cfb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>error</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>abe5c434f1d731d97473991d6d3ac82d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>ad50a096eb3ea0ba9a09f3a9b286a73a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>ac13bd0e46fd4434ae835e17c2a028f1b</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::Logger &amp;, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromLogger</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>abecec13c3a2143c51329b142b31b2543</anchor>
      <arglist>(mc_rtc::Logger &amp;, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a858ec3fb7857eb010332d689b982f5bf</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::gui::StateBuilder &amp;, const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromGUI</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a3deb1aa8ae052466d654f6385ada884a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a2e3f65fb8549873b71b1eeda29c1b363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>af9063e58cac679404843fb7104c60835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>desc_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a09b5945fa09bf14489d9796d43df60b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>error_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>a89c80c9c3139aa8025315bb4337618a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__observers_1_1Observer.html</anchorfile>
      <anchor>adde90bcccecab614f391f6d515d435fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_observers::ObserverLoader</name>
    <filename>structmc__observers_1_1ObserverLoader.html</filename>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; mc_observers::Observer &gt;</type>
      <name>get_observer</name>
      <anchorfile>structmc__observers_1_1ObserverLoader.html</anchorfile>
      <anchor>a3d1ff69617f71a1eb0aea7aedc13caa9</anchor>
      <arglist>(const std::string &amp;name, const Args &amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>register_object</name>
      <anchorfile>structmc__observers_1_1ObserverLoader.html</anchorfile>
      <anchor>a01f649018270845352eddfdeeb751285</anchor>
      <arglist>(const std::string &amp;name, std::function&lt; RetT *(const Args &amp;...)&gt; callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_module_path</name>
      <anchorfile>structmc__observers_1_1ObserverLoader.html</anchorfile>
      <anchor>a56fc6c53c0487328ed16473706e82df6</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear</name>
      <anchorfile>structmc__observers_1_1ObserverLoader.html</anchorfile>
      <anchor>a8649f98bfdfa69a7b1c76bea9897c933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_observer</name>
      <anchorfile>structmc__observers_1_1ObserverLoader.html</anchorfile>
      <anchor>aac203ca60191fa7e4041339a52baf625</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_verbosity</name>
      <anchorfile>structmc__observers_1_1ObserverLoader.html</anchorfile>
      <anchor>afc7d5d833c4d4ce520be8fa81a0b1b63</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>available_observers</name>
      <anchorfile>structmc__observers_1_1ObserverLoader.html</anchorfile>
      <anchor>ac104339befa76e8673940c1a86ad2847</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::ObserverPipeline</name>
    <filename>structmc__observers_1_1ObserverPipeline.html</filename>
    <class kind="struct">mc_observers::ObserverPipeline::PipelineObserver</class>
    <member kind="function">
      <type></type>
      <name>ObserverPipeline</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a27cfd874cd81d8640f15c525214ed9a4</anchor>
      <arglist>(mc_control::MCController &amp;ctl, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObserverPipeline</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a9ad24386933e0a511821e6dd19a5161f</anchor>
      <arglist>(mc_control::MCController &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObserverPipeline</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a39bca6757576671034b071813416b6fa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>ab577dc04f6192cd5ae25f42adfbf8fd5</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>ab4e1a0ed6d7db9a831779c798ce4a2af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a7148be2b915f4b800b22ceeb87561921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runObservers</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a640689162c772d2c2525b27cfb57ead5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runObservers</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a1ff155de33b02e9583105970a7dd7f62</anchor>
      <arglist>(bool status)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateObservers</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a006ac6ed54fdedf365bb56f3e17d1c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateObservers</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a4c1159cf43b722d4b625136a30bf632c</anchor>
      <arglist>(bool status)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>success</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>ababc68b112dad77b357be9d93e3ac853</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const PipelineObserver &amp;</type>
      <name>observer</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a11d57d5e2c6ea582f034a82fbd905ed0</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>PipelineObserver &amp;</type>
      <name>observer</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>aa589b96b4941130ba064f91b2b281a88</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; PipelineObserver &gt; &amp;</type>
      <name>observers</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>aca806676c7750b108aa0fd885de4b0a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; PipelineObserver &gt; &amp;</type>
      <name>observers</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a6c27953f6998bd1e88c56872f96d51cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObserver</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>aeeae20962b5ccf64ec8a3d374604974e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObserverType</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a5fab50c8444f1de1c5bcfcdf22d88a22</anchor>
      <arglist>(const std::string &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>desc</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>abe7432cea877d29787210651cbff3a3b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>ac25d7ad13731b1d0975d8120919bfe2c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>abb235eaa6d2357c1188f1a2f4ad6635a</anchor>
      <arglist>(mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>aefa347af69a4dc6e69429155bd0e10c7</anchor>
      <arglist>(mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>ac95fe805cad47ec4e37d5d9b73f7a73a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromGUI</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a41dd41c29dd2edcb2eead263e1aa6212</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_control::MCController &amp;</type>
      <name>ctl_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a37430f05658ebc329bb44d1408606ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a196508f4fadc9c18b17e430877904765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>desc_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>adf93df3bebd6b8e6dc341c2c20ba18ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>runObservers_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a7d03e7fb21e85073504b55ff84c3ec6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>updateObservers_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a4fd671cc39489c3b17d28cffcf7c2e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>success_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>a6bf230530020ea7dc21a18acb4909e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PipelineObserver &gt;</type>
      <name>pipelineObservers_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline.html</anchorfile>
      <anchor>ae95d55cd84f06d83369b082fa2be0646</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Ordinate</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Ordinate</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>aa863471ab604e5c3fc6a7d6ef1e485ac</anchor>
      <arglist>(std::string_view name, GetT get_fn, Color color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>afd2006099d5d013adab3798f84e088c7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a8e34663c5cc34ae8073379aae0b4bf34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Ordinate &amp;</type>
      <name>style</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a9f8bf84f326b02b180223b983089e84e</anchor>
      <arglist>(Style style)</arglist>
    </member>
    <member kind="function">
      <type>Ordinate &amp;</type>
      <name>side</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a3247e32aaba3a8e62bbcc61e9b172ec7</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a327093cadc488b62d7a62480f3ca4959</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>af79677e0c449d72b34a329ace9814390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetT</type>
      <name>get_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a6e0a97eb4969b6d697f5e3d4f957d886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>color_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>ae207af9008ec8b5da6db891ea0ebd79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>cache_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a593abcb0579ff5d3cc6f7d7b39bf0a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Style</type>
      <name>style_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a859f99683fcc0f5acf120cd6e0f84dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Side</type>
      <name>side_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Ordinate.html</anchorfile>
      <anchor>a73f245b506213662fd3d5f3deb1eb837</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::OrdinateWithColor</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1OrdinateWithColor.html</filename>
    <templarg>GetT</templarg>
    <templarg>GetColor</templarg>
    <base>mc_rtc::gui::plot::impl::Ordinate</base>
    <member kind="function">
      <type></type>
      <name>OrdinateWithColor</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1OrdinateWithColor.html</anchorfile>
      <anchor>af378e5fc283945226b11b2c44b86637d</anchor>
      <arglist>(std::string_view name, GetT get_fn, GetColor color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1OrdinateWithColor.html</anchorfile>
      <anchor>a336ddb0dc18460959466cef6486e5f78</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_tvm::OrientationFunction</name>
    <filename>classmc__tvm_1_1OrientationFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientationFunction</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a12ffac7c6e52bbb2bc9dd42baaae14ba</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a34e087de67942f9afa10c34751074e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a2060811528722802f245f335e0c71d84</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>aa359bd7513c6606ff076df2b2daf6309</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a917174806b640d5c9dacbac8363c9a85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a3272f19b8f72143589088ca65640b2ef</anchor>
      <arglist>(const Eigen::Vector3d &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a7451b152231b83a7c4ade0d224ebfb2c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>af662382ca5881a91ab2107e4b66447f3</anchor>
      <arglist>(const Eigen::Vector3d &amp;refAccel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a93da4ad4604dc8e9decbc5984b1cb344</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>aab921b735cfcd97da765b73e33330d8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>afb23113b4e069c511d550a6a1cc0a878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a328ff8be4b3df309caf5926cc9f40bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a669f44d6039be0cb7d4d35f732ef83af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>robot_frame_</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a1f81d5dba33b23f43711750962373823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::RobotFrame &amp;</type>
      <name>frame_</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>aad3996edbd9ec29eca1a7cd125f844fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>ori_</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a0cc0d891890196cc37f1415f22a588f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>refVel_</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>a248ea2ec150e7bd1790d7532ce9fef2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>refAccel_</name>
      <anchorfile>classmc__tvm_1_1OrientationFunction.html</anchorfile>
      <anchor>ae5a6c8af9766086492187f28945e4680</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::OrientationTask</name>
    <filename>structmc__tasks_1_1OrientationTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>acf5a79a834e5413f572c556a972c858f</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=2.0, double weight=500.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>aed570ad6882e85529777864cc33d58ed</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>ae68bb89e360bfbc1d9f2be05fcaad936</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>a8b10f7f275eec4a245cf826c90f9aca7</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>orientation</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>ada80fbd5aaf53369618630495e92a175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>a40b1231973621ed5718acb5451c81462</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>a3e23c4fff6c441061b64ee5109c78955</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>ac5953577c61c0b6943106f08851f562c</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>EndEffectorTask</name>
      <anchorfile>structmc__tasks_1_1OrientationTask.html</anchorfile>
      <anchor>ab333c1b08462c2014c404b1b2b886246</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::ParallelState</name>
    <filename>structmc__control_1_1fsm_1_1ParallelState.html</filename>
    <base>mc_control::fsm::State</base>
    <class kind="struct">mc_control::fsm::ParallelState::DelayedState</class>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>ab27ac95ced42364760d35649de387b76</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>af63e05b0d225688c5483a4ccd27a28f1</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>a27657e16b49b92ce49db961c081b6d72</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>a39756b383a4f8993bcbd92d04c048b8f</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_msg</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>ade3a69dd9d2359e240dda537d55a22ca</anchor>
      <arglist>(std::string &amp;msg) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_write_msg</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>aaede3f89f6f75af9446e21c7f8bf499c</anchor>
      <arglist>(std::string &amp;msg, std::string &amp;out) override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>states</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>a70d2ba1fa9b14c6dc926b90d52eff1c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>configs</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>a34b8736a576a150109c9bbd8234ca8d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>time_</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>ab960418680931cc5dffcffb7778bd2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; DelayedState &gt;</type>
      <name>states_</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>ac2033713e5e43d503b3eac997bd4f36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>outputStates_</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>a9ce6f4335845118f747a356c6e9ca289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finished_first_</name>
      <anchorfile>structmc__control_1_1fsm_1_1ParallelState.html</anchorfile>
      <anchor>a1a84decc60058d334a817cdd14704acc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::PauseState</name>
    <filename>structmc__control_1_1fsm_1_1PauseState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1fsm_1_1PauseState.html</anchorfile>
      <anchor>ae794e4997ff266a2e709b3a9cf2ba687</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1PauseState.html</anchorfile>
      <anchor>a21cbe60a2692a0eede28cd09a0510084</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1PauseState.html</anchorfile>
      <anchor>a21910e5c2ee0eb49560345113ae9b6be</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1PauseState.html</anchorfile>
      <anchor>a15a4573c025bf929bd7416b132b8a5c4</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PauseState.html</anchorfile>
      <anchor>abf66f94f4a86433976e52ba2751cb60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tick_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PauseState.html</anchorfile>
      <anchor>abecdfc22b00a1fa457f6beadadf3a069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>goal_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PauseState.html</anchorfile>
      <anchor>aabaccc34e1562ea3f396dc2105274b44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_planning::Pendulum</name>
    <filename>structmc__planning_1_1Pendulum.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>Pendulum</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a46abf47859daaa0dd2327b2c76c13bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pendulum</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a57af547d6493879008417b6a639bf361</anchor>
      <arglist>(double lamda, const Eigen::Vector3d &amp;com=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;comd=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;comdd=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeIPM</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>aa58c5aad2cacd579145dd4cde7412e4f</anchor>
      <arglist>(const Eigen::Vector3d &amp;p, const Eigen::Vector3d &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateCoMJerk</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a9adff808e3b82be53c193a17d46d9c0b</anchor>
      <arglist>(const Eigen::Vector3d &amp;comddd, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateIPM</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a2cc0137e4e3e6cfc5390f55e4b00bd71</anchor>
      <arglist>(Eigen::Vector3d zmp, double lambda, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a660e8b095ba2c72efa862309570bc472</anchor>
      <arglist>(double lambda, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comd=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;comdd=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCoMHeight</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>afb92b295cc1929aadab22278e8107d8b</anchor>
      <arglist>(double height, const Eigen::Vector3d &amp;p, const Eigen::Vector3d &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a66ae8e3c44f2638fb41b3ac8271813b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>comd</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a296b78296de195be1aababf0cc94440d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>comdd</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a5fdfd2b8b636b5587ed286daf3a8c5f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>dcm</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a7fe44e375700d8754c110a4be586af78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omega</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>aac99dd2365ccea15652f7fe8f5e95d04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmp</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>af966f2d7b34a360547a7d19f27fc4c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmpd</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a2b6c323003ef905cb0655c08a09f77b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>com_</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>ae4b2565ec3cbea0520108495f93a5a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comd_</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>aea07962512881de4264b43573e2bab86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comdd_</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a25f2d33db64e5365300e8aea77993871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comddd_</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>ae21f70bd3ef4380e2ca61c176fa03d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>zmp_</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>ac1bb8f13c47f89740d86998a2ae36444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>zmpd_</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>ad8c91f4b7e9ce0496255708e646771a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega_</name>
      <anchorfile>structmc__planning_1_1Pendulum.html</anchorfile>
      <anchor>a63859c8fe63cfe27200d7464dab43f21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::ObserverPipeline::PipelineObserver</name>
    <filename>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</filename>
    <member kind="function">
      <type></type>
      <name>PipelineObserver</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a218308b169684bc796e4f5d79a71ca2c</anchor>
      <arglist>(const mc_observers::ObserverPtr &amp;observer, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const Observer &amp;</type>
      <name>observer</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a8b5116125ebbfdd3c6bed1158847b056</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Observer &amp;</type>
      <name>observer</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>ae9b4cb7eccc20c8924dfaec86798850c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>observer</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>afbbfb1e055606ef060c54b30f9f9b79f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>observer</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a75b504dd824f30da82b9fb8f1fcb4e8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a29ce61aa665b8994e779aa34dddc2cf6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>log</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a2a8dad1ba36469bea16def1de5b09244</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gui</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>ab74a756fc2c9f7392cf7d246c265cdef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>success</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>acaf76f3405b90910b3438e4085f94e00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>successRequired</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a5aff964823ccee5206d4c600b2f413c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObserverPtr</type>
      <name>observer_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>ab5b904d544fd762a5f4dd842af686423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>update_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>ab3d9811b5cc8fe04066e150cbd6a4386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>log_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>aba73be3150abc3f17e20c9f6d638ae19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>gui_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a048f4bde5058022caab03485c8047db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>successRequired_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a83f156cbff59881e2147acd1ee3f8137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>success_</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>ab1fa721bb4f40943cd1f0d798674f9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>ObserverPipeline</name>
      <anchorfile>structmc__observers_1_1ObserverPipeline_1_1PipelineObserver.html</anchorfile>
      <anchor>a1bf2b5490fc8313b8f9e50a52fbc6b73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::PlanarSurface</name>
    <filename>structmc__rbdyn_1_1PlanarSurface.html</filename>
    <base>mc_rbdyn::Surface</base>
    <member kind="function">
      <type></type>
      <name>PlanarSurface</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>a129e3603625f117dc8199b89bf43cd22</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName, const std::vector&lt; std::pair&lt; double, double &gt;&gt; &amp;planarPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarSurface</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>a14cef1c49d935db2d1e30c9a54180f84</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePoints</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>a99d226753ea56cc0df9678db6550e0b4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarTransform</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>ab49f9384bc47d3f19bcce47d4c22ca5c</anchor>
      <arglist>(const double &amp;T, const double &amp;B, const double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;</type>
      <name>planarPoints</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>a8d6d8fdf89e2a53cfaf933d2f4d70e7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarPoints</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>a0eab075507f287b7127f484f23fe3039</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, double &gt;&gt; &amp;planarPoints)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>a798203ec1bf48a3390f89f3586b6ea85</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>structmc__rbdyn_1_1PlanarSurface.html</anchorfile>
      <anchor>a183b940ce2bf200eed3056d5996588d3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Plane</name>
    <filename>structmc__rbdyn_1_1Plane.html</filename>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>structmc__rbdyn_1_1Plane.html</anchorfile>
      <anchor>ad8cba2015c957fc2f09367e269b33a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>offset</name>
      <anchorfile>structmc__rbdyn_1_1Plane.html</anchorfile>
      <anchor>a8c864cca3648d188ffc463ee9cdb2fc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Point3DImpl</name>
    <filename>structmc__rtc_1_1gui_1_1Point3DImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>Point3DImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DImpl.html</anchorfile>
      <anchor>aebb2b0f65583cdb425856d7589a325d9</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3DImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DImpl.html</anchorfile>
      <anchor>a81ef40f7c6064e0c1888601141f88cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DImpl.html</anchorfile>
      <anchor>a9101fdc36b843f5a6e93eb033095de14</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DImpl.html</anchorfile>
      <anchor>a0c1fd00806f16e62c3ee1140799ac02c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DImpl.html</anchorfile>
      <anchor>a0471c69344137b9065b0c26db9d43639</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Point3DROImpl</name>
    <filename>structmc__rtc_1_1gui_1_1Point3DROImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>Point3DROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DROImpl.html</anchorfile>
      <anchor>adbfe7a2b3ff83932027e08f0c95d663b</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DROImpl.html</anchorfile>
      <anchor>a2b4d2003ac770437919c754325d04134</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3DROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DROImpl.html</anchorfile>
      <anchor>a3a11467db7f88a9eab78a93aee90227b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DROImpl.html</anchorfile>
      <anchor>abe5261acb5b704491064407a9b734b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1Point3DROImpl.html</anchorfile>
      <anchor>a91b7374b66df426ff377ec34f124e73b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::PointConfig</name>
    <filename>structmc__rtc_1_1gui_1_1PointConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>PointConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>a1561d8ebb70e3cb79de4ccab8c1d9f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>a292175258d872208e99632ac1552700b</anchor>
      <arglist>(const Color &amp;color, double scale=0.02)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>a8277e9a9b0552925512c2c5bf13e27af</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>a08c22b5386fde106ddf066db1992436f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>a0c87c28f6793444f6e36faa286ada4f5</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>saveConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>acab9db007b58f49e3c728cebd47f325a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>a21cfe22ca3c76493be3f27788a18c0bf</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>aceab827e57173288e6abee5abf7cf368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>a322a868c95c738f131da19c405ca0fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PointConfig.html</anchorfile>
      <anchor>aec3bebebe03aa2f57a8e9dfab49e55a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Polygon</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygon.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygon.html</anchorfile>
      <anchor>af7e96bad2cd93f2b0eaecbf94e8ce4c2</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygon.html</anchorfile>
      <anchor>a5cad8ea3b30915d71a70df177591e536</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygon.html</anchorfile>
      <anchor>a1a0f735aa2d0b506b0edf6a0f3ee4c2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Polygon &amp;</type>
      <name>side</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygon.html</anchorfile>
      <anchor>ab7683b7758fdcb4c826c57eb7ef37800</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygon.html</anchorfile>
      <anchor>a5c7df3c2bb038af2fd07bc822c1af1bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::PolygonDescription</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</filename>
    <member kind="function">
      <type></type>
      <name>PolygonDescription</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a5be9ba163395960fd1d95bc337b64f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonDescription</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a45ab1398054c73f857e813161bb32c62</anchor>
      <arglist>(const std::vector&lt; std::array&lt; double, 2 &gt;&gt; &amp;points, Color outline)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a986eec4f659dde33b1f088dcd6eb6a76</anchor>
      <arglist>(const PolygonDescription &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a7884ac843c48bb36e535e47536ed5760</anchor>
      <arglist>(const PolygonDescription &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::array&lt; double, 2 &gt; &gt; &amp;</type>
      <name>points</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>aa204e03fc3c231dd512ad16a49dad13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>outline</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a11b53d1bd311213f34519625ef36294c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Style &amp;</type>
      <name>style</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a00a7628372d8f7a8fcb4ae2532c8ca86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>fill</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>acc0a5ccc455b33de968ad47b6a7c3304</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a99a003e4a0d4e2ce48862fecfb0a88d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::array&lt; double, 2 &gt; &gt; &amp;</type>
      <name>points</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>aa8fe64b962d6123e29fbf76b29b281c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>outline</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>affe6dfc002b26a7d843a7d38d820e6ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Style &amp;</type>
      <name>style</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a4968cba9d0023d60683f78c1d1cd02eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>fill</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a21e66484a0090462d342bac31950af58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a5ecd84419861a68c359818643062aa52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>outline</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a999e059af7743423fd58768dc17e2994</anchor>
      <arglist>(const Color &amp;outline)</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>style</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>ac77e54fdbd9679a2ee38b3386fd0a227</anchor>
      <arglist>(const Style &amp;style)</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>fill</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a48bd152b874c8b3afbda87b671f0a7f4</anchor>
      <arglist>(const Color &amp;fill)</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>closed</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>acb8f660f859e833c99de6513966fe4bb</anchor>
      <arglist>(bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a2b88e37e62c39584faa67e967f4cb8b4</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1PolygonDescription.html</anchorfile>
      <anchor>a698a8c16a8dfd0a6c16e00f13ab3b914</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::PolygonImpl</name>
    <filename>structmc__rtc_1_1gui_1_1PolygonImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>PolygonImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolygonImpl.html</anchorfile>
      <anchor>a413d53c3e929a5449f01e6519af45598</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolygonImpl.html</anchorfile>
      <anchor>a9c908c6704072d862688c0dcd3f1de73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolygonImpl.html</anchorfile>
      <anchor>a1896414f0415b4fa49e11934bde4c612</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolygonImpl.html</anchorfile>
      <anchor>af8c8a207d5a4859a307ba1a213515562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolygonImpl.html</anchorfile>
      <anchor>a121a2efa2d2ab80bd1ef5f528ec2bb36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::PolygonInterpolator</name>
    <filename>structmc__rbdyn_1_1PolygonInterpolator.html</filename>
    <member kind="typedef">
      <type>std::array&lt; double, 2 &gt;</type>
      <name>tuple_t</name>
      <anchorfile>structmc__rbdyn_1_1PolygonInterpolator.html</anchorfile>
      <anchor>a8667e5bd25c0215d10ce8e139028207d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; tuple_t, tuple_t &gt;</type>
      <name>tuple_pair_t</name>
      <anchorfile>structmc__rbdyn_1_1PolygonInterpolator.html</anchorfile>
      <anchor>adda7bb6a81b142d132c7772fe7b1672c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonInterpolator</name>
      <anchorfile>structmc__rbdyn_1_1PolygonInterpolator.html</anchorfile>
      <anchor>a279595aaf7f350b0247920b77efb8040</anchor>
      <arglist>(const std::vector&lt; tuple_pair_t &gt; &amp;tpv)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; geos::geom::Geometry &gt;</type>
      <name>fast_interpolate</name>
      <anchorfile>structmc__rbdyn_1_1PolygonInterpolator.html</anchorfile>
      <anchor>a41490869f7df5826143477c52ac3f236</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; tuple_t &gt;</type>
      <name>midpoint_derivative</name>
      <anchorfile>structmc__rbdyn_1_1PolygonInterpolator.html</anchorfile>
      <anchor>a5dbd705039482f156583eadaa91bd51a</anchor>
      <arglist>(double epsilon_derivative)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; tuple_t &gt;</type>
      <name>normal_derivative</name>
      <anchorfile>structmc__rbdyn_1_1PolygonInterpolator.html</anchorfile>
      <anchor>a8692430f5c1315d38bbc1a1f4798907c</anchor>
      <arglist>(double epsilon_derivative)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; tuple_pair_t &gt; &amp;</type>
      <name>tuple_pairs</name>
      <anchorfile>structmc__rbdyn_1_1PolygonInterpolator.html</anchorfile>
      <anchor>a8c6e2f6234920055ea5c7ab8e32434ee</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Polygons</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygons.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Polygons</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygons.html</anchorfile>
      <anchor>af5c1dd31a2d012206f2915a07a9f792c</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygons.html</anchorfile>
      <anchor>a881d4f1ec50acb6bb79e8db1605ac1ac</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygons.html</anchorfile>
      <anchor>a95c53448f7dada585abd8b36701859c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Polygons &amp;</type>
      <name>side</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygons.html</anchorfile>
      <anchor>ac8a95deed7837d208505cbe7d949844b</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1impl_1_1Polygons.html</anchorfile>
      <anchor>a9bac28b142bf3360b5d6a15aa09197fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::PolyhedronConfig</name>
    <filename>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>PolyhedronConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>af28549c89e5fa4384edee1ad0f9faa1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyhedronConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>af80df128b288bb11d44ae255a44b0b28</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a9f2b940d1dc0a044bdde4d84ea8b99c2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>saveConfig</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>ae43350292804b4d9a49db9dfea249c58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a1c4fb85814b326aa6ad294d5059349ce</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a8bb2687d569eb11c086242c43dd753e8</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a1eeda4dad2f2bf5ad14f815cfa57bf0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>triangle_color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>abfb2c75d6f1432be6f1eff37076f8bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>show_triangle</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a79d59b11727556847ba58e67c59a3774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_triangle_color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a5b8c4b94f3842035ad0081f773923b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineConfig</type>
      <name>edge_config</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a697312cc418b907744cee554d5d55a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>show_edges</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a980f44c5d63d11ee6911c5ef51a9228d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fixed_edge_color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a680f82eff40a172f69825aeb95a97fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PointConfig</type>
      <name>vertices_config</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>aa734896695957f84df0e49e6dc3a5e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>show_vertices</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a80778cd3434b42476d0235261c7a82aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fixed_vertices_color</name>
      <anchorfile>structmc__rtc_1_1gui_1_1PolyhedronConfig.html</anchorfile>
      <anchor>a145b7000dee7772c7504efa55f8e0e99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::PolyhedronTrianglesListImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</filename>
    <templarg>GetTrianglesT</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>PolyhedronTrianglesListImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</anchorfile>
      <anchor>a0544b1a5d18edb78fa26d334d3d02f9e</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetTrianglesT get_triangles_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyhedronTrianglesListImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</anchorfile>
      <anchor>ad7aa22362c25fd86d6283fd91b612f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</anchorfile>
      <anchor>a46c1864dcbbfc8c6b0ec5315a17df728</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</anchorfile>
      <anchor>a5c99257d3a703910b61fe904cb2d9d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</anchorfile>
      <anchor>af940c50d0d603a24189c52aa88ca266d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyhedronConfig</type>
      <name>config_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</anchorfile>
      <anchor>ad17c2b52641de3ef8231a285f1129b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetTrianglesT</type>
      <name>get_triangles_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronTrianglesListImpl.html</anchorfile>
      <anchor>a5a8d0768d9f25b064cf6456dc38ac56c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::PolyhedronVerticesTrianglesImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</filename>
    <templarg>GetVerticesT</templarg>
    <templarg>GetTrianglesT</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>PolyhedronVerticesTrianglesImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>a6cd91d3cc1e381d06e5eac5b3f17b8a1</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetVerticesT get_vertices_fn, GetTrianglesT get_triangles_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyhedronVerticesTrianglesImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>a6192845873ccd47ed30742dd90069e27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>a9677d07850b9f2dcfaf97054c9b99b97</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>a7f38388a58e5c83e508c73fe0010a058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>afbf3e0e965138dc3d9bec00919afe416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyhedronConfig</type>
      <name>config_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>afebe0ae416f92197e49a8f75a18badb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetVerticesT</type>
      <name>get_vertices_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>a5082ce6fed2e9cf6d35dcc5e03c17270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetTrianglesT</type>
      <name>get_triangles_fn_</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1PolyhedronVerticesTrianglesImpl.html</anchorfile>
      <anchor>a0bb8482dc4f0bb943d66d0339e1f1017</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::PositionBasedVisServoFunction</name>
    <filename>structmc__tvm_1_1PositionBasedVisServoFunction.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>PositionBasedVisServoFunction</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>acded5c13ef67f600cfc6a27446a53217</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a5d84f38ed6e505db44707a738c9df305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>error</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a9ea439c179bad33875725c77921c8da3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a07f17aa78aacb1056605ea3df64e6eef</anchor>
      <arglist>(const sva::PTransformd &amp;X_t_s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>af2ceabc07bdccdceb9956ed24c6192bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a1c622b86cf6cc80ed885f90b45c13cc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a2f42a80976b991ac3573de1db0b77ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a1da2035cb39da965731df1ffcd2fa3a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a80ed1123a17fd5b5cbd8d8ed035ea9b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>aa723ba88e607e7b9fc81e0f62fec5e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::RobotFrame &amp;</type>
      <name>tvm_frame_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a9022a8b5bc2f29fadf5f404e9b6a02a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_t_s_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a59b2b92a86af24677e10d3e24cd5ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Jacobian</type>
      <name>frameJac_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a2404882def8007b9fc84436a87cab083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a2ad89e64d8033f8b975cc814ee27cc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>axis_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a821b84489a77ac3bd4282fca53e73847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; double, 6, 6 &gt;</type>
      <name>L_pbvs_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a923364e1aafc71e26b4c181e7feabd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>frameVelocity_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>aa798fe0053b42c0a34595adea6b35b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>omegaSkew_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>a47b97c8be0d742af60ad6c9127cfde54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; double, 6, 6 &gt;</type>
      <name>L_pbvs_dot_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>af2a128af9c0b94d7bc55d3d3a9ea0849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>shortJacMat_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>af564c2bc549d9f4a4693cb3d8d8941d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacMat_</name>
      <anchorfile>structmc__tvm_1_1PositionBasedVisServoFunction.html</anchorfile>
      <anchor>af30424d3f6c0ff11d16aaccc15243ae4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::PositionBasedVisServoTask</name>
    <filename>structmc__tasks_1_1PositionBasedVisServoTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>structmc__tasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a9cc81a8586f6a7232fc6cf1f92aaf0dc</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const sva::PTransformd &amp;X_t_s=sva::PTransformd::Identity(), double stiffness=2.0, double weight=500.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>structmc__tasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>ae2cab369aedb3678ebd9b4687faa8ba9</anchor>
      <arglist>(const std::string &amp;bodyName, const sva::PTransformd &amp;X_t_s, const sva::PTransformd &amp;X_b_s, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>structmc__tasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>ab210ce2c552242965b7bd04b02d91517</anchor>
      <arglist>(const std::string &amp;surfaceName, const sva::PTransformd &amp;X_t_s, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a560ab2d140d96dc63db722bcbb9c5bb0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>structmc__tasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>aa2e8c33c6432ee68e91a59ed396fdd2a</anchor>
      <arglist>(const sva::PTransformd &amp;X_t_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1PositionBasedVisServoTask.html</anchorfile>
      <anchor>a1c5a2a63cff774edab49e058c63344d6</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_tvm::PositionFunction</name>
    <filename>classmc__tvm_1_1PositionFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionFunction</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>af4baff41fc54c443b4f1f85a694b5474</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a4fb1bcf0613307bdfe649923e02a39f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>ad2c016c7b54525078d58c89c47ab1a59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a7c1417bb4963d80848c9010e9d180a3a</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a52914407e52948d7fb6372ab190023f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>ac06eba42724a147217f5cea8c87d641f</anchor>
      <arglist>(const Eigen::Vector3d &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a3372625fe6d33ab1f635a21f8a3dd044</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a3d0f0422b9eb51cd28129128bf241e35</anchor>
      <arglist>(const Eigen::Vector3d &amp;refAccel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a3170837cc563df60430d6a604b5dd1b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a53fb98be14baccd4edeecba222f1b411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a40235ff5dea155619eb76466e2456a9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a0a9941c4208207b79ad9fd4c61a702f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a51262e8fc439c6c5ffcb9b6b79177241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>robot_frame_</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>aebde188d4f3dddde7b03ddcc8d93631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::RobotFrame &amp;</type>
      <name>frame_</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>ab5e742cbebf13301e4722643a3dd7fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>pos_</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>acc9166d763fc45717752cc61a985bf96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>refVel_</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>ac17719d150aa6c3eb097229252d0c4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>refAccel_</name>
      <anchorfile>classmc__tvm_1_1PositionFunction.html</anchorfile>
      <anchor>a2ed0081214e5e39aa3732ab34fe16f90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::PositionTask</name>
    <filename>structmc__tasks_1_1PositionTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>aa378d22beb76bd40f05e36e2418d486b</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=2.0, double weight=500.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>af67679b5190933536dbc6f20adc44aac</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PositionTask</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>a8b27ece320044774405b64dcfd78147c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>a86e8cb6cb49e5269c931ed57eda6e113</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>ada68a975c5586850572384f476a77883</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>a048c94abdb15f43ba0eb3504c724ea9d</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyPoint</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>a346759f0552355a22d302ee7d91673b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>a4424ab1a1faf897723d2f3bdbacc3f97</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>a1ace65857e5ada474531dcffc700924f</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>a4e0abb585b67f4f3026269e5809e41d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>EndEffectorTask</name>
      <anchorfile>structmc__tasks_1_1PositionTask.html</anchorfile>
      <anchor>ab333c1b08462c2014c404b1b2b886246</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_tvm::PostureFunction</name>
    <filename>classmc__tvm_1_1PostureFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>PostureFunction</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>aee9c255113c5ea9b781ab7c82717dc80</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a35ff5742076989e3bc0d8827b0525b7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>ac44b94db01c5d622d1a2e7d5e4e611d6</anchor>
      <arglist>(const std::string &amp;j, const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a89ffdee091a648bf3a0f22efd1c621dd</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>posture</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>aed9ff5e5c1d0fe185a685bd157607ab3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>aa455918368adb44227238a35b686eb65</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a34752bdfb5c39af0bf94541339950ad5</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a09412d7de8949c69199b5986d7c66fe8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a640ebe5eb95bb143010cf8ff6f84803e</anchor>
      <arglist>(const Eigen::VectorXd &amp;acc) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue_</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a8fa65370558dfbb40730ad1118071c20</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity_</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>ab7a24a7c14627f908afbbb714eda7877</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot_</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a06c3493e609d98ed31c65ea2f0318aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture_</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>abda050d3c584d8e2d550f6b527b5ffef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>j0_</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a3c0e356a3be3e35cf36d9edd68fd371c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a15dd4e166b33b1926dec2bc14c8d7eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>classmc__tvm_1_1PostureFunction.html</anchorfile>
      <anchor>a67e36e915a9d013cf18f69fab85b0fc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::PostureState</name>
    <filename>structmc__control_1_1fsm_1_1PostureState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>ae535f27ff78363840512f7850f51a17e</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>ab68cbf75a3beb22126658a57ca72aef7</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>afbc73c24d06a1ef95a85235200d8261b</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>aa410943e2e016eda0929852cf14dc771</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>afcc5f1ab51ab6222d2fe7fbb9dd45f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>robot_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>afbbad8cf4b670f34889eb06c0d7053ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_control::CompletionCriteria</type>
      <name>crit_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>a83609f4952920e5a7bc53086f86e05b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasCompletion_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>a0dfd66172ec2a4bdf01074f23b5f19e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>completion_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PostureState.html</anchorfile>
      <anchor>ad64457d552cf564e95bbcd6cfa2b9d5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::PostureTask</name>
    <filename>structmc__tasks_1_1PostureTask.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type></type>
      <name>PostureTask</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a2236062d8e099d089e8f2c93dc4ba55e</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, unsigned int rIndex, double stiffness=1, double weight=10)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ac47c167b6a6c59546bbebfcabb5be810</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ab45e9fac8713b958118a1768429c7785</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a54864d44b0a39971ffe82a3c08b8c711</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>add36165bd4f34b697789531972948e22</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectActiveJoints</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>af3d5a7f71a7bfbc3cd92a40a8b5d432b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>afda9cd7d8bab32bc0644da110f06a4e3</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetJointsSelector</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a53ab7fdbe90e3b309a618bec3bb69859</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a529169e0178306b0eec9bf0f428752c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ab3327552ee53d6f191b04208baafd9a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a2299c6226e336a265adc283b2a600639</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a6ea106c9e2ebc76e2f806c0952dccb4c</anchor>
      <arglist>(const Eigen::VectorXd &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>afd5d9cc2500a4a70e7e7674a1ba95a9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a3c239b3603638379a2bb5457a226e0a9</anchor>
      <arglist>(const Eigen::VectorXd &amp;refAccel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ae2c51b7404320b8b41cff466ef24e0b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ad3d36333bd6d95d5bc742ad1de920ab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointGains</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a4d21d16164f3b18f45923a69a7198423</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const std::vector&lt; tasks::qp::JointGains &gt; &amp;jgs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointStiffness</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a3933b0c231304b52c0c4dc83080143cb</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const std::vector&lt; tasks::qp::JointStiffness &gt; &amp;jss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointWeights</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ab631271ec818743e5ea83a7d80bfbd17</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;jws)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>acb550b5465420b15d564c8df277b849a</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a15a1e19481a9a67cc4c0a9db183f7463</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a5110734784d263558b2ae937f2f74705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a46a7f613e697f5f5f1ad7db24d108649</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a0d4d5b303516826dac52c0177ac8f505</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>abefc10be93897ca14825c9124ec415e9</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>aa4725eea7614be3d2bcb54e16aa0f15c</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a0c8b2d553a214e9c07c1f51a4eaa4962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inSolver</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ab65cad427dd26ba032f9512de7fc374c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a875f742c1356787157c780f8c82140f1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a37fc0f741d63ef396c13a2ff3a528772</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>a47374edf3d1448c75f6306a0889b22bf</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>adfb4be7a8cd547a301878ba42ee52fb3</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1PostureTask.html</anchorfile>
      <anchor>ade3d279eeb005e261c75370747f86b19</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::PythonRWCallback</name>
    <filename>structmc__control_1_1PythonRWCallback.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>success</name>
      <anchorfile>structmc__control_1_1PythonRWCallback.html</anchorfile>
      <anchor>a6cdae0b0b750ab031e2abbb122d93aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>out</name>
      <anchorfile>structmc__control_1_1PythonRWCallback.html</anchorfile>
      <anchor>a2f171792f487d5b8b30aa5cad17305fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::PythonState</name>
    <filename>structmc__control_1_1fsm_1_1PythonState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>a7dc8a970df12a3389c02a09c3e8958b9</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>a3b21dcf4de9b50dbbbbfeb474a7f68fd</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>ace20a4b8937c36e5fb3e70af6a2caf91</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>ace45bc755a28523756c72678b5a794da</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>aa22feebf7d1e536225ce01b0f9b37495</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(const mc_rtc::Configuration &amp;)&gt;</type>
      <name>configure_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>ad1d95a9e55ecea05ca872eb5ac595e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Controller &amp;)&gt;</type>
      <name>start_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>a5dd07ae158c8b5cb2d7aae8182fa5726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; bool(Controller &amp;)&gt;</type>
      <name>run_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>aae1d211d3545e75cb310e23c0f018844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Controller &amp;)&gt;</type>
      <name>teardown_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>ac68780f5cde1e5c3c64139bb637040df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Controller &amp;)&gt;</type>
      <name>stop_</name>
      <anchorfile>structmc__control_1_1fsm_1_1PythonState.html</anchorfile>
      <anchor>a181b94b4ed108722e7433849cc08184d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::QPContactPtr</name>
    <filename>structmc__solver_1_1QPContactPtr.html</filename>
    <member kind="function">
      <type></type>
      <name>QPContactPtr</name>
      <anchorfile>structmc__solver_1_1QPContactPtr.html</anchorfile>
      <anchor>ae43784e3317dd1ab1d0d8f42926e5de7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>tasks::qp::UnilateralContact *</type>
      <name>unilateralContact</name>
      <anchorfile>structmc__solver_1_1QPContactPtr.html</anchorfile>
      <anchor>a8edb8058d39c00e880534c7d416819f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tasks::qp::BilateralContact *</type>
      <name>bilateralContact</name>
      <anchorfile>structmc__solver_1_1QPContactPtr.html</anchorfile>
      <anchor>a31a08f61bfa921fa79dde45a30f72aa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::QPContactPtrWPoints</name>
    <filename>structmc__solver_1_1QPContactPtrWPoints.html</filename>
    <member kind="variable">
      <type>QPContactPtr</type>
      <name>qpcontact_ptr</name>
      <anchorfile>structmc__solver_1_1QPContactPtrWPoints.html</anchorfile>
      <anchor>a18f4220244dc364488e15a5b6fc7bdf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>points</name>
      <anchorfile>structmc__solver_1_1QPContactPtrWPoints.html</anchorfile>
      <anchor>a0b18450a98acf02d8b5b56b0c74e84a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::QPSolver</name>
    <filename>structmc__solver_1_1QPSolver.html</filename>
    <class kind="struct">mc_solver::QPSolver::ControllerToken</class>
    <member kind="enumeration">
      <type></type>
      <name>Backend</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a62bf1f254f95bb13b9b00b855ca74e2e</anchor>
      <arglist></arglist>
      <enumvalue file="structmc__solver_1_1QPSolver.html" anchor="a62bf1f254f95bb13b9b00b855ca74e2eac9f88e098f6fe4e4e112eeb05ccb9671">Unset</enumvalue>
      <enumvalue file="structmc__solver_1_1QPSolver.html" anchor="a62bf1f254f95bb13b9b00b855ca74e2eaef615563c8e8ea902c7fcac3cd2c4246">Tasks</enumvalue>
      <enumvalue file="structmc__solver_1_1QPSolver.html" anchor="a62bf1f254f95bb13b9b00b855ca74e2eabac5ddf2deb6882add7482e934c92a2e">TVM</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>QPSolver</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a69ab49231d37233e1b5248b418febdc3</anchor>
      <arglist>(mc_rbdyn::RobotsPtr robots, double timeStep, Backend backend)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPSolver</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a194ebdbf5606a516e5b06aac1e6ca6a4</anchor>
      <arglist>(double timeStep, Backend backend)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QPSolver</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a3790dba884300b905da43b8378a9ba9d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Backend</type>
      <name>backend</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a51d3c043e44c49f5371d692e95749d9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraintSet</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a37580a89d1a0d1a862dfb6b7240e6dd0</anchor>
      <arglist>(ConstraintSet &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraintSet</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>aebef0e7a739f0e970d589014bf3970f3</anchor>
      <arglist>(const std::unique_ptr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraintSet</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a2d48a1aa9f88ea1c6873000df4299a1d</anchor>
      <arglist>(ConstraintSet &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraintSet</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a5724970aca4eb969a875e77159be09bc</anchor>
      <arglist>(const std::unique_ptr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a68cf69e4985228c83affeb35320c4c25</anchor>
      <arglist>(mc_tasks::MetaTask *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a239fd4dc8875a2cd0c8650513dae8e58</anchor>
      <arglist>(std::shared_ptr&lt; mc_tasks::MetaTask &gt; task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a28e05133ff619c24f30a376e951fde51</anchor>
      <arglist>(mc_tasks::MetaTask *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a8f1d160aede965182f56fe36cd69b5c5</anchor>
      <arglist>(std::shared_ptr&lt; mc_tasks::MetaTask &gt; task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ae628e7f079f7ec8dd5ba2818ffe27adc</anchor>
      <arglist>(const std::vector&lt; mc_rbdyn::Contact &gt; &amp;contacts={})</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setContacts</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a47437e01c4e6e215ff7a9fbd966f615f</anchor>
      <arglist>(ControllerToken, const std::vector&lt; mc_rbdyn::Contact &gt; &amp;contacts)=0</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::Contact &gt; &amp;</type>
      <name>contacts</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a14141ec983c638fb3400c1ea23c19aed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_tasks::MetaTask * &gt; &amp;</type>
      <name>tasks</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ae04be5acbc6d5470efc60889e4024290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sva::ForceVecd</type>
      <name>desiredContactForce</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a8c489e73cefe34260ea02015e59ea15a</anchor>
      <arglist>(const mc_rbdyn::Contact &amp;id) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ab8f45ed05cf2852c592659d496b2acbb</anchor>
      <arglist>(FeedbackType fType=FeedbackType::None)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a07536ec6c134bd3f335a382a0a87d55e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a9de399f8ca81b31588579ac59deb8d44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a50b2ba3514b0bd8fa4e4775f6a74fc73</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a71a644e823553814792909b06f00f6c6</anchor>
      <arglist>(unsigned int idx) const</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>af48a56a36d044fa4077f1c9e0ad69936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ae35ec2765a45413bcfebae5e57bcea5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>aad5585a2e93a0dcac5f96b1ecf8cddf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>afadc51df1ed896ae8e1546bfb7443ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a6c9e02613427dd8ab79f833d4244186d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>acac203b080dfbd7dbc680e4d9e8aaa3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>aaf2cd366ed6fa6e21e9cc6833e94cd70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>solveTime</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ab4a6f65ecfc19ec7c662fee29ed3125f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>solveAndBuildTime</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a4fdc43b5c12ffef1c046652c45b85fc1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logger</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a6d2e5c1529e97fa15bff07a9092b1339</anchor>
      <arglist>(std::shared_ptr&lt; mc_rtc::Logger &gt; logger)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rtc::Logger &gt;</type>
      <name>logger</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ae805619eed38900664c15a1f3be7921f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gui</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ac015f44b8b157dafe8303dd295e10e8d</anchor>
      <arglist>(std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt; gui)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt;</type>
      <name>gui</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>aaff0d1437fd451774eb7a306b2c5d464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>controller</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>abf3f4a5e5e9ea19abe0470f895fd4e87</anchor>
      <arglist>(mc_control::MCController *ctl) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_control::MCController *</type>
      <name>controller</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ac5707d58c532fa30818d9d32fb682efd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_control::MCController *</type>
      <name>controller</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a65cd4e85c4dd975769cfabf7a46a0686</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Backend</type>
      <name>context_backend</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a71edbdef006f12ddb348ec72ffca3b07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>context_backend</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a88cfc471ffd18bc1de4c16b9ed499b57</anchor>
      <arglist>(Backend backend)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addTaskToGUI</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a91c47fed841e680af5c8923c81fafdf0</anchor>
      <arglist>(mc_tasks::MetaTask *task)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>run_impl</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>af9d03e836739ebbe8a4fe468c89a1318</anchor>
      <arglist>(FeedbackType fType=FeedbackType::None)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addDynamicsConstraint</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a0635ccca0bdc72d911c781525cccc41d</anchor>
      <arglist>(mc_solver::DynamicsConstraint *dynamics)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>removeDynamicsConstraint</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a85d0e4fb301e39c47a0b7ed92a939efe</anchor>
      <arglist>(mc_solver::ConstraintSet *maybe_dynamics)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Backend</type>
      <name>backend_</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>acf166ad62760055af87fafdbcf56ea25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::RobotsPtr</type>
      <name>robots_p</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>ac5be9324ec0346d8070e465bdf0dfc36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::RobotsPtr</type>
      <name>realRobots_p</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a43c54369fed8652576d3f3b9f362b11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeStep</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a1b146ac9f3abd34003eb2ef6e4033178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_rbdyn::Contact &gt;</type>
      <name>contacts_</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>aa9c11b128edf6d6a2e73551b01dd76f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_tasks::MetaTask * &gt;</type>
      <name>metaTasks_</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a7b3f2393d7a8dc5f700d9040b4283f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; void &gt; &gt;</type>
      <name>shPtrTasksStorage</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>abb156b608ddea2e15dd1f00efd2bcb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_rtc::Logger &gt;</type>
      <name>logger_</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a16aae96dcf217841ba84452ae694421e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt;</type>
      <name>gui_</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>aa5f3fcb18a5acb0376d611fb94720224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_control::MCController *</type>
      <name>controller_</name>
      <anchorfile>structmc__solver_1_1QPSolver.html</anchorfile>
      <anchor>a9327d98c17891686d929ccb6b679729e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::QuadraticGenerator</name>
    <filename>structmc__rbdyn_1_1QuadraticGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>QuadraticGenerator</name>
      <anchorfile>structmc__rbdyn_1_1QuadraticGenerator.html</anchorfile>
      <anchor>a40b29a7315dee567088c1db1c49108c6</anchor>
      <arglist>(double start, double end, unsigned int nrSteps, unsigned int proportion=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>structmc__rbdyn_1_1QuadraticGenerator.html</anchorfile>
      <anchor>a33ad0aaa5c9df283c15376186e1defd0</anchor>
      <arglist>(double &amp;percentOut, double &amp;speedOut)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::Range</name>
    <filename>structmc__rtc_1_1gui_1_1plot_1_1Range.html</filename>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1Range.html</anchorfile>
      <anchor>aead20688a3c041cd852dd71c98cfc15b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1Range.html</anchorfile>
      <anchor>ae57efd48b0202aac88fd98578af24993</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromMessagePack</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1Range.html</anchorfile>
      <anchor>aebe4e2f3fb96dce94a8a783b691cde52</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1Range.html</anchorfile>
      <anchor>aa6b749d005afc464c84b138a2d72ae79</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1Range.html</anchorfile>
      <anchor>a3626d90084b55cd8a94307e620a09062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1Range.html</anchorfile>
      <anchor>a85f2d2500191f058985f2d32ea40583d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>inf</name>
      <anchorfile>structmc__rtc_1_1gui_1_1plot_1_1Range.html</anchorfile>
      <anchor>ab995e2707a19a7b8beb6b05bbeffa3b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::FlatLog::record</name>
    <filename>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; void, void(*)(void const *)&gt;</type>
      <name>unique_void_ptr</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>a4e556fb8cf1154c39f535f18bbbbf2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>a1189082dce7ec759c42e551534f5b158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>a687a3142850022473bc2724a024a2597</anchor>
      <arglist>(LogType t, unique_void_ptr &amp;&amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>ad2377ca354cb3b3d61500c1eee451d69</anchor>
      <arglist>(const record &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>record &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>a447e5c16c3e286bb51a0a90b0f4ef182</anchor>
      <arglist>(const record &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>afb9458b8f743e9f2e8ce8ee0911e38c8</anchor>
      <arglist>(record &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>record &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>af03a9665af14ae1a3a0545ea86d94804</anchor>
      <arglist>(record &amp;&amp;)=default</arglist>
    </member>
    <member kind="variable">
      <type>LogType</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>a0796a1bb292299608b539563b87a8610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unique_void_ptr</type>
      <name>data</name>
      <anchorfile>structmc__rtc_1_1log_1_1FlatLog_1_1record.html</anchorfile>
      <anchor>a74d58f27e34799a1650342340dc35d0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::RelativeEndEffectorTask</name>
    <filename>structmc__tasks_1_1RelativeEndEffectorTask.html</filename>
    <base>mc_tasks::EndEffectorTask</base>
    <member kind="function">
      <type></type>
      <name>RelativeEndEffectorTask</name>
      <anchorfile>structmc__tasks_1_1RelativeEndEffectorTask.html</anchorfile>
      <anchor>a942d75993cc492b3f7dc5d70b23447bd</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const mc_rbdyn::Frame &amp;relative, double stiffness=10.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeEndEffectorTask</name>
      <anchorfile>structmc__tasks_1_1RelativeEndEffectorTask.html</anchorfile>
      <anchor>a0158f37c233bf4855f02a8fdacd90729</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;relBodyName=&quot;&quot;, double stiffness=10.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1RelativeEndEffectorTask.html</anchorfile>
      <anchor>a793bf82d0b0f17d0e9c72cfdd131fa67</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_ef_pose</name>
      <anchorfile>structmc__tasks_1_1RelativeEndEffectorTask.html</anchorfile>
      <anchor>a4d6f1803464ba94a80db138123662075</anchor>
      <arglist>(const sva::PTransformd &amp;dtr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ef_pose</name>
      <anchorfile>structmc__tasks_1_1RelativeEndEffectorTask.html</anchorfile>
      <anchor>a3fc5bfbf363efddcf3f2441b91ff8b0e</anchor>
      <arglist>(const sva::PTransformd &amp;tf) override</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>get_ef_pose</name>
      <anchorfile>structmc__tasks_1_1RelativeEndEffectorTask.html</anchorfile>
      <anchor>a0566da4a9b213b3beda917e35cfb9ad2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1RelativeEndEffectorTask.html</anchorfile>
      <anchor>a7bf4110ad02234504fb7e89ff8c9301b</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::RemoveContactTask</name>
    <filename>structmc__tasks_1_1RemoveContactTask.html</filename>
    <base>mc_tasks::AddRemoveContactTask</base>
    <member kind="function">
      <type></type>
      <name>RemoveContactTask</name>
      <anchorfile>structmc__tasks_1_1RemoveContactTask.html</anchorfile>
      <anchor>a6be76449c889b558b10232dc9e21f62a</anchor>
      <arglist>(mc_rbdyn::Robots &amp;robots, std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt; constSpeedConstr, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoveContactTask</name>
      <anchorfile>structmc__tasks_1_1RemoveContactTask.html</anchorfile>
      <anchor>a2015e5fecd242b335889e417ef01f98b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::ReturnType</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1ReturnType.html</filename>
    <templarg>GetT</templarg>
    <member kind="typedef">
      <type>typename ReturnTypeImpl&lt; GetT, is_getter&lt; GetT &gt;()&gt;::type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ReturnType.html</anchorfile>
      <anchor>ab6207cc1ecd0aadbee1ecaa1ef6539e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::ReturnTypeImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1ReturnTypeImpl.html</filename>
    <templarg></templarg>
    <templarg>is_getter</templarg>
    <member kind="typedef">
      <type>typename std::decay&lt; decltype(std::declval&lt; GetT &gt;()())&gt;::type</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ReturnTypeImpl.html</anchorfile>
      <anchor>a5a3df0788be8eb6cd296e4917c0ec4e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::ReturnTypeImpl&lt; GetT, false &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1ReturnTypeImpl_3_01GetT_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>NotAGetter</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1ReturnTypeImpl_3_01GetT_00_01false_01_4.html</anchorfile>
      <anchor>a97ff1728910e7c8d32a36cc9b50fe8bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Robot</name>
    <filename>structmc__rbdyn_1_1Robot.html</filename>
    <class kind="struct">mc_rbdyn::Robot::NewRobotToken</class>
    <member kind="typedef">
      <type>std::pair&lt; std::string, S_ObjectPtr &gt;</type>
      <name>convex_pair_t</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aeaf56b7bf79a4e2be37e3c8615d156ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a132b55076c2d2b1045d0d71ff08b5065</anchor>
      <arglist>(Robot &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a410eefe8c059340207a45a1d79be6221</anchor>
      <arglist>(Robot &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Robot</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a84da94b87e530bead44b2c852755601d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a9f0c4c44861063b684d43d4ad78a995e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RobotModule &amp;</type>
      <name>module</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a3e734d771ca6cf96801de8765cee637d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jointHasJointSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8e27a5f9fb46fdf980254c4ac5761f94</anchor>
      <arglist>(const std::string &amp;joint) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const JointSensor &amp;</type>
      <name>jointJointSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a6354b734b171f226d1fadc9a12aeef31</anchor>
      <arglist>(const std::string &amp;joint) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointSensor &gt; &amp;</type>
      <name>jointSensors</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a06bea736214045982c99b3c70e660ae1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJoint</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aafb78a38ec8b2037519f030140a95976</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBody</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8353aa6a66630a85c9249298ed960c6a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFrame</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4dce036249f32a7cd0f0257956be990e</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac68ae766d6de9d5f8740001ac10a62db</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ad3d92cb0d6c4ba8c42ee9a35a7d56bab</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>frames</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8c6c471776005048105c48791df73ea5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RobotFrame &amp;</type>
      <name>makeFrame</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ad4db0746e4af259c63c288695f72beac</anchor>
      <arglist>(const std::string &amp;name, RobotFrame &amp;parent, sva::PTransformd X_p_f, bool baked=false)</arglist>
    </member>
    <member kind="function">
      <type>RobotFramePtr</type>
      <name>makeTemporaryFrame</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa59b1b6223978e23cb2ea636ddee0ceb</anchor>
      <arglist>(const std::string &amp;name, const RobotFrame &amp;parent, sva::PTransformd X_p_f, bool baked=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeFrames</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab70f3348aeda8560aa5740227eba3e1f</anchor>
      <arglist>(std::vector&lt; mc_rbdyn::RobotModule::FrameDescription &gt; frames)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSurface</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a47874ad9d5abdcd85701b02e2c85cefb</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Surface &amp;</type>
      <name>surface</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa4b724e51881215dd4293f9578656755</anchor>
      <arglist>(const std::string &amp;sName)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Surface &amp;</type>
      <name>surface</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a032e4252cb8c2c1d2ab82bd353b1cfb2</anchor>
      <arglist>(const std::string &amp;sName) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>surfacePose</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a0c21632fb2dc076e87cc4f4b6f840ddb</anchor>
      <arglist>(const std::string &amp;sName) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Surface &amp;</type>
      <name>copySurface</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a9eac94be22b1481eaae48d110d97c49e</anchor>
      <arglist>(const std::string &amp;sName, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSurface</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a02691447f1d554276f01339ba6c3aad7</anchor>
      <arglist>(mc_rbdyn::SurfacePtr surface, bool doNotReplace=true)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, mc_rbdyn::SurfacePtr &gt; &amp;</type>
      <name>surfaces</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aee61e66a131e6f3e24982d4c68ffe958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>availableSurfaces</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aac0e0346563b3ba8d3fda355e27367a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConvex</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a75aa71c0145f03a620619e8fe8b96107</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>convex_pair_t &amp;</type>
      <name>convex</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7fa487585e4b6d447c69ba78d9eca203</anchor>
      <arglist>(const std::string &amp;cName)</arglist>
    </member>
    <member kind="function">
      <type>const convex_pair_t &amp;</type>
      <name>convex</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a2b2dc756cfb84c337de115384febab34</anchor>
      <arglist>(const std::string &amp;cName) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, convex_pair_t &gt; &amp;</type>
      <name>convexes</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa176323f1dd1dc8f29ad40ccd4b23c9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConvex</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae30c16125ec220e6525f86339d894a3c</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;body, S_ObjectPtr convex, const sva::PTransformd &amp;X_b_c=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConvex</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a3296b923f06db47d80641b7acf46e5bf</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyTransform</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a91bd5ae09effe07a9a766050bcfee859</anchor>
      <arglist>(const std::string &amp;bName) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyTransform</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a022bd9c9318d298da53c823ca93b5f1c</anchor>
      <arglist>(int bodyIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyTransforms</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a135b6be808af82a5b0d21ffda5a8fe17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>collisionTransform</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af239b709cd1907f1aa264dfa2cb9fd15</anchor>
      <arglist>(const std::string &amp;cName) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadRSDFFromDir</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1554209253be449c1fb4cdd7e3d2478d</anchor>
      <arglist>(const std::string &amp;surfaceDir)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::vector&lt; double &gt; &gt;</type>
      <name>stance</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac4b932fc4c4956b16490006dd8591d0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4a2161c1f89c0b9e3a812ca390ff7666</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a6c413ebff3be3f588eff569106ba4426</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af110c909887516af9f6758118978b643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardKinematics</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae46b693d4431e61db9f1d4a05f66dd5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardKinematics</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a9520af131693e9b873ce4c37513cfa1d</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardVelocity</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afd93342dd86da6803288346a3798d374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardVelocity</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a73998aca81be7062371f39ce5d60756a</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab7c546ec0809807016d316229d1d29c0</anchor>
      <arglist>(const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ad5564b8d60b3dd8fa3e88e31f8f93a02</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero())) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eulerIntegration</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>acd1794c11cac282d7c042216d431ebb7</anchor>
      <arglist>(double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eulerIntegration</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae8d130fc22dda8e9bfbecad28acc26a5</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc, double step) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>posW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a48843047df8893808f80971fa3f9257f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a54fe0da3fe099906b79cb20de8076659</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a50f3f6250f68bac91a2594e9e6383b2f</anchor>
      <arglist>(const sva::MotionVecd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a38618f0ff197fccef53069f51e9fcafc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8c7a59334340cf8b44a10c6c9cb64d76</anchor>
      <arglist>(const sva::MotionVecd &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd</type>
      <name>accW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a30b21b6e828397cebd4f015cf9e87f44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_control::Gripper &amp;</type>
      <name>gripper</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8b970df4059237f37021b47d5aaf2494</anchor>
      <arglist>(const std::string &amp;gripper)</arglist>
    </member>
    <member kind="function">
      <type>const mc_control::Gripper &amp;</type>
      <name>gripper</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac1c37bc25e3eb43bd7f040c252647e64</anchor>
      <arglist>(const std::string &amp;gripper) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGripper</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae15e501f93c406e3ad5d19ab6904bd4e</anchor>
      <arglist>(const std::string &amp;gripper) const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, mc_control::GripperPtr &gt; &amp;</type>
      <name>grippersByName</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae446ae5052274ecd2b2c8d8a641d02c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_control::GripperRef &gt; &amp;</type>
      <name>grippers</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a461d76c25d7b7d24be8f73afa1471e03</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const RobotDataPtr</type>
      <name>data</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af35e2fdc9ec56540b48e9bd5247c7b2b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mc_tvm::Robot &amp;</type>
      <name>tvmRobot</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae8ceee5e97be39dced4c2fc1e1d32a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_tvm::Convex &amp;</type>
      <name>tvmConvex</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1f10151a30f06aafd99ecb2ed7b2738e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af401606c1f14455ae3fb2e642c2b5ade</anchor>
      <arglist>(NewRobotToken, const std::string &amp;name, Robots &amp;robots, unsigned int robots_idx, bool loadFiles, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a41b7c80447b0d61661bfc2a0242eaa8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a52d953d97ba1f0fbeed5e208e78e3d97</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasBodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aaf5526be81e352a5fa7ce4038ba39052</anchor>
      <arglist>(const std::string &amp;body) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a6e04286463ae6f91105c0b83ef370da8</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodyBodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac4faa529e12f2d401c2d7a805f07ae75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afc810f916462cb34c4126220f4f8a3e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>jointIndexByName</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7ad6afc9dd0267860a325771e7f87ea1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jointIndexInMBC</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a3662367cdf4edb974bdad793b1189b20</anchor>
      <arglist>(size_t jointIndex) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bodyIndexByName</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a5309b5ef9bb5b91bf0f1adb59813bde4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a79bdab3efcd9ada4d2b3aefa53374af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab09b1765903debcc06dce65ce830cfc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a0051e9ce612a34601d6934f7d5caaeb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aece5a00f65317b116f70ed2937239421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a900ba960e115fa967889ebdb842f6a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a78336b8d90c933da75cd138227072321</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a485eb8aa4ceb0a0a5010844d16e47f95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a5773f91f2a9d0eb5cb4b6a0943551a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aeca1f147be470012cb1203f95d5c5abe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a95798f9588d0656c61558ab20ad935b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>controlTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a855db41e44bee30fa7f6ecabc87eba55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7e9415aa6bf2421a5e76bd85b04359b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aad1bcd2edaa8eeb17033ae3fafe1bde8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac4ce1f653158bc3b79dd903ee1c05d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1e4739f4a8c3d2ac6a20797e7287b959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8ad8d3434a21adb16f8c41a5444ea067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ad36db2265563e037f7b98f2a3b8ac826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a611ff3ed6802a623056076abba7283ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af946d00c2f9e36ed5c0899f237f35c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>controlTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac6da2c5953ec1e782c4ae965c463d7d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>adf0aad75ddf11178d780abe0a64d7021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a252c64f915ca619afcdcf27e9dd63dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a54b38b6bbe93a7b6cc48d9091e9ee8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>accfdb088e19e290eea18767e249ca79e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af7764d03bd41fedfa98443d4a0b262e9</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a76547cf0aab26354dad897265d6060ee</anchor>
      <arglist>(const std::string &amp;b1, const std::string &amp;b2) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>abc4808b0299894e9343b6c27b1cc6e14</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a86619b4049ec59d383a445bafe43830e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a81e766814295ca73b3bf6da8e90f4421</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4e858c693b7e94ded9704e13463e1ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comVelocity</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa17c3d6b4bff8b9bcbedad822a86fdbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a68f1932b13b8a4589f66dd792522e1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>surfaceWrench</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a928b9370f7643511d1ec80892245fb88</anchor>
      <arglist>(const std::string &amp;surfaceName) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>bodyWrench</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a207f3ea22bce722a3d68ac37aed8ca03</anchor>
      <arglist>(const std::string &amp;bodyName) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>cop</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa4679daa562a23a753a3f5f77daa9861</anchor>
      <arglist>(const std::string &amp;frame, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>copW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a2b7aa66da24521f280bbc2d9c16cdda7</anchor>
      <arglist>(const std::string &amp;frame, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>netWrench</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a117494f13e48578a752a102e322189b0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a3d2dbbe9a2cb2c0eb61790cd7f3dc9c4</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
      <docanchor file="namespacemc__rbdyn">zmpDoc</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>acfcb02ade95368eba497ffab50bab0d2</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aca98040d3ecdb597c65f3615a06d588d</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa2224fc6a6299e9ed0ec8fdd8f3b3d4c</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a472551d6b434e3e5a2239b35cffc639b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4348f47e45430a9ed99a00c2940e2f00</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const std::vector&lt; std::string &gt; &amp;sensorNames, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4b62d2a94e3c81f2c436828bc9ed5186</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab8c0589359353a2d34b5f4331fa32793</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const std::vector&lt; std::string &gt; &amp;sensorNames, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac18cb6ecabada0aac1f823b7e9170308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac42c2ce3eea4e1100b4fc77b95821021</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab63444fe66136d722426aca78449d62a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac77b8ab43b004940508945dcb1234e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>al</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a353666f3eb88becdbde844f6e6915807</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>au</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab0b3183f0c2579662c80c1c94aca9410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a890c6fcf28ad497b922aaff1b536968a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ju</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a112f8dbb672b9911d63f479d57525241</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afd4cbabd88c9ee4565a2555dcc0208ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a74f8c3970a3aff460fc5abad5b493eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a9fa7e717817cab5e190f17d0397ff934</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a2607ecfbe200094f4bba59ac7c5c390d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afc061e1b33c4f633a04015ab3fb20f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac6915de62543382030defd22b9f8011c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8a8dbaec40be4ad0be51f4df67502d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae6c3ad6f7d81353b09689ea6e41eec34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>al</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab64263a01616ad04b3f5212fd5742fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>au</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab0b41cfc1ed67b789573ca788b6e79cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8f86bf8a4708ee63e116eb6bdd0f5bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ju</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a28c3d7ef8c743eebe234bf8f4fd418e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>adf6dfded6aa9e9c6ca6ff6d8e386b66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afe854537bd0f1fb8ab64ce91f5f6105d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a39a5fe0d5e143aae2d95ba39e56ab0a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a77a7831e452c28f863abba6992990ac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>adada908603cd6527095ccb940d6405bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a52b9f6334096f8f9534d4dfab3a89495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zmpTarget</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ad70ad9c81c418baf93ecccd6a75ff12f</anchor>
      <arglist>(const Eigen::Vector3d &amp;zmp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmpTarget</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8fa1d2571113230a15a6726fb06b91fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa368e46d6f3d90f8f4eca437358148f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderValues</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1da8134deea10a32f7d35fc381649606</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderVelocities</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8a2e3e0b4b0e226712007e9fe905f9e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>jointTorques</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af65b1b51c93d319952e2ae3965e204c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>refJointOrder</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a00856f04c24c914b9197fe11f2d573eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a42615f6ac857b53acb4ae0376c3986c7</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>acf845c2c3a0f18430986e4a752f08fe7</anchor>
      <arglist>(const std::string &amp;body) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>surfaceHasForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7fb66cf0e07c2f24d9329cce0f6e5d3b</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasIndirectForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af0f6539a36fe9c2e4dc05b1ef3765963</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>surfaceHasIndirectForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae05708ca15a7afb1c1b24315f4468356</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>forceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a40d807280f230919ff00adf3d43a5caa</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>bodyForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7d8ac9af47c038fda22f721e9c1d3a89</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor *</type>
      <name>findBodyForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>affafbe491eaf05a4cc9aba0a371beac1</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>surfaceForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ace64ab0161e9b00e262b408733d19629</anchor>
      <arglist>(const std::string &amp;surfaceName) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>indirectBodyForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a0c2ceb538921611b7b50a50634859e5f</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>indirectSurfaceForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a77d7387d7242da1e7c42420583dce311</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac3d3115ea3d21076f556ce974f299f0e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDevice</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a607854d4b0275f088553d91bbcdc9905</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a59d3c6669d54957b2bfd0125aaf83dca</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>device</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4e3272e412d22bf6d382117300c9ee42</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>device</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a6cff71ca3ef36a1f5b5a945d6e70b64b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtrVector &amp;</type>
      <name>devices</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac554847320d3540e5e7ac9d58baafca0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>sensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac945ba1c44d9dfb2f2312d13c8ed24b4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>sensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a72a8bd2c7daead0016449a6056fd2035</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDevice</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1736b85ddedafef83111d6c67ff6f129</anchor>
      <arglist>(DevicePtr device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>abc302e460bc53880eb062681e9e50a54</anchor>
      <arglist>(SensorPtr sensor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyLoadedData</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae2c28ca834c5d81e66f581425c2d7f16</anchor>
      <arglist>(Robot &amp;destination) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixSurfaces</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a218dfb7dbc50f94466e30871869b967d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixSurface</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a3d3381189f816f8871e540555a533e64</anchor>
      <arglist>(Surface &amp;surface)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixCollisionTransforms</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a005d9859a7272ac6dbcab9c31aef8092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>findIndirectForceSensorBodyName</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>adec9236c7e0a6848e0fb76704ea64372</anchor>
      <arglist>(const std::string &amp;bodyName) const</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robots</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7ea6242bb22401bac23542e1db3a74ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a41b7c80447b0d61661bfc2a0242eaa8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a52d953d97ba1f0fbeed5e208e78e3d97</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasBodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aaf5526be81e352a5fa7ce4038ba39052</anchor>
      <arglist>(const std::string &amp;body) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a6e04286463ae6f91105c0b83ef370da8</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodyBodySensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac4faa529e12f2d401c2d7a805f07ae75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afc810f916462cb34c4126220f4f8a3e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>jointIndexByName</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7ad6afc9dd0267860a325771e7f87ea1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jointIndexInMBC</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a3662367cdf4edb974bdad793b1189b20</anchor>
      <arglist>(size_t jointIndex) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bodyIndexByName</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a5309b5ef9bb5b91bf0f1adb59813bde4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a79bdab3efcd9ada4d2b3aefa53374af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab09b1765903debcc06dce65ce830cfc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a0051e9ce612a34601d6934f7d5caaeb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aece5a00f65317b116f70ed2937239421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a900ba960e115fa967889ebdb842f6a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a78336b8d90c933da75cd138227072321</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a485eb8aa4ceb0a0a5010844d16e47f95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a5773f91f2a9d0eb5cb4b6a0943551a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aeca1f147be470012cb1203f95d5c5abe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a95798f9588d0656c61558ab20ad935b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>controlTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a855db41e44bee30fa7f6ecabc87eba55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7e9415aa6bf2421a5e76bd85b04359b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aad1bcd2edaa8eeb17033ae3fafe1bde8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac4ce1f653158bc3b79dd903ee1c05d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1e4739f4a8c3d2ac6a20797e7287b959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8ad8d3434a21adb16f8c41a5444ea067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ad36db2265563e037f7b98f2a3b8ac826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a611ff3ed6802a623056076abba7283ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af946d00c2f9e36ed5c0899f237f35c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>controlTorque</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac6da2c5953ec1e782c4ae965c463d7d3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>adf0aad75ddf11178d780abe0a64d7021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a252c64f915ca619afcdcf27e9dd63dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a54b38b6bbe93a7b6cc48d9091e9ee8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>accfdb088e19e290eea18767e249ca79e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af7764d03bd41fedfa98443d4a0b262e9</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a76547cf0aab26354dad897265d6060ee</anchor>
      <arglist>(const std::string &amp;b1, const std::string &amp;b2) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>abc4808b0299894e9343b6c27b1cc6e14</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a86619b4049ec59d383a445bafe43830e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a81e766814295ca73b3bf6da8e90f4421</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4e858c693b7e94ded9704e13463e1ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comVelocity</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa17c3d6b4bff8b9bcbedad822a86fdbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comAcceleration</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a68f1932b13b8a4589f66dd792522e1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>surfaceWrench</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a928b9370f7643511d1ec80892245fb88</anchor>
      <arglist>(const std::string &amp;surfaceName) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>bodyWrench</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a207f3ea22bce722a3d68ac37aed8ca03</anchor>
      <arglist>(const std::string &amp;bodyName) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>cop</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa4679daa562a23a753a3f5f77daa9861</anchor>
      <arglist>(const std::string &amp;frame, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>copW</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a2b7aa66da24521f280bbc2d9c16cdda7</anchor>
      <arglist>(const std::string &amp;frame, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>netWrench</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a117494f13e48578a752a102e322189b0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a3d2dbbe9a2cb2c0eb61790cd7f3dc9c4</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
      <docanchor file="namespacemc__rbdyn">zmpDoc</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>acfcb02ade95368eba497ffab50bab0d2</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aca98040d3ecdb597c65f3615a06d588d</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa2224fc6a6299e9ed0ec8fdd8f3b3d4c</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a472551d6b434e3e5a2239b35cffc639b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4348f47e45430a9ed99a00c2940e2f00</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const std::vector&lt; std::string &gt; &amp;sensorNames, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4b62d2a94e3c81f2c436828bc9ed5186</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zmp</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab8c0589359353a2d34b5f4331fa32793</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const std::vector&lt; std::string &gt; &amp;sensorNames, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac18cb6ecabada0aac1f823b7e9170308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac42c2ce3eea4e1100b4fc77b95821021</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab63444fe66136d722426aca78449d62a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac77b8ab43b004940508945dcb1234e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>al</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a353666f3eb88becdbde844f6e6915807</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>au</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab0b3183f0c2579662c80c1c94aca9410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a890c6fcf28ad497b922aaff1b536968a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ju</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a112f8dbb672b9911d63f479d57525241</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afd4cbabd88c9ee4565a2555dcc0208ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a74f8c3970a3aff460fc5abad5b493eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a9fa7e717817cab5e190f17d0397ff934</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a2607ecfbe200094f4bba59ac7c5c390d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afc061e1b33c4f633a04015ab3fb20f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac6915de62543382030defd22b9f8011c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8a8dbaec40be4ad0be51f4df67502d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae6c3ad6f7d81353b09689ea6e41eec34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>al</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab64263a01616ad04b3f5212fd5742fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>au</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ab0b41cfc1ed67b789573ca788b6e79cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8f86bf8a4708ee63e116eb6bdd0f5bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ju</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a28c3d7ef8c743eebe234bf8f4fd418e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>adf6dfded6aa9e9c6ca6ff6d8e386b66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>afe854537bd0f1fb8ab64ce91f5f6105d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdl</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a39a5fe0d5e143aae2d95ba39e56ab0a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tdu</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a77a7831e452c28f863abba6992990ac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>adada908603cd6527095ccb940d6405bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a52b9f6334096f8f9534d4dfab3a89495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zmpTarget</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ad70ad9c81c418baf93ecccd6a75ff12f</anchor>
      <arglist>(const Eigen::Vector3d &amp;zmp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmpTarget</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8fa1d2571113230a15a6726fb06b91fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>aa368e46d6f3d90f8f4eca437358148f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderValues</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1da8134deea10a32f7d35fc381649606</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderVelocities</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a8a2e3e0b4b0e226712007e9fe905f9e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>jointTorques</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af65b1b51c93d319952e2ae3965e204c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>refJointOrder</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a00856f04c24c914b9197fe11f2d573eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a42615f6ac857b53acb4ae0376c3986c7</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>acf845c2c3a0f18430986e4a752f08fe7</anchor>
      <arglist>(const std::string &amp;body) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>surfaceHasForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7fb66cf0e07c2f24d9329cce0f6e5d3b</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasIndirectForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>af0f6539a36fe9c2e4dc05b1ef3765963</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>surfaceHasIndirectForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ae05708ca15a7afb1c1b24315f4468356</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>forceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a40d807280f230919ff00adf3d43a5caa</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>bodyForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a7d8ac9af47c038fda22f721e9c1d3a89</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor *</type>
      <name>findBodyForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>affafbe491eaf05a4cc9aba0a371beac1</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>surfaceForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ace64ab0161e9b00e262b408733d19629</anchor>
      <arglist>(const std::string &amp;surfaceName) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>indirectBodyForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a0c2ceb538921611b7b50a50634859e5f</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>indirectSurfaceForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a77d7387d7242da1e7c42420583dce311</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac3d3115ea3d21076f556ce974f299f0e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDevice</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a607854d4b0275f088553d91bbcdc9905</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a59d3c6669d54957b2bfd0125aaf83dca</anchor>
      <arglist>(const std::string &amp;name) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>device</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a4e3272e412d22bf6d382117300c9ee42</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>device</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a6cff71ca3ef36a1f5b5a945d6e70b64b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtrVector &amp;</type>
      <name>devices</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac554847320d3540e5e7ac9d58baafca0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>sensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>ac945ba1c44d9dfb2f2312d13c8ed24b4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>sensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a72a8bd2c7daead0016449a6056fd2035</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDevice</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>a1736b85ddedafef83111d6c67ff6f129</anchor>
      <arglist>(DevicePtr device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSensor</name>
      <anchorfile>structmc__rbdyn_1_1Robot.html</anchorfile>
      <anchor>abc302e460bc53880eb062681e9e50a54</anchor>
      <arglist>(SensorPtr sensor)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::Robot</name>
    <filename>structmc__tvm_1_1Robot.html</filename>
    <class kind="struct">mc_tvm::Robot::NewRobotToken</class>
    <member kind="typedef">
      <type>std::pair&lt; tvm::VariableVector, Eigen::VectorXd &gt;</type>
      <name>mimic_variables_t</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>afdbbc01ded28505fd7ffe86906a799a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a0663df9947a03d6c22138c3f906469ac</anchor>
      <arglist>(NewRobotToken, const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a09bfb50b6c1abcd458d4384294e77544</anchor>
      <arglist>(Robot &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ae9368fbfcc5e6bdb8f8cb531d0374455</anchor>
      <arglist>(Robot &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ad5f7d733469c9f86df634791e93b7e9b</anchor>
      <arglist>(const Robot &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a0069199c9861be52fd3a1e1d1cb0d301</anchor>
      <arglist>(const Robot &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a727ac53a247ad5e9a18f528f7d121c6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Limits &amp;</type>
      <name>limits</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a05531f6982b5247fb4c59c4d90c77ab5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Limits &amp;</type>
      <name>limits</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a140f522827a60d70c64ced97190fb025</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::VariablePtr &amp;</type>
      <name>q</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a863e4b53fa0fc555ce17b0cd2d78499f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr &amp;</type>
      <name>q</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a4d2a9c17dc29bea48bc76749b3b23ba3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::VariablePtr &amp;</type>
      <name>alpha</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a883f8887c9250b6403bc4e8e17525c3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr &amp;</type>
      <name>alpha</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ae42524423b8c9b451f4c6a79fe054e15</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::VariablePtr &amp;</type>
      <name>alphaD</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>add7d5d4795ebc89f0cbf613e83a9f75d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr &amp;</type>
      <name>alphaD</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a1dbdfe8f590e81980f28f3387b9c7bd8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::VariablePtr &amp;</type>
      <name>qFloatingBase</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a6f4f4b4dfc7d0d6c146caa9582cde6dc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr &amp;</type>
      <name>qFloatingBase</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a18aae1179892d53880f0571a1effbda8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::VariablePtr &amp;</type>
      <name>qJoints</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a453fb38b6d1f7969fa972e361e2fe8aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr &amp;</type>
      <name>qJoints</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>af764df8b418c95b495d31f50bd536449</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr</type>
      <name>qJoint</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>abdf8f5c4410399bdfdf515039a7bb46b</anchor>
      <arglist>(size_t jIdx)</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr</type>
      <name>qJoint</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ac75223a1a8b292dacbe8b79b087f604f</anchor>
      <arglist>(const std::string &amp;jName)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; tvm::VariablePtr, mimic_variables_t &gt; &amp;</type>
      <name>mimics</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a0983c1b557516f602717805cd6b48ab8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; tvm::VariablePtr, mimic_variables_t &gt; &amp;</type>
      <name>mimics</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>aaed926b037dc3cd6c825e8bb98b765d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::VariablePtr &amp;</type>
      <name>tau</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a46bc6d2e3fa4820fbc74010bc9ed5129</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>tvm::VariablePtr &amp;</type>
      <name>tau</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ab78e413a5551a6bdadf9aef05c0480a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CoM &amp;</type>
      <name>comAlgo</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a4b77fc18714f9baa433e005b25019bff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CoM &amp;</type>
      <name>comAlgo</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>afa6059c9b6c76962ea6a16ddbcff36a6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Momentum &amp;</type>
      <name>momentumAlgo</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>adb99116b257ce988a45c1014bfc271c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum &amp;</type>
      <name>momentumAlgo</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a928553e8164db803c0ecc3bab591940f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>H</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>af33e3f3207ee3661b0d9eebc6513fc53</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ae1cf367a11dbb344f58f5ff77a687629</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>normalAccB</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ad433dc0ea980cc12a348d81d4932741a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::DenseIndex</type>
      <name>refJointIndexToQIndex</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>ad2443dfa13fc3f84b53bd4dde44c0dd5</anchor>
      <arglist>(size_t jointIndex) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::DenseIndex</type>
      <name>refJointIndexToQDotIndex</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a97a81387c3c9520a0864c4f86e9e4ba7</anchor>
      <arglist>(size_t jointIndex) const</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_rbdyn::Robot</name>
      <anchorfile>structmc__tvm_1_1Robot.html</anchorfile>
      <anchor>a5bf7a6383246c9a2d0cb84b5b0e9e3f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotConverter</name>
    <filename>structmc__rbdyn_1_1RobotConverter.html</filename>
    <member kind="function">
      <type></type>
      <name>RobotConverter</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>ad6f66343bf7f506fbcfb1aacdfc1f530</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;inputRobot, mc_rbdyn::Robot &amp;outputRobot, const RobotConverterConfig &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>afe3168a20d548b5cd5abd23c6a6c04a8</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;inputRobot, mc_rbdyn::Robot &amp;outputRobot) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotConverterConfig &amp;</type>
      <name>config</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>afa210ba62c3607be90a9c8371b07a68a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>precompute</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>a4f226cefe778f8796b9fc828f3320df9</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;inputRobot, const mc_rbdyn::Robot &amp;outputRobot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>encodersToOutput</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>aad569e8279b82a321da6d421a5cb5f4b</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;inputRobot, mc_rbdyn::Robot &amp;outputRobot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotConverterConfig</type>
      <name>config_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>aefc35795686134ebe045229615c6764c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt;</type>
      <name>commonJointIndices_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>a36a83b4fc9222b0e37f13910c20b9d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt;</type>
      <name>commonEncoderToJointIndices_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>a3ae2e8970a964a2d79149204e0ca3887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt;</type>
      <name>mimicJoints_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverter.html</anchorfile>
      <anchor>a99f04e008c24f4c2c65543dae39ed94e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotConverterConfig</name>
    <filename>structmc__rbdyn_1_1RobotConverterConfig.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>mbcToOutMbc_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>af4662e7a413eb1071cbda12ea494f119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>encodersToOutMbc_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>ac217c0e99ff1e9811e70bbf0f33eeaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>encodersToOutMbcOnce_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>a46f187b5fa5c1e230e38e830571a51a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enforceMimics_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>a35b9dedc6a6d413306eaf91c53c2f7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>copyPosWorld_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>ad727e4fc644bbb52165aeecf938f5d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>copyJointCommand_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>a20e3813cb3f775e5109c7e18447c657e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>copyJointVelocityCommand_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>ad46aa74bc9576f13ab33b336a39f79bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>copyJointAccelerationCommand_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>a18cb48145d144b357595524c49b5cace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>copyJointCommand_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>a20e3813cb3f775e5109c7e18447c657e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>copyJointVelocityCommand_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>ad46aa74bc9576f13ab33b336a39f79bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>copyJointAccelerationCommand_</name>
      <anchorfile>structmc__rbdyn_1_1RobotConverterConfig.html</anchorfile>
      <anchor>a18cb48145d144b357595524c49b5cace</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotData</name>
    <filename>structmc__rbdyn_1_1RobotData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>refJointOrder</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a1f39d588da8f5023be53cbd1c09616e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>encoderValues</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>ae164d088f20cb9d263f6952a631578ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>encoderVelocities</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a12f65759039a9c380311f655e7ae4cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>jointTorques</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a35588fd13b7cc23e8ce4ced64c951c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ForceSensor &gt;</type>
      <name>forceSensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a0fe8c6c109a01c727c6c7b64c4b8ead2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, size_t &gt;</type>
      <name>forceSensorsIndex</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a3254977695e2955bdda9d07d7ec8a9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodySensorVector</type>
      <name>bodySensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a2168b5d056d55ed259dca4795d9f4064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, size_t &gt;</type>
      <name>bodySensorsIndex</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a67dc85b79dc89817f8522617b3fd0a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, size_t &gt;</type>
      <name>bodyBodySensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>aaea88c1f821415cf1d63e20fdef5f865</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; JointSensor &gt;</type>
      <name>jointSensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>acda43b3386e92305df5a1a20b319a43b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, size_t &gt;</type>
      <name>jointJointSensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a8df243b849e2f49e9e08a6accad2589c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, mc_control::GripperPtr &gt;</type>
      <name>grippers</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>a6c24c8a0470ce0d09de26991f2e5c0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; mc_control::GripperRef &gt;</type>
      <name>grippersRef</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>ad35bd605b7b926166d9b5aa6ad517536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DevicePtrVector</type>
      <name>devices</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>aaedac65f208c8d20ce463dc27e2dd96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, size_t &gt;</type>
      <name>devicesIndex</name>
      <anchorfile>structmc__rbdyn_1_1RobotData.html</anchorfile>
      <anchor>aadf5f6efd574f54480a60a1b4f95e722</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotFrame</name>
    <filename>structmc__rbdyn_1_1RobotFrame.html</filename>
    <base>shared&lt; RobotFrame, Frame &gt;</base>
    <class kind="struct">mc_rbdyn::RobotFrame::NewRobotFrameToken</class>
    <member kind="function">
      <type></type>
      <name>RobotFrame</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a48809129dc45e9f5e08d97e041334a07</anchor>
      <arglist>(NewRobotFrameToken, const std::string &amp;name, Robot &amp;robot, const std::string &amp;body)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotFrame</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a381329b9873a2dd595adb15b522f233c</anchor>
      <arglist>(NewRobotFrameToken, const std::string &amp;name, RobotFrame &amp;parent, sva::PTransformd X_p_f, bool baked)</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a540f8df03fdee424e2db6118a1b273c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a0b98dbe9586dc410286fd82bd1875d3d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bodyMbcIndex</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>aba706b53116841e1a35c9f06ecd5515a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>body</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>ab9793bcf045471b5a5779a94e07e5c25</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>position</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a08deed3a660e0463fd01a517aaaccc76</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>velocity</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a6ed0edce60a742fd533a5fdddf92bafa</anchor>
      <arglist>() const noexcept final</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_p_f</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a7652530c96fffd19599264a7d291c1e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_b_f</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a3e0f90eac149c38be620e57b08e1ba78</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>RobotFrame &amp;</type>
      <name>X_p_f</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>ae6d6e55b0e7dc9905c43001ad5b7c719</anchor>
      <arglist>(sva::PTransformd pt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasForceSensor</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a339b968385764b0d3e7cc93026593e43</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>forceSensor</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>aaf0ae23d628871b879363f9d9c808176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>wrench</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>ab53961e7a816cf79ae1f62b8dc470134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>cop</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a63a175dc055219dde904dcc7e74b77a6</anchor>
      <arglist>(double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>copW</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a94fcfbab883580f440115606b5c9ff9f</anchor>
      <arglist>(double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>RobotFramePtr</type>
      <name>makeFrame</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>aee21dea39cadcfdf5c0c7734d27a156d</anchor>
      <arglist>(const std::string &amp;name, const sva::PTransformd &amp;X_p_f, bool baked=false)</arglist>
    </member>
    <member kind="function">
      <type>mc_tvm::RobotFrame &amp;</type>
      <name>tvm_frame</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>aeb81f4176b5849a5a6569d85db2eed41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_tvm_frame</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>aa8fbc94f2673cae7787cf91bb03cda8f</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Robot &amp;</type>
      <name>robot_</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>aac5421aa30cbf365c703a6767d5164ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bodyMbcIdx_</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>adee19234fa1267ab00958cbb30b4bd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ForceSensor *</type>
      <name>sensor_</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>a4cb8f9a941f66cbe0a2bccc17a6155e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robot</name>
      <anchorfile>structmc__rbdyn_1_1RobotFrame.html</anchorfile>
      <anchor>ad03b49f51df2ba1d492ced03d923fdd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tvm::RobotFrame</name>
    <filename>structmc__tvm_1_1RobotFrame.html</filename>
    <base>mc_tvm::Frame</base>
    <class kind="struct">mc_tvm::RobotFrame::NewRobotFrameToken</class>
    <member kind="function">
      <type></type>
      <name>RobotFrame</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a180f24508483d020ade6aeabae644d09</anchor>
      <arglist>(NewRobotFrameToken, const mc_rbdyn::RobotFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>const tvm::internal::MatrixWithProperties &amp;</type>
      <name>jacobian</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a00716e444025c382da74be44d3df4940</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a8cb1e954e920e2bd05c365defa9b67e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::internal::MatrixWithProperties &amp;</type>
      <name>JDot</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a9d7c9662ee1b362c6a07fa041f919fc8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const rbd::Jacobian &amp;</type>
      <name>rbdJacobian</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a16b0b4f8711176311d767f08161f08c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a3f92ee53ad6d5db07eadfa532722c374</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a717bad80165b51da9fb4a33765fb2831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a75c299966804b0861a9f32ab903ab78d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJDot</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>aa21e608aa91ef692d313c044b7cb805c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>h_</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>ad2948decfee161d88cb03d5400386633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Jacobian</type>
      <name>jac_</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a027298a7d5e79f596ea548941332aadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Blocks</type>
      <name>blocks_</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a39cd40cec4116ab81c4d350b1fca6a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacTmp_</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a7c2aa9bd736e94ab71b84043bed57264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tvm::internal::MatrixWithProperties</type>
      <name>jacobian_</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>ae0ee03929ed4c7ef9dd29f49061e3d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>normalAcceleration_</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>ab8e4f2a97bb8286702968f2a73e3f7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tvm::internal::MatrixWithProperties</type>
      <name>jacDot_</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>aad4a278bb84f7a8279800b88706c228d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_rbdyn::RobotFrame</name>
      <anchorfile>structmc__tvm_1_1RobotFrame.html</anchorfile>
      <anchor>a48c246b2297ef56ace9fbaf5ef9d4113</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::RobotImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1RobotImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>RobotImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1RobotImpl.html</anchorfile>
      <anchor>a9218fde4c0a07c2acc5e2a1c5f215030</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1RobotImpl.html</anchorfile>
      <anchor>a9c169a3be2ab773a3224ac891205908f</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1RobotImpl.html</anchorfile>
      <anchor>a9b72a2882d2142c399b2cc15d1dcb3a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1RobotImpl.html</anchorfile>
      <anchor>a57448dfa1b7c219ccadbc96892d94648</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rbdyn::RobotLoader</name>
    <filename>structmc__rbdyn_1_1RobotLoader.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::RobotModulePtr</type>
      <name>get_robot_module</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>ad660aedc7dbf7cd0cd0e60da5fffe4c2</anchor>
      <arglist>(const std::string &amp;name, const Args &amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RobotModulePtr</type>
      <name>get_robot_module</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>a0340bd5b2c882415da7c86b6ad80b058</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>register_object</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>a2a1e3e1c0700d5045bf0d6894ef6a8e1</anchor>
      <arglist>(const std::string &amp;name, std::function&lt; RetT *(const Args &amp;...)&gt; callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_robot_module_path</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>a48f1ada05ff7db2152a00da892183c8b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>a86f7b35ed2a4b3d37508f51aa2b29a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_robot</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>a3edda7983edda591b3664eef5c450144</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_verbosity</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>a6126ced85ec52c8445755948d1060a6f</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>available_robots</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>aae5fb8baa5acee06c3af0dd976808a2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load_aliases</name>
      <anchorfile>structmc__rbdyn_1_1RobotLoader.html</anchorfile>
      <anchor>a6286734468abc8c146eaad6902dbdd01</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotModule</name>
    <filename>structmc__rbdyn_1_1RobotModule.html</filename>
    <class kind="struct">mc_rbdyn::RobotModule::FrameDescription</class>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper</class>
    <member kind="typedef">
      <type>std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt;&gt;</type>
      <name>bounds_t</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a5b8304a1ea905fa0378a31dcf65b1460</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt;&gt;</type>
      <name>accelerationBounds_t</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a10b7fc984b3fa946f5c59a4174a366b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt;&gt;</type>
      <name>jerkBounds_t</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a8af84d89b2a37dbf89aec26e11b022eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt;&gt;</type>
      <name>torqueDerivativeBounds_t</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a225813431ae1e40a0e452b103504b636</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotModule</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ae2153d9cef8cbcb7d0d87a0ac21ac5ad</anchor>
      <arglist>(const std::string &amp;path, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotModule</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aeb69ff6b27d5a88ee2271aacf6b5e409</anchor>
      <arglist>(const std::string &amp;path, const std::string &amp;name, const std::string &amp;urdf_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotModule</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a21cf968dd81a9b554ce1001b8a2c6fb8</anchor>
      <arglist>(const std::string &amp;name, const rbd::parsers::ParserResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a33637f65346a81c078c9c04de9e4be0e</anchor>
      <arglist>(const rbd::parsers::ParserResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt; &gt; &amp;</type>
      <name>bounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ae05a5aab8f1a3edbecad4e4c7b29380d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt; &gt; &amp;</type>
      <name>accelerationBounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a7a2fb5d58157ab88f81a263cdd583d90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt; &gt; &amp;</type>
      <name>jerkBounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ad22b6a0a6be201cdcf15639d5e210d94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt; &gt; &amp;</type>
      <name>torqueDerivativeBounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a31833fa22143ca219c84c894bae0b5ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::vector&lt; double &gt; &gt; &amp;</type>
      <name>stance</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ae00ee36a0f17eaf23aadcb7643186fa4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>convexHull</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aea7c7858c175df032d33990e71ceb7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::pair&lt; std::string, S_ObjectPtr &gt; &gt; &amp;</type>
      <name>collisionObjects</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a5f8b8da35780c72a0455713fca1486a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>stpbvHull</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a76b091f815bbbe008acd5f1923d680b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, sva::PTransformd &gt; &amp;</type>
      <name>collisionTransforms</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>acb767324196546f71a47674f8c23c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a0f2e303e32aeb00e4928808dc3e0760a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a17aa1885f3db7c16c3e06b2525be82d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a4edb2a975531bfb2935c0d7b25f8f677</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; JointSensor &gt; &amp;</type>
      <name>jointSensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a77d9b4bb262e90f14b45b1cfd2dcf00d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Springs &amp;</type>
      <name>springs</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a27c7e09fee38804af1f74e980e97c988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::Collision &gt; &amp;</type>
      <name>minimalSelfCollisions</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a540c068db94dc49566ccda2ed3825630</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::Collision &gt; &amp;</type>
      <name>commonSelfCollisions</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>af32bd5d7ffb07565257d75f210467c8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Gripper &gt; &amp;</type>
      <name>grippers</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a10f22df2fe618e1d7ee0db3edec87f72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Gripper::Safety &amp;</type>
      <name>gripperSafety</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ae7ae59c52568b7bee2919530e97631fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>ref_joint_order</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ad9e8a1a1287fa07848d959d3b10b76c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; double, 7 &gt; &amp;</type>
      <name>default_attitude</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a2b42e01d0245ff4d59a8d3b512f3682e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &amp;</type>
      <name>defaultLIPMStabilizerConfiguration</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aeb83ff8a992c97412321d4a5ed135177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boundsFromURDF</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a7cf89fa63c77693092f774540a00838a</anchor>
      <arglist>(const rbd::parsers::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand_stance</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aa6f2c53b2567e6fbd62f8694db311a9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_default_ref_joint_order</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a1e78a7743c7a0b1c9b32b1acd727565e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompoundJointConstraintDescriptionVector &amp;</type>
      <name>compoundJoints</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a28b00d3621296be062c8545316171a89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>parameters</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a8361592b3630831c0cb57d8bb86afceb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>canonicalParameters</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aa9bb0c4df2675a03c1139f460c5d3989</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>real_urdf</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aacf9d200189fd184ab6fe0b88cf16fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtrVector &amp;</type>
      <name>devices</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a3bbfe1ae62d9e98aa1bbbc1c518623f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; FrameDescription &gt; &amp;</type>
      <name>frames</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a7d603f118a4a09c26a287320b3d6f212</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>RobotConverterConfig</type>
      <name>controlToCanonicalConfig</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a16418afe9c239311f7ff25cc380ae0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(const mc_rbdyn::Robot &amp;control, mc_rbdyn::Robot &amp;canonical)&gt;</type>
      <name>controlToCanonicalPostProcess</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a0f36485a023d3ba5e4bc09206851f3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>path</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a5de4bf236d1fa2f107fc27971009e979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ad888b6f335ade03b6628633d4a446bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>urdf_path</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a7ba5a2868d56f57573de6baac60ce05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rsdf_dir</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a964a0cee9de236a3143a69e384fde6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>calib_dir</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a2ce60a43b6c7fcf4df10d1777e5021bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::MultiBody</type>
      <name>mb</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ab4acadd6d4c3d607b929be70f3ba94e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::MultiBodyConfig</type>
      <name>mbc</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ae47568494c5eda60278ca824cabec3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::MultiBodyGraph</type>
      <name>mbg</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a6f8d5e7c1d3c2df1113120dd61d6cef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bounds_t</type>
      <name>_bounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>af19dd43ad8642aabc8c406e0972c5d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>accelerationBounds_t</type>
      <name>_accelerationBounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a392097f1562229e352b6079edd9e2941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jerkBounds_t</type>
      <name>_jerkBounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aea1ceebb2d15dc034da0cad4033cacdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>torqueDerivativeBounds_t</type>
      <name>_torqueDerivativeBounds</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>af57a4434d7756e4d9e4e014fed6f5efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::vector&lt; double &gt; &gt;</type>
      <name>_stance</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a82b20e5c4af771dd7778ea81e7fb0dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>_convexHull</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a65db2f156200c10f888f52bf12875e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; std::string, S_ObjectPtr &gt; &gt;</type>
      <name>_collisionObjects</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a97cc4ac9b4bfbf45c36e4407e836505c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>_stpbvHull</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a0a6e511b53b2be9ca1258dc7e39857ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VisualMap</type>
      <name>_visual</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a2cbb7d9c42ddcac022ccb2166381ec12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VisualMap</type>
      <name>_collision</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ab30a1f088ce9b008c0b619185554d751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, sva::PTransformd &gt;</type>
      <name>_collisionTransforms</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a57b63a2f82b40741398b3a167b43592c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Flexibility &gt;</type>
      <name>_flexibility</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a664972f2b2163e90aab92a3903385b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ForceSensor &gt;</type>
      <name>_forceSensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a0c1a839a89c823bd31ca95f6caa371b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodySensorVector</type>
      <name>_bodySensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a850abf7b9eb7e6ef1f3ca70fc495c6e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; JointSensor &gt;</type>
      <name>_jointSensors</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a95efdc9e8c12a10434f6aac4589b96c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Springs</type>
      <name>_springs</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ae5ef0e8c1b616ffae6dc46f704d8fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; mc_rbdyn::Collision &gt;</type>
      <name>_minimalSelfCollisions</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ad23bb6df3b05cf0105ca6cfbfdb2ee9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; mc_rbdyn::Collision &gt;</type>
      <name>_commonSelfCollisions</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a064f95b0a8e134739d1f7ab194afe42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Gripper &gt;</type>
      <name>_grippers</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>aff92408eda408fe95d5320918db67674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gripper::Safety</type>
      <name>_gripperSafety</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a58c75925a8766c6148fbb6a1385e61c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>_ref_joint_order</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ae0d4fcfe71467be0aef41abe99458339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::array&lt; double, 7 &gt;</type>
      <name>_default_attitude</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a1699dbd63835da199d52d232980c6b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CompoundJointConstraintDescriptionVector</type>
      <name>_compoundJoints</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a0b4dd720e3b699b37947c3453a93e126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>_parameters</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a0f8cfd4ca7e7772f68266003e7b8fc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>_canonicalParameters</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a8651177a3f5ceeb464f6b5e116ecb4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>_lipmStabilizerConfig</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a7da8429458a11c340c168aa0eade6694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_real_urdf</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a581c9d2efa5a52e3850b8858ac0b58c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DevicePtrVector</type>
      <name>_devices</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>ab6b79da885f0935ee568f416025466e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; FrameDescription &gt;</type>
      <name>_frames</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule.html</anchorfile>
      <anchor>a72ac49d4249ad8b6d66d85e4d35a2755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::RobotPublisher</name>
    <filename>structmc__rtc_1_1RobotPublisher.html</filename>
    <member kind="function">
      <type></type>
      <name>RobotPublisher</name>
      <anchorfile>structmc__rtc_1_1RobotPublisher.html</anchorfile>
      <anchor>a848a9be5477c8e775ec83f546aab552d</anchor>
      <arglist>(const std::string &amp;prefix, double rate, double dt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RobotPublisher</name>
      <anchorfile>structmc__rtc_1_1RobotPublisher.html</anchorfile>
      <anchor>a4c712f7481ae4d07e59f11bd4df8c2d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__rtc_1_1RobotPublisher.html</anchorfile>
      <anchor>a1928a3476891ae7d2c5dd0506f8935f8</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, bool use_real=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1RobotPublisher.html</anchorfile>
      <anchor>addd581f3eed02925519d0b823b8eb99c</anchor>
      <arglist>(double dt, const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rate</name>
      <anchorfile>structmc__rtc_1_1RobotPublisher.html</anchorfile>
      <anchor>a1ff98ac0dc276543e910f89fcbb0f1b4</anchor>
      <arglist>(double rate)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Robots</name>
    <filename>structmc__rbdyn_1_1Robots.html</filename>
    <base>shared&lt; Robots &gt;</base>
    <class kind="struct">mc_rbdyn::Robots::NewRobotsToken</class>
    <member kind="typedef">
      <type>mc_rbdyn::Robot</type>
      <name>value_type</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a857c321c4be0d8fa2443e4a8c2afaa27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::RobotModule &gt; &amp;</type>
      <name>robotModules</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>adcd2485c334658f2c83b7f1e343963ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; rbd::MultiBody &gt; &amp;</type>
      <name>mbs</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>adc4af4449c285c66835c5e511cd424d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; rbd::MultiBody &gt; &amp;</type>
      <name>mbs</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a968bbc1fc61e7a992a7759c8b920a72f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; rbd::MultiBodyConfig &gt; &amp;</type>
      <name>mbcs</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>aaa4805f358230c5c30680e14a1d036cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;</type>
      <name>mbcs</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ad3cc8d1971325b497614377e6a6383b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRobot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a19ff172c4ffea776fc1d7d43c4b7c4ad</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a886cbfa11123ab43258689967de469f3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a6a81e676dbc5f5d2bc3012642622226d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a6b8424f1c2946197d3f2528a8fba02b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>envIndex</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a450727e6fa924ffe64088165bacac5ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a2c3772d82fdee696f58cb282a3658dfd</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotModule &amp;</type>
      <name>robotModule</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a9369f09e1f26a46c62a0a0dab3f5a6f4</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a570c3637d3567b90bfedb8156b4f8f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a1ad3d599f48c5ebf62add75a4da29ab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a3fad514c57d731873b3d4395f58ced2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>env</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a8cfc417942dcc3a73ee5b9cfbbf862fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a8756bc3dcfdd1d5fb0a9fda13322835b</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a3e160f2c75f75740bcec75b3a2f2a881</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>aebe182308c2902e6b5f5df2be921d6d1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>aea26684de58321f309fc79f9c91d5161</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a0fe7360e8745aa349a770d489d5585ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>aa353ea3d25202a5870a7f65e503a1b2a</anchor>
      <arglist>(size_type new_cap)</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a5848ace89adf7d6318170857443d7da9</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a6c22a10bae494b5c49a151d0c179aeee</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>at</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a67130c551bb4ac7c1b2c92f9bea900b9</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>at</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>af2c97fedd69cfc7de5ab5616f0661769</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ac688463062caf3707a0e1bdbf906e843</anchor>
      <arglist>(mc_rbdyn::Robots &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robots</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a6acde4ce29bd1f40884cecc9c747ca27</anchor>
      <arglist>(NewRobotsToken)</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a6f0793141dd6d33e4fd1b8350d898641</anchor>
      <arglist>(const std::string &amp;name, const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a4b1451c180d38ed2d650c1ab2fc90ee1</anchor>
      <arglist>(const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ae89485349d26868e40117fcaf670ddc4</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rename</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a2dc538d2351dacdde105943658330f39</anchor>
      <arglist>(const std::string &amp;oldName, const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>loadFromUrdf</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a66c9da989e953938559067ad2e305726</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, const rbd::parsers::ParserParameters &amp;parser_params={}, const LoadRobotParameters &amp;load_params={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotCopy</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a7bc6487208bd7d2631a1d7f394a8bf84</anchor>
      <arglist>(const Robot &amp;robot, const std::string &amp;copyName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a661cd23a4aec4c17e0c6edbbbecec720</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a344e4ad7f16f3d41dea30e93e5486087</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RobotsPtr</type>
      <name>make</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ac2d7d411adafe4515c29682062f5e787</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RobotsPtr</type>
      <name>make</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a14d1fef580012d037f642a0457bb0cb8</anchor>
      <arglist>(Deleter deleter) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Robots</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a72893c63774f2cd51c1115ad6fc228d4</anchor>
      <arglist>(const Robots &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Robots &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a96840789462d9c4230a1267430f0584d</anchor>
      <arglist>(const Robots &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Robots</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a8e908a3f267130d533a61af7e996348e</anchor>
      <arglist>(Robots &amp;&amp;robots)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Robots &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a63746f122eb27ecf8a8f7bf993e135cb</anchor>
      <arglist>(Robots &amp;&amp;robots)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateIndexes</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a577b02e4a3e2384c60bfe983ad362448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotModuleVector</type>
      <name>robot_modules_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a393d65c7732ca980aaef77638076565a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RobotPtr &gt;</type>
      <name>robots_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a31793486f2ef8e71dbe1fdec0b30679e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; rbd::MultiBody &gt;</type>
      <name>mbs_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a898afa6275886be6bd9ed57346d02cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; rbd::MultiBodyConfig &gt;</type>
      <name>mbcs_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>afa146e9e579f283e5bc64acc3fc40807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; rbd::MultiBodyGraph &gt;</type>
      <name>mbgs_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a6b3262231180412489be91286feae99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>robotIndex_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ad61b4c8a27b1c5cf841bbeae8ae9cb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>envIndex_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>af035c10ad185cddd84fdd05611b88bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, unsigned int &gt;</type>
      <name>robotNameToIndex_</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a99733733378b2512684a78597b24bda5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ad03b49f51df2ba1d492ced03d923fdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rtc::SharedPtrVectorIterator&lt; Robot &gt;</type>
      <name>iterator</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a4c791ebd1c7dc14050a311af172def0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rtc::SharedPtrVectorConstIterator&lt; Robot &gt;</type>
      <name>const_iterator</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ad11179b83867ba05cc94e2fd279b0ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>abc5a56672f51688c1e5f2de55c9be7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a2e49b87763cde50e94087e771919844e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RobotPtr &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>af0ac255d3220c2726636279edf648921</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a8f2c4bc6ea6bb34ca3ef4e5d275662ca</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a09f6546226fbe07a290f4bcfcb33f264</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a4587be460f55daf6554325fde6c0b310</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a0230b7c453f04f0198b6a3ba5913d105</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a1921af851c0b4138dee79b1ebc17c52b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>af142da97b6512f79162efc33ace70e45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>aa37c7715d7c713f0334363dd26452d38</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a2ed7a640a3cc1e1eda61613e89fd7486</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a8e4985f868d855ec5153a210fa22f555</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>aa05a25568265c5e17388f1c4e300d41e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a02be61ed3972aeae42d94bbe242a839c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a54a0069d6ac9debe385ba1f1f311ee51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a6f0793141dd6d33e4fd1b8350d898641</anchor>
      <arglist>(const std::string &amp;name, const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a4b1451c180d38ed2d650c1ab2fc90ee1</anchor>
      <arglist>(const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>ae89485349d26868e40117fcaf670ddc4</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rename</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a2dc538d2351dacdde105943658330f39</anchor>
      <arglist>(const std::string &amp;oldName, const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>loadFromUrdf</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a66c9da989e953938559067ad2e305726</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, const rbd::parsers::ParserParameters &amp;parser_params={}, const LoadRobotParameters &amp;load_params={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotCopy</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a7bc6487208bd7d2631a1d7f394a8bf84</anchor>
      <arglist>(const Robot &amp;robot, const std::string &amp;copyName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a661cd23a4aec4c17e0c6edbbbecec720</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>structmc__rbdyn_1_1Robots.html</anchorfile>
      <anchor>a344e4ad7f16f3d41dea30e93e5486087</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ROSBridge</name>
    <filename>structmc__rtc_1_1ROSBridge.html</filename>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; ros::NodeHandle &gt;</type>
      <name>get_node_handle</name>
      <anchorfile>structmc__rtc_1_1ROSBridge.html</anchorfile>
      <anchor>ac94779319310005ba44605c567c1c547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_publisher_timestep</name>
      <anchorfile>structmc__rtc_1_1ROSBridge.html</anchorfile>
      <anchor>ab852d1ed6a6154d0b6978bb55ca4d9f0</anchor>
      <arglist>(double timestep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init_robot_publisher</name>
      <anchorfile>structmc__rtc_1_1ROSBridge.html</anchorfile>
      <anchor>a6642d73c7c180d1a93f1eff5111b50b2</anchor>
      <arglist>(const std::string &amp;publisher, double dt, const mc_rbdyn::Robot &amp;robot, bool use_real=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_robot_publisher</name>
      <anchorfile>structmc__rtc_1_1ROSBridge.html</anchorfile>
      <anchor>a4972e3f6b94d800663017ba05364f172</anchor>
      <arglist>(const std::string &amp;publisher, double dt, const mc_rbdyn::Robot &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stop_robot_publisher</name>
      <anchorfile>structmc__rtc_1_1ROSBridge.html</anchorfile>
      <anchor>a52bd7ffa7137fa42036438687165fde5</anchor>
      <arglist>(const std::string &amp;publisher)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>structmc__rtc_1_1ROSBridge.html</anchorfile>
      <anchor>a9ad7c399069ed81e3fb57a415babe0e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::RotationImpl</name>
    <filename>structmc__rtc_1_1gui_1_1RotationImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>RotationImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationImpl.html</anchorfile>
      <anchor>a7661413981acb1ca272bd40dcbdfec76</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationImpl.html</anchorfile>
      <anchor>a5db74bd06e02788dcf943ecb1ba51267</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationImpl.html</anchorfile>
      <anchor>ad38cdbde21b335061f261683a3540046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationImpl.html</anchorfile>
      <anchor>a90964aa0cd30be5f543ca7a75433d17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationImpl.html</anchorfile>
      <anchor>acc77cdef75bb1767eb3e80c2db36afc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::RotationROImpl</name>
    <filename>structmc__rtc_1_1gui_1_1RotationROImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>RotationROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationROImpl.html</anchorfile>
      <anchor>a09c1c750a2be23f5554b148d0bdc0355</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationROImpl.html</anchorfile>
      <anchor>ac51a9c31ab21b7f4fab3c2888cc728a6</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationROImpl.html</anchorfile>
      <anchor>a4fd7310d27046f65c062596a31abda2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationROImpl.html</anchorfile>
      <anchor>afc5b2ee991da77eae0a2ef1623ca19c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1RotationROImpl.html</anchorfile>
      <anchor>aa295eb5ebba63beadb8f2d9f9348b0fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotModule::Gripper::Safety</name>
    <filename>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</filename>
    <member kind="function">
      <type></type>
      <name>Safety</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a2b38f18523213a233bff74f28f1a40c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Safety</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a8dd63f7c20eda1e3f4f891a8d4171095</anchor>
      <arglist>(double percentVMax, double actualCommandDiffTrigger=DEFAULT_ACTUAL_COMMAND_DIFF_TRIGGER, double releaseSafetyOffset=DEFAULT_RELEASE_OFFSET, unsigned int overCommandLimitIterN=DEFAULT_OVER_COMMAND_LIMIT_ITER_N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>ad3eee842b0d7dfe9fcdc53dee342ca85</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a589787482208d4564f0b7fa55bfb8ccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>percentVMax</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a8556afeb181b6a2f843c5d644591e1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>actualCommandDiffTrigger</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a2a4bf1ff512e79166cf636fe3b556965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>releaseSafetyOffset</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>af60b48d54cac8b27249a3f0031b588cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>overCommandLimitIterN</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>abc220529be43405fe7ce241a436568ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_PERCENT_VMAX</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a504d3086fb274f2e70a80821e9fe11c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_ACTUAL_COMMAND_DIFF_TRIGGER</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a4d905fe3f8e145803a512c078408da2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_RELEASE_OFFSET</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a2d05528318c8cb3f09e7708fa7466d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>DEFAULT_OVER_COMMAND_LIMIT_ITER_N</name>
      <anchorfile>structmc__rbdyn_1_1RobotModule_1_1Gripper_1_1Safety.html</anchorfile>
      <anchor>a4c51f2971f6867bb737b48cfbe389169</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::SafetyThresholds</name>
    <filename>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</filename>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>ac1276cfbb01a99a72157dc2d2b68ac3d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a5b9bbb849504eb7763660147da1094a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_AVERAGE_DCM_ERROR</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a7280e47779527fa1f63dc2603c00d9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_COP_ADMITTANCE</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>afbeb3c9e613679f1a0e032164e9bb851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_DCM_D_GAIN</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a6e4162251f42ce05989ad8f40465d3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_DCM_I_GAIN</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>ac6c9d0b6634fc1c8e48daaf8e2538ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_DCM_P_GAIN</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>ab8d222052bba6e7caa2af1311a4dbef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_COMD_GAIN</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a421d3ed8e7c051add55a77503588ed4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_ZMPD_GAIN</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>ab31f8fcab66cbe034d5c5e918eecb1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_DF_ADMITTANCE</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>aa7d7160181b51f5ee385885f57538b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_DF_DAMPING</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a1f57bdb467778d29dc75e0bc8b135e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_FDC_RX_VEL</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a898823d244b31760aef9e426859b652b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_FDC_RY_VEL</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a7b736726261a83dd3bf62d9d5a5fbb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MAX_FDC_RZ_VEL</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>aba691140794cf4004229b6b5f2ac50a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MIN_DS_PRESSURE</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a106e22ca648906a8742889390289d8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>MIN_NET_TOTAL_FORCE_ZMP</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1SafetyThresholds.html</anchorfile>
      <anchor>a3e6fab765c73e92d087aad57d75242e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::SchemaImpl</name>
    <filename>structmc__rtc_1_1gui_1_1SchemaImpl.html</filename>
    <templarg>Callback</templarg>
    <base>CallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>SchemaImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1SchemaImpl.html</anchorfile>
      <anchor>a3b43196dfda7475d0924cc29e2db22fb</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;schema, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1SchemaImpl.html</anchorfile>
      <anchor>ac2fad63fbecf2126101c4bb4bfca5397</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1SchemaImpl.html</anchorfile>
      <anchor>ad53e00175461bd0bd4facd164cabf656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1SchemaImpl.html</anchorfile>
      <anchor>a2e77582fcb4cdc8af5919f0d3f8ffa0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::SequenceInterpolator</name>
    <filename>structmc__trajectory_1_1SequenceInterpolator.html</filename>
    <templarg>Value</templarg>
    <templarg>InterpolationFunction</templarg>
    <member kind="typedef">
      <type>typename std::pair&lt; double, Value &gt;</type>
      <name>TimedValue</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>ac2073f7357346890e6b7eea59fdd5311</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; TimedValue &gt;</type>
      <name>TimedValueVector</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a2cc31644575f3808fdf244d453e6b37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceInterpolator</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a1e7f700dad0f42a95a4980ae99add4c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceInterpolator</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a821ec2e824c4c7d20a2778c3a910570b</anchor>
      <arglist>(const TimedValueVector &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a997194a0937f7000f90edced63fd544c</anchor>
      <arglist>(const TimedValueVector &amp;values)</arglist>
      <docanchor file="structmc__trajectory_1_1SequenceInterpolator">setValues</docanchor>
    </member>
    <member kind="function">
      <type>const TimedValueVector &amp;</type>
      <name>values</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>addd89edce8564f497d9bd287508eaf30</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValues</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a0b03ecdb30393152c9e511862aad9571</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>accc52bfc2b207a45c632ea8149d0feaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>compute</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a40b4f7c6c7bffa471344064e0666ceec</anchor>
      <arglist>(double currTime)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterpolationFunction</type>
      <name>interpolator_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a7e883686ee5423a00dad1156cb1a941f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimedValueVector</type>
      <name>values_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>afa3745020ef5eacbca215ab3697f057f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>prevIndex_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a0d4784e10957d3cb31d93ecde6351037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextIndex_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a35a012cae5bebda697cc20a56f12a0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>intervalDuration_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a5e3dde638172c8f20f249a36ca07c128</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SequenceInterpolator&lt; Eigen::Vector6d, mc_trajectory::LinearInterpolation&lt; Eigen::Vector6d &gt; &gt;</name>
    <filename>structmc__trajectory_1_1SequenceInterpolator.html</filename>
    <member kind="typedef">
      <type>typename std::pair&lt; double, Eigen::Vector6d &gt;</type>
      <name>TimedValue</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>ac2073f7357346890e6b7eea59fdd5311</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; TimedValue &gt;</type>
      <name>TimedValueVector</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a2cc31644575f3808fdf244d453e6b37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceInterpolator</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a1e7f700dad0f42a95a4980ae99add4c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceInterpolator</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a821ec2e824c4c7d20a2778c3a910570b</anchor>
      <arglist>(const TimedValueVector &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a997194a0937f7000f90edced63fd544c</anchor>
      <arglist>(const TimedValueVector &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>const TimedValueVector &amp;</type>
      <name>values</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>addd89edce8564f497d9bd287508eaf30</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValues</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a0b03ecdb30393152c9e511862aad9571</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>accc52bfc2b207a45c632ea8149d0feaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>compute</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a40b4f7c6c7bffa471344064e0666ceec</anchor>
      <arglist>(double currTime)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::LinearInterpolation&lt; Eigen::Vector6d &gt;</type>
      <name>interpolator_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a7e883686ee5423a00dad1156cb1a941f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimedValueVector</type>
      <name>values_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>afa3745020ef5eacbca215ab3697f057f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>prevIndex_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a0d4784e10957d3cb31d93ecde6351037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nextIndex_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a35a012cae5bebda697cc20a56f12a0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>intervalDuration_</name>
      <anchorfile>structmc__trajectory_1_1SequenceInterpolator.html</anchorfile>
      <anchor>a5e3dde638172c8f20f249a36ca07c128</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::shared</name>
    <filename>structmc__rtc_1_1shared.html</filename>
    <templarg>T</templarg>
    <templarg>BaseT</templarg>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_same&lt; BaseT, void &gt;::value, std::enable_shared_from_this&lt; T &gt;, BaseT &gt;::type</type>
      <name>ActualBase</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a95f9bd034123fcca25c997ff0514c18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; T &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a2ea904ee7adda9689987f23396920de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; const T &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a04c6954393d7340e76c5464804cea8ed</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shared&lt; Frame &gt;</name>
    <filename>structmc__rtc_1_1shared.html</filename>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_same&lt; void, void &gt;::value, std::enable_shared_from_this&lt; Frame &gt;, void &gt;::type</type>
      <name>ActualBase</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a95f9bd034123fcca25c997ff0514c18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; Frame &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a2ea904ee7adda9689987f23396920de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; const Frame &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a04c6954393d7340e76c5464804cea8ed</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shared&lt; RobotFrame, Frame &gt;</name>
    <filename>structmc__rtc_1_1shared.html</filename>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_same&lt; Frame, void &gt;::value, std::enable_shared_from_this&lt; RobotFrame &gt;, Frame &gt;::type</type>
      <name>ActualBase</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a95f9bd034123fcca25c997ff0514c18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; RobotFrame &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a2ea904ee7adda9689987f23396920de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; const RobotFrame &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a04c6954393d7340e76c5464804cea8ed</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>shared&lt; Robots &gt;</name>
    <filename>structmc__rtc_1_1shared.html</filename>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::is_same&lt; void, void &gt;::value, std::enable_shared_from_this&lt; Robots &gt;, void &gt;::type</type>
      <name>ActualBase</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a95f9bd034123fcca25c997ff0514c18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; Robots &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a2ea904ee7adda9689987f23396920de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::shared_ptr&lt; const Robots &gt;</name>
      <anchorfile>structmc__rtc_1_1shared.html</anchorfile>
      <anchor>a04c6954393d7340e76c5464804cea8ed</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::SharedPtrVectorConstIterator</name>
    <filename>structmc__rtc_1_1SharedPtrVectorConstIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::vector&lt; std::shared_ptr&lt; T &gt; &gt;::const_iterator</type>
      <name>iterator_t</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorConstIterator.html</anchorfile>
      <anchor>a0e0d63f615cfcb8a8e110b717bed142f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>pointer</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorConstIterator.html</anchorfile>
      <anchor>a63a324cabd24ceb8e3e011ee82036d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>reference</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorConstIterator.html</anchorfile>
      <anchor>abca35ee741823408802c1bb2354496fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtrVectorConstIterator</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorConstIterator.html</anchorfile>
      <anchor>a2f81d2b2f0f6ea620ae0257103b76e90</anchor>
      <arglist>(iterator_t it)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorConstIterator.html</anchorfile>
      <anchor>adc526b21486113bc2e10e04e4790e03b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorConstIterator.html</anchorfile>
      <anchor>aea59fdc9d8c99cc5e313166c9007d7b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::SharedPtrVectorIterator</name>
    <filename>structmc__rtc_1_1SharedPtrVectorIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::vector&lt; std::shared_ptr&lt; T &gt; &gt;::iterator</type>
      <name>iterator_t</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorIterator.html</anchorfile>
      <anchor>a8c5b23a7ee94311f02005240b99a835e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorIterator.html</anchorfile>
      <anchor>a54279f934795fa778f72b63788e3993c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorIterator.html</anchorfile>
      <anchor>a0c56a4842637717cccb374956f8714b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPtrVectorIterator</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorIterator.html</anchorfile>
      <anchor>a02ff38b6c6ff43f0ec63c73152e3a214</anchor>
      <arglist>(iterator_t it) noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorIterator.html</anchorfile>
      <anchor>a859c21ddb6c9ed3ef4cc9ca93900f712</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>structmc__rtc_1_1SharedPtrVectorIterator.html</anchorfile>
      <anchor>af26d7741c500150ed0b313ba4aab6dd0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::SimulationContactPair</name>
    <filename>structmc__control_1_1SimulationContactPair.html</filename>
    <member kind="function">
      <type></type>
      <name>SimulationContactPair</name>
      <anchorfile>structmc__control_1_1SimulationContactPair.html</anchorfile>
      <anchor>a074d699740f8b69b15c5fdbdde5519c0</anchor>
      <arglist>(const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;robotSurface, const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;envSurface)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>update</name>
      <anchorfile>structmc__control_1_1SimulationContactPair.html</anchorfile>
      <anchor>aeb88b53261805f73d79e348835e44c65</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const mc_rbdyn::Robot &amp;env)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_rbdyn::Surface &gt;</type>
      <name>robotSurface</name>
      <anchorfile>structmc__control_1_1SimulationContactPair.html</anchorfile>
      <anchor>a6580a421bf730ccc06b9a3777d480466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_rbdyn::Surface &gt;</type>
      <name>envSurface</name>
      <anchorfile>structmc__control_1_1SimulationContactPair.html</anchorfile>
      <anchor>a2b50f1a3fa514431d9c5552bf88f0181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; sch::S_Object &gt;</type>
      <name>robotSch</name>
      <anchorfile>structmc__control_1_1SimulationContactPair.html</anchorfile>
      <anchor>ac7198289925ffc6917bcdf14848bcde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; sch::S_Object &gt;</type>
      <name>envSch</name>
      <anchorfile>structmc__control_1_1SimulationContactPair.html</anchorfile>
      <anchor>a4a31ea1a5854da861e8a4f1c827386d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sch::CD_Pair</type>
      <name>pair</name>
      <anchorfile>structmc__control_1_1SimulationContactPair.html</anchorfile>
      <anchor>a1b9a7de72470d0d2d433a7c3f9843ad0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::SmoothTask</name>
    <filename>structmc__tasks_1_1SmoothTask.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; void(double)&gt;</type>
      <name>w_set_fn</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>ad0b3cad2b0a949faddd0259779446d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(void)&gt;</type>
      <name>w_get_fn</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a5a0447137eacf8f3c534ecc568b5aec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const objT &amp;)&gt;</type>
      <name>obj_set_fn</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a5ea4109a61bfbaec12d0b0831c5b01cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; const objT(void)&gt;</type>
      <name>obj_get_fn</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>ad253e94eb032bbb85f32e85be175fe81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmoothTask</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a9ceb8c25b164dea48c57db36aae1f788</anchor>
      <arglist>(w_set_fn w_set, w_get_fn w_get, obj_set_fn obj_set, obj_get_fn obj_get, double weight, const objT &amp;obj, double percent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a2615cd1f68019e4b4b8947c9271e2062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a739c37ff2c58b2b906fe1ac7eb08adbe</anchor>
      <arglist>(double weight, const objT &amp;obj, double percent)</arglist>
    </member>
    <member kind="variable">
      <type>w_set_fn</type>
      <name>w_set</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>ad8423422fde0f1394bc52751fe14dcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>w_get_fn</type>
      <name>w_get</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a0c30bbb84a3b062b0992c022f782ecfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>obj_set_fn</type>
      <name>obj_set</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>adee8384a9d270de1bc58484c584974d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>obj_get_fn</type>
      <name>obj_get</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a1c18f13463da565c13cb7b7f27b6cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a5b8834e3bf77ffe9c7f4626dbc6c64c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>objT</type>
      <name>obj</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a37bce28bfb36f35247f40e400fa1d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stepW</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a28924d882b21a72fe7998f0ed7ab9d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>objT</type>
      <name>stepO</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>aade06f21c4fbdee53fc75491a02c7db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>nrIter</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a884b8bb76b6c9a855075927986d4b26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iter</name>
      <anchorfile>structmc__tasks_1_1SmoothTask.html</anchorfile>
      <anchor>a5477c67f01c202cf9a659558e71700ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::Spline</name>
    <filename>structmc__trajectory_1_1Spline.html</filename>
    <templarg>T</templarg>
    <templarg>WaypointsT</templarg>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const T &amp;start, const T &amp;target, const WaypointsT &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const WaypointsT &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const WaypointsT &amp;</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const T &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const T &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>start_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>target_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WaypointsT</type>
      <name>waypoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>samples_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline&lt; Eigen::Matrix3d, std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &gt;</name>
    <filename>structmc__trajectory_1_1Spline.html</filename>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const Eigen::Matrix3d &amp;start, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &amp;</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const Eigen::Matrix3d &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const Eigen::Matrix3d &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>start_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>target_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt;</type>
      <name>waypoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
      <name>samples_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline&lt; Eigen::Vector3d, std::vector&lt; Eigen::Vector3d &gt; &gt;</name>
    <filename>structmc__trajectory_1_1Spline.html</filename>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;target, const std::vector&lt; Eigen::Vector3d &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const std::vector&lt; Eigen::Vector3d &gt; &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>start_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>target_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>waypoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>samples_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline&lt; Eigen::Vector3d, std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &gt;</name>
    <filename>structmc__trajectory_1_1Spline.html</filename>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &amp;</type>
      <name>waypoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>start</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>target</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>start_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>target_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt;</type>
      <name>waypoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>samples_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>structmc__trajectory_1_1Spline.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::SplineTrajectoryTask</name>
    <filename>structmc__tasks_1_1SplineTrajectoryTask.html</filename>
    <templarg>Derived</templarg>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; Derived &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a649052a5fbf326990d2b3d20ec66ab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric</type>
      <name>TrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af8a4647ef51a16ccf960c519e13c0ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_trajectory::SequenceInterpolator&lt; Eigen::Vector6d, mc_trajectory::LinearInterpolation&lt; Eigen::Vector6d &gt; &gt;</type>
      <name>SequenceInterpolator6d</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a8d2ac7fd3779da3324969baf637212bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineTrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac523b327dfdeff9b88aa265240099073</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double duration, double stiffness, double weight, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a56aabae51096134f054ab31c175ba59d</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a552e7c8b7ef80649a462476c30ef6cc6</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oriWaypoints</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ae50ea72643de837337187120c989c42b</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timeElapsed</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0f4207fc91c4eedd0617759dd4c92ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a46526962a3e24819c84aa77182abdb7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>evalTracking</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ae456950d2eafdbc888d0a92b0d87f66a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2f94ae2cfc7521582ffd1b5720bda580</anchor>
      <arglist>(const sva::PTransformd &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a8a915671172878e474be2514db659fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displaySamples</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a49b467df085bf4289a5c90276be9e9d9</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>displaySamples</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ab6c7b78884488afa4df3bc6e7db18353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aea7ce56cb05ec2f4fa98d4980e9cd356</anchor>
      <arglist>(bool paused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a936e06384b9ad6a4cdab2e8545e9b0aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentTime</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0debf08c0f670560ff53a465b38cbce2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a716f3f5f2c7db43ad8e22a49bdfd4bde</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3754c421be82d0d654b1e3c6d6e269fe</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a05b539bc8a2cb07958b1a6f2e8b1ac66</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">stiffness</docanchor>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac7b0abca4d4b4b3d00a49a66a366db6d</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2171ccb74c8178694c6cab983182cb76</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">damping</docanchor>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a902ea270230783f5a3a9c61c8e72fa49</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa477ee50908bbb25fa0a9bb80e81ae5b</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">setGains</docanchor>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2826d57d439ecdf1361731268f2b1606</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dimWeights)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">dimWeightInterpolation</docanchor>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0c340cd68671108b95e7b4f287983e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a114c7cde6ceb53c5b33d0551d6b0c286</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;stiffnessGains)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">stiffnessInterpolation</docanchor>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a9821caed3391acbcb3162ef2432a92fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa6c30a17fce0428f8a8d4d238efa302d</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dampingGains)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">dampingInterpolation</docanchor>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa826a098c08c1548dcb65bbba28189b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refPose</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a6d3a61eea75bf5fa5125564e9d5752e2</anchor>
      <arglist>(const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sva::PTransformd &amp;</type>
      <name>refPose</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3b6ce55a9a60ddf211b8221be9507603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>afa99dd9c136ee9039a844a4ffb814640</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa7147dba544550aa616caa164a40209a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a6b58c786b84e0d4f82f6e434589c0e80</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a858a3258f5a03499ce341a07230a54ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a95f8076ac69cad65a8b2ddf842a56d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a47c76bbfd6ed1275bfada4c8b238af4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::InterpolatedRotation</type>
      <name>oriSpline_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a99908fd6b6923222cd523025bd2e1c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>dimWeightInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac3865e50155128dd9178c4504fcf908e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>stiffnessInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a7584b0ee675b53361e1efe97f3069543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>dampingInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af0049ec3a334ea0db2ae5c05779e865a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>paused_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af5a5ee124caa955429dbe83416c8b8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currTime_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a221a83c509eb1b24df8a96a6eb4ac7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samples_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a55ddc08175e2c18024ba3aba28c9caa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ab58684bba10bad5cbcbe7414e04fb6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3754c421be82d0d654b1e3c6d6e269fe</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a05b539bc8a2cb07958b1a6f2e8b1ac66</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">stiffness</docanchor>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac7b0abca4d4b4b3d00a49a66a366db6d</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2171ccb74c8178694c6cab983182cb76</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">damping</docanchor>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a902ea270230783f5a3a9c61c8e72fa49</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa477ee50908bbb25fa0a9bb80e81ae5b</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">setGains</docanchor>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2826d57d439ecdf1361731268f2b1606</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dimWeights)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">dimWeightInterpolation</docanchor>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0c340cd68671108b95e7b4f287983e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a114c7cde6ceb53c5b33d0551d6b0c286</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;stiffnessGains)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">stiffnessInterpolation</docanchor>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a9821caed3391acbcb3162ef2432a92fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa6c30a17fce0428f8a8d4d238efa302d</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dampingGains)</arglist>
      <docanchor file="structmc__tasks_1_1SplineTrajectoryTask">dampingInterpolation</docanchor>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa826a098c08c1548dcb65bbba28189b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</name>
    <filename>structmc__tasks_1_1SplineTrajectoryTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a649052a5fbf326990d2b3d20ec66ab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric</type>
      <name>TrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af8a4647ef51a16ccf960c519e13c0ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_trajectory::SequenceInterpolator&lt; Eigen::Vector6d, mc_trajectory::LinearInterpolation&lt; Eigen::Vector6d &gt; &gt;</type>
      <name>SequenceInterpolator6d</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a8d2ac7fd3779da3324969baf637212bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineTrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac523b327dfdeff9b88aa265240099073</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double duration, double stiffness, double weight, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a56aabae51096134f054ab31c175ba59d</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a552e7c8b7ef80649a462476c30ef6cc6</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oriWaypoints</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ae50ea72643de837337187120c989c42b</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timeElapsed</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0f4207fc91c4eedd0617759dd4c92ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a46526962a3e24819c84aa77182abdb7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>evalTracking</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ae456950d2eafdbc888d0a92b0d87f66a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2f94ae2cfc7521582ffd1b5720bda580</anchor>
      <arglist>(const sva::PTransformd &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a8a915671172878e474be2514db659fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displaySamples</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a49b467df085bf4289a5c90276be9e9d9</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>displaySamples</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ab6c7b78884488afa4df3bc6e7db18353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aea7ce56cb05ec2f4fa98d4980e9cd356</anchor>
      <arglist>(bool paused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a936e06384b9ad6a4cdab2e8545e9b0aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentTime</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0debf08c0f670560ff53a465b38cbce2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a716f3f5f2c7db43ad8e22a49bdfd4bde</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3754c421be82d0d654b1e3c6d6e269fe</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a05b539bc8a2cb07958b1a6f2e8b1ac66</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac7b0abca4d4b4b3d00a49a66a366db6d</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2171ccb74c8178694c6cab983182cb76</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a902ea270230783f5a3a9c61c8e72fa49</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa477ee50908bbb25fa0a9bb80e81ae5b</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2826d57d439ecdf1361731268f2b1606</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dimWeights)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0c340cd68671108b95e7b4f287983e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a114c7cde6ceb53c5b33d0551d6b0c286</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;stiffnessGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a9821caed3391acbcb3162ef2432a92fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa6c30a17fce0428f8a8d4d238efa302d</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dampingGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa826a098c08c1548dcb65bbba28189b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refPose</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a6d3a61eea75bf5fa5125564e9d5752e2</anchor>
      <arglist>(const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sva::PTransformd &amp;</type>
      <name>refPose</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3b6ce55a9a60ddf211b8221be9507603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>afa99dd9c136ee9039a844a4ffb814640</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa7147dba544550aa616caa164a40209a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a6b58c786b84e0d4f82f6e434589c0e80</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a858a3258f5a03499ce341a07230a54ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a95f8076ac69cad65a8b2ddf842a56d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a47c76bbfd6ed1275bfada4c8b238af4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::InterpolatedRotation</type>
      <name>oriSpline_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a99908fd6b6923222cd523025bd2e1c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>dimWeightInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac3865e50155128dd9178c4504fcf908e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>stiffnessInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a7584b0ee675b53361e1efe97f3069543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>dampingInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af0049ec3a334ea0db2ae5c05779e865a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>paused_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af5a5ee124caa955429dbe83416c8b8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currTime_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a221a83c509eb1b24df8a96a6eb4ac7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samples_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a55ddc08175e2c18024ba3aba28c9caa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ab58684bba10bad5cbcbe7414e04fb6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3754c421be82d0d654b1e3c6d6e269fe</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a05b539bc8a2cb07958b1a6f2e8b1ac66</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac7b0abca4d4b4b3d00a49a66a366db6d</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2171ccb74c8178694c6cab983182cb76</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a902ea270230783f5a3a9c61c8e72fa49</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa477ee50908bbb25fa0a9bb80e81ae5b</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2826d57d439ecdf1361731268f2b1606</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dimWeights)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0c340cd68671108b95e7b4f287983e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a114c7cde6ceb53c5b33d0551d6b0c286</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;stiffnessGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a9821caed3391acbcb3162ef2432a92fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa6c30a17fce0428f8a8d4d238efa302d</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dampingGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa826a098c08c1548dcb65bbba28189b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</name>
    <filename>structmc__tasks_1_1SplineTrajectoryTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a649052a5fbf326990d2b3d20ec66ab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric</type>
      <name>TrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af8a4647ef51a16ccf960c519e13c0ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_trajectory::SequenceInterpolator&lt; Eigen::Vector6d, mc_trajectory::LinearInterpolation&lt; Eigen::Vector6d &gt; &gt;</type>
      <name>SequenceInterpolator6d</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a8d2ac7fd3779da3324969baf637212bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineTrajectoryTask</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac523b327dfdeff9b88aa265240099073</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double duration, double stiffness, double weight, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a56aabae51096134f054ab31c175ba59d</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a552e7c8b7ef80649a462476c30ef6cc6</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oriWaypoints</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ae50ea72643de837337187120c989c42b</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timeElapsed</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0f4207fc91c4eedd0617759dd4c92ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a46526962a3e24819c84aa77182abdb7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>evalTracking</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ae456950d2eafdbc888d0a92b0d87f66a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2f94ae2cfc7521582ffd1b5720bda580</anchor>
      <arglist>(const sva::PTransformd &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a8a915671172878e474be2514db659fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displaySamples</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a49b467df085bf4289a5c90276be9e9d9</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>displaySamples</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ab6c7b78884488afa4df3bc6e7db18353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aea7ce56cb05ec2f4fa98d4980e9cd356</anchor>
      <arglist>(bool paused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a936e06384b9ad6a4cdab2e8545e9b0aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentTime</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0debf08c0f670560ff53a465b38cbce2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a716f3f5f2c7db43ad8e22a49bdfd4bde</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3754c421be82d0d654b1e3c6d6e269fe</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a05b539bc8a2cb07958b1a6f2e8b1ac66</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac7b0abca4d4b4b3d00a49a66a366db6d</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2171ccb74c8178694c6cab983182cb76</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a902ea270230783f5a3a9c61c8e72fa49</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa477ee50908bbb25fa0a9bb80e81ae5b</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2826d57d439ecdf1361731268f2b1606</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dimWeights)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0c340cd68671108b95e7b4f287983e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a114c7cde6ceb53c5b33d0551d6b0c286</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;stiffnessGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a9821caed3391acbcb3162ef2432a92fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa6c30a17fce0428f8a8d4d238efa302d</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dampingGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa826a098c08c1548dcb65bbba28189b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refPose</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a6d3a61eea75bf5fa5125564e9d5752e2</anchor>
      <arglist>(const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sva::PTransformd &amp;</type>
      <name>refPose</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3b6ce55a9a60ddf211b8221be9507603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>afa99dd9c136ee9039a844a4ffb814640</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa7147dba544550aa616caa164a40209a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a6b58c786b84e0d4f82f6e434589c0e80</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolateGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a858a3258f5a03499ce341a07230a54ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a95f8076ac69cad65a8b2ddf842a56d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a47c76bbfd6ed1275bfada4c8b238af4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::InterpolatedRotation</type>
      <name>oriSpline_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a99908fd6b6923222cd523025bd2e1c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>dimWeightInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac3865e50155128dd9178c4504fcf908e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>stiffnessInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a7584b0ee675b53361e1efe97f3069543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SequenceInterpolator6d</type>
      <name>dampingInterpolator_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af0049ec3a334ea0db2ae5c05779e865a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>paused_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>af5a5ee124caa955429dbe83416c8b8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currTime_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a221a83c509eb1b24df8a96a6eb4ac7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samples_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a55ddc08175e2c18024ba3aba28c9caa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ab58684bba10bad5cbcbe7414e04fb6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a3754c421be82d0d654b1e3c6d6e269fe</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a05b539bc8a2cb07958b1a6f2e8b1ac66</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>ac7b0abca4d4b4b3d00a49a66a366db6d</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2171ccb74c8178694c6cab983182cb76</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a902ea270230783f5a3a9c61c8e72fa49</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa477ee50908bbb25fa0a9bb80e81ae5b</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a2826d57d439ecdf1361731268f2b1606</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dimWeights)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dimWeightInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a0c340cd68671108b95e7b4f287983e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a114c7cde6ceb53c5b33d0551d6b0c286</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;stiffnessGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>stiffnessInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>a9821caed3391acbcb3162ef2432a92fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa6c30a17fce0428f8a8d4d238efa302d</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt;&gt; &amp;dampingGains)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector6d &gt; &gt; &amp;</type>
      <name>dampingInterpolation</name>
      <anchorfile>structmc__tasks_1_1SplineTrajectoryTask.html</anchorfile>
      <anchor>aa826a098c08c1548dcb65bbba28189b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Springs</name>
    <filename>structmc__rbdyn_1_1Springs.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>springsBodies</name>
      <anchorfile>structmc__rbdyn_1_1Springs.html</anchorfile>
      <anchor>a6c66bef3fc4e0dc969d0924fc01e028b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>afterSpringsBodies</name>
      <anchorfile>structmc__rbdyn_1_1Springs.html</anchorfile>
      <anchor>abe9081480e52ed8822a43e5807407324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>springsJoints</name>
      <anchorfile>structmc__rbdyn_1_1Springs.html</anchorfile>
      <anchor>acb0fbbe6da7929023e50ef5f4a3471d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</name>
    <filename>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</filename>
    <member kind="function">
      <type></type>
      <name>StabilizerConfiguration</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a6cf15ba02637b2619905b4fb27f49b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StabilizerConfiguration</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a01de7b3d2c97b489adcb94c882e4e83b</anchor>
      <arglist>(const mc_rtc::Configuration &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampGains</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>acf38535cf4d40c07c61d9798683cb15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>ad62077263c1af6f677dd4645b663eb8e</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>afb389e9e183efdcad0db023e57383b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW bool</type>
      <name>verbose</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>ad3172aea56993c54869ca977f7eed0d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SafetyThresholds</type>
      <name>safetyThresholds</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a4d88d0c612afd2fc60d4b60efa76bc3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FDQPWeights</type>
      <name>fdqpWeights</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>aa9d26f0bb6e592ef0f94549e30da5972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>friction</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a2711f393aa208d546265f1ccdaa4f927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>leftFootSurface</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a30cc86b398c8b84bb07fd032e35d76e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rightFootSurface</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>ac0c774614c0a1f30b19d139295f48c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>constrainCoP</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a2d41b76eb67c53097283f744a746aa01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>copAdmittance</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>af5eb02096ad548196e57cd8a5aad7a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::MotionVecd</type>
      <name>copMaxVel</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a254b96dec351e68787a55ac10130c6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>copVelFilterGain</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a830868e9f51b1d6e3926def0786b8da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ZMPCCConfiguration</type>
      <name>zmpcc</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a7202444717b6eb8868bf2478e45901b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Gains3d</type>
      <name>dfAdmittance</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a32e18f65856e347295507f4f17d2629f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Gains3d</type>
      <name>dfDamping</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a64c7af2bfb69a56a02ba5c667ae8169f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Gains2d</type>
      <name>dcmPropGain</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>ac90879e6d883a90f3612c68e670a4fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Gains2d</type>
      <name>dcmIntegralGain</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>af146ad31f58547fc9c6266989dbed13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Gains2d</type>
      <name>dcmDerivGain</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>af4654ca70591e2a2c3de9ebf2ee57ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comdErrorGain</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>af22ce2c152009124ffa98a0e08fa898d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>zmpdGain</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a1c98bf56a034264da108e725e6256a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dcmIntegratorTimeConstant</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a6cf18b92b08365adf4dfdbdbb041d5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dcmDerivatorTimeConstant</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>ae59b68251ee3fe90880e6da86212c935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>comActiveJoints</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>af0f590199c5cb9ba6aa7b25f56447811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>comStiffness</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>abaec169e8fcf147bf63785088fd3c896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comWeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>abd7dd049c8ac626404fc3af328f09a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>comDimWeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a4bbb1e6748355a7ce51e2aa5328109e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comHeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>abd54fe3cf92a100a19f0a5bf408272d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>torsoBodyName</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>abaf5f231ddd92e45c3947448560a43ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>torsoPitch</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a4342762c90bd3857760f991d3424cf47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>torsoStiffness</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a4c91236b2c0d11ebfe65ab78668a873a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>torsoWeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a6ea68278767553d037dba6b104327cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>torsoDimWeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a0ea1c0769143dbeaa622e66c2340c730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pelvisStiffness</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a42b1aa4d6be73c7a9986292e8ca1e3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pelvisWeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a8bc2c7d4a6964408929e7b23ff63667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>pelvisDimWeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a3ef6a17956449ffdcfa8b02ea02b0cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::MotionVecd</type>
      <name>contactDamping</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a5d438686041a3aedaf93629936510ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::MotionVecd</type>
      <name>contactStiffness</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a9e3bade64b2388a1ceb550b86699f594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>contactWeight</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>ac682b8740dbc4d8f1af7ec01a3d9062b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>vdcFrequency</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a0b4dc848ffc84548ed88a2c6059ff5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>vdcStiffness</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a34a4b63e93b00c661f926721e284f3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DCMBiasEstimatorConfiguration</type>
      <name>dcmBias</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>a5a6639f87b0f1da854c48067332e98aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ExternalWrenchConfiguration</type>
      <name>extWrench</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1StabilizerConfiguration.html</anchorfile>
      <anchor>ae1daed2b128d2c870942bc007cc26976</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::StabilizerStandingState</name>
    <filename>structmc__control_1_1fsm_1_1StabilizerStandingState.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a4ae65ee8eda22d7e926e2d9aecbbbfb8</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a6e8df7ef63d968bdfe366e5c12d224e7</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a57fdd73a5287a112295a179b3dc3a834</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a398141d42554616c96b06784c46e1c1e</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetCoP</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a174cd1cafc870e7251577d1057ec340f</anchor>
      <arglist>(const Eigen::Vector3d &amp;cop)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetCoM</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>af2dcb13246f2146455596c75fa75eb62</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>copHeight</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>af13d0e8b9e94acd0cfc3e6a7a42516ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::lipm_stabilizer::StabilizerTask &gt;</type>
      <name>stabilizerTask_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>ac1b5a6462db239740800b703e5ef6d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>aa6c74bc9e24d8446290e7f48820019bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasCompletion_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>aefa6ecfbc94489eec5d0cac0ae5b82ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmThreshold_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a5bf7aa7e62f87ec4ab70e7fdfc9fb656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_planning::Pendulum</type>
      <name>pendulum_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>ab540aeb0263d7368a8f0f28c6cf8db01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>K_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a21831be19e200ffe66e41d74e496dcda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>D_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>aa3d152c14ec40bfb43fbd96c46335d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>comHeight_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>aef9d57338a8967af8f645abde17fe235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comTarget_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>aec95cfe1bf344ed978a0f427916c457c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>copTarget_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a7d628fb75354ff6eed63d59a49677694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>optionalGUI_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a9d66966f079f819c302800335ed8aeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>robot_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a1285ff0a3c0299d224df1d4349c6fa4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>anchorFrameFunction_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a3223acafb893060e115adac91d3c254e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ownsAnchorFrameCallback_</name>
      <anchorfile>structmc__control_1_1fsm_1_1StabilizerStandingState.html</anchorfile>
      <anchor>a838773b625da8cdbca55e0a40f074bc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::StabilizerTask</name>
    <filename>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</filename>
    <base>mc_tasks::MetaTask</base>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask::EnumClassHash</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask::ExternalWrench</class>
    <member kind="function">
      <type></type>
      <name>StabilizerTask</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>afe79a5d39b9aaf14d33026354d81280d</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const mc_rbdyn::Robots &amp;realRobots, unsigned int robotIndex, const std::string &amp;leftSurface, const std::string &amp;rightSurface, const std::string &amp;torsoBodyName, double dt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StabilizerTask</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>acbc98793917ce33829d717f289906192</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const mc_rbdyn::Robots &amp;realRobots, unsigned int robotIndex, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a3e01dabf47eec2038cf3db88324df2d3</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a65b51a83fbd47db891199fdafdc50220</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ada370921b62caa185b6eaeaa9638cd06</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a291e8bd69f054b3cce5117e721356185</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a04089abb785bdade64b4c8309c33c4c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a45f17fc7c444f8a9ccaebaf287574108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa4bf362badbb9f20bc93c4277e58c50a</anchor>
      <arglist>(const StabilizerConfiguration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commitConfig</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a6e994881ac1a1355243361b1a280ab12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aea4976e383f665df47a0396b85a2db32</anchor>
      <arglist>(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>const StabilizerConfiguration &amp;</type>
      <name>config</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a8475056ad2eabba42d0f46c310361e84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StabilizerConfiguration &amp;</type>
      <name>commitedConfig</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a905a2a763617aeaf86a0af3e3973c34e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconfigure</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a9c93d88492cb1541133d83c8072be280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a834eb99d2717aacb38b5eee307bd0773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a91e33c4eb45fcea0a744aeb63accb306</anchor>
      <arglist>(const ContactDescriptionVector &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a694edac11eca809a1faaafed3971cbca</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; ContactState, sva::PTransformd &gt;&gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a2284666da172e5bc40f90525f800a0c0</anchor>
      <arglist>(const std::vector&lt; ContactState &gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>contactAnklePose</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a18cf3bbe16d6f31b76fb67a4db7bf216</anchor>
      <arglist>(ContactState s) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>footSurface</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a4f59f1f61174faf255e2fd32e61a72fa</anchor>
      <arglist>(ContactState s) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>leftFootRatio</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a91cb5583f420f95611496de2bf2e43b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>anchorFrame</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac0e7fbe84007494ab0c5b5db90b92768</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>staticTarget</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aeca8ec3501161284eebe42d34b7433d3</anchor>
      <arglist>(const Eigen::Vector3d &amp;com, double zmpHeight=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a8a8a726b9e64cf46649652479923b3cf</anchor>
      <arglist>(const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comd, const Eigen::Vector3d &amp;comdd, const Eigen::Vector3d &amp;zmp, const Eigen::Vector3d &amp;zmpd=Eigen::Vector3d::Zero())</arglist>
      <docanchor file="structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask">stabilizer_target</docanchor>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetCoMRaw</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a36caee86d60312d0329e964cd5909e91</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetCoM</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a8d2ec1f0f1f41224897010e86ddccdd7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetCoMVelocity</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a7f4cb4a06854f0b4437c07ba733c9699</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetCoMAcceleration</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a642ca0dd7488041f71dca650f759be5b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetZMP</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>af1cd20ce828afc0bdf7399bbe8571230</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetZMPVelocity</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aeffdf1f5030b46371c2ec220db793b50</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExternalWrenches</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ab68f4f026a0e51b572c2b6fb39c81fdb</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;surfaceNames, const std::vector&lt; sva::ForceVecd &gt; &amp;targetWrenches, const std::vector&lt; sva::MotionVecd &gt; &amp;gains)</arglist>
      <docanchor file="structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask">set_external_wrenches</docanchor>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ExternalWrench &gt; &amp;</type>
      <name>externalWrenches</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a3300ec93b5d85e099c8530c0ceca8713</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>distribZMP</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a81c7f450c61f96aff7ef6002f0048621</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredDCM</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae78207848e03e1b1153ad47f812aeb3c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector2d</type>
      <name>biasDCM</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa645580f763fa4c2b0811db9cfbc3cf2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredZMP</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a41fed4c5c24646bb999d0ad8048b6c9d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredCoM</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ad173d40ca3a81fe661d64d90fcf92106</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredCoMd</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a33c41662a68ba76b375b5f9dcd878475</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>comOffsetTarget</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a136d6fa382469eb01738751657dc18e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>comOffsetMeasured</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a3b43cf3e68a1716d00b15c788e6d75a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inContact</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a7a23476f42cf53f5f5569d3ccfd9ca01</anchor>
      <arglist>(ContactState state) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inDoubleSupport</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a4b06822132971cbaa5a212cc611ce926</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ad69940b8fb336e2728359e8a1014958b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a649fbf45bbb740cf97fbe2c19a50cac8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::ExponentialMovingAverage&lt; Eigen::Vector3d &gt;</type>
      <name>dcmIntegrator_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>abe50c92ded00ad8f22e9da9433dee655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPassCompose&lt; Eigen::Vector3d &gt;</type>
      <name>dcmDerivator_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a68d1efc50be7bb07bdf12ed98bba24cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inTheAir_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a22569ac33f8c0e99bb674520373c41c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dfForceError_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>af009d6a160e266c013a56d7348ac4c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dfError_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a071bad816dfef57c9f0a2a8b3d9fa49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a78355a7b3bb963abe0bc160f0d51bcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>leftFootRatio_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a077f98071aa5d9ae2b861aba4edbc606</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mass_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aadea2267fb6365e262900d3da4e40d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>runTime_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a1c5ff776bf36beaee2182776ba4feca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>vdcHeightError_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ab459d6ba167857323daefe6a3fbef750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>desiredWrench_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a706d2d0fed1d66103c2bcf669dd47bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>distribWrench_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>acea47979a383c106e0eedc05a02e52bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>distribZMP_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a1debc60c12375bc8ebb3dad18a4bf3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>zmpFrame_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aeca99cf5f7b08a8d39bc3a7045d2e46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ExternalWrench &gt;</type>
      <name>extWrenches_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a0993fc2ce03fd1856f69165cb3731f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>extWrenchSumTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a16db8e5921026c24b38ac1bd298443af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>extWrenchSumMeasured_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a40e319f4a2cadb78b98f47b7ef930bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a157a2ca5ae25905e6db6c0a522e38b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetMeasured_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a8f0dfeb868178dce27d2ea0553c10c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zmpCoefTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a78d13362383ec74a8c60e18c6b2a58f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zmpCoefMeasured_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a9b25af3fa9fd413a3d1060e601ca92b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetErr_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae9df595049e717e34a82d0630c343720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetErrCoM_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a9c8e267e4ec305048932bc4345a5f53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetErrZMP_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a3ca80b3de904c482671181d285cb0678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPass&lt; sva::ForceVecd &gt;</type>
      <name>extWrenchSumLowPass_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a5094aa1b658e2b4ddf331365b722502f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPass&lt; Eigen::Vector3d &gt;</type>
      <name>comOffsetLowPass_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa2ed3dfcd791e23381b75323a91e78af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPass&lt; Eigen::Vector3d &gt;</type>
      <name>comOffsetLowPassCoM_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac8c2388cc9072d464325878e4ffaa7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::StationaryOffset&lt; Eigen::Vector3d &gt;</type>
      <name>comOffsetDerivator_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aab92a8406c48cafe9353ca84b2cfb9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; ContactState, internal::Contact, EnumClassHash, std::equal_to&lt; ContactState &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const ContactState, internal::Contact &gt; &gt; &gt;</type>
      <name>contacts_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac03c45acb87ced70cf86b77ac9bd20ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ContactState &gt;</type>
      <name>addContacts_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>af0aa6726e77f2dc1d7f371980426fdef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; ContactState, std::shared_ptr&lt; mc_tasks::force::CoPTask &gt;, EnumClassHash &gt;</type>
      <name>footTasks</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a7c3405e9317cfb1104b0b18658ef3b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; mc_tasks::force::CoPTask &gt; &gt;</type>
      <name>contactTasks</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac619cfcd7785d886845a724f361f8e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>contactSensors</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ab49c31a3200538546f2fca877a7bfe26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; Eigen::Vector3d &gt; &gt;</type>
      <name>supportPolygons_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ad55b59e574799dcf11bc7598b8a6cea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector2d</type>
      <name>supportMin_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a37b5b7e6f2acd693711f6b1e8c7310db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector2d</type>
      <name>supportMax_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae1133e256a909367f839ecef2528c7be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::CoMTask &gt;</type>
      <name>comTask</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a0878448d283b4e2aa4a0dae3aff044cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::OrientationTask &gt;</type>
      <name>pelvisTask</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a6476ed836d208897809eb8eb5e404689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::OrientationTask &gt;</type>
      <name>torsoTask</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a207abdb63fcc13968352a6c7fffd47fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac252cd1d8af9703038aa40b61c0686ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>realRobots_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a01584b7cc75fc92846251632bec2e835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>robotIndex_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a23a5f961e6993f20ebe16f246736e1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comTargetRaw_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a107dcb5409d4bb7639ff2145f0a36009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>af6f2964c1be8b168193c80636bc0b583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comdTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa3aac681a66c5968dde54b17f47d27fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comddTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a1a9150a5ae2456a5943fef824a02febf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>zmpTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aae15134e2c9dad716a90a85d146969e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>zmpdTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a5c672fb72b1a5aa4c11b45df3ef55dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>af0234fd0ce9a193f6a591b70f29448db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a9eccc2bdf062ef36fc1f2647bc87f6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>t_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a4da2c074568197514ca356b776540601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StabilizerConfiguration</type>
      <name>defaultConfig_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a5274e524d6fbfcb2a165feeaded1bad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StabilizerConfiguration</type>
      <name>lastConfig_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a4d2037034ff54a5625fc7009aa1c5448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StabilizerConfiguration</type>
      <name>disableConfig_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a8c319bbb0af50167b9628ae561183d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StabilizerConfiguration</type>
      <name>c_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa9ae12de4d5a45e87630efb9c45c7121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>reconfigure_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a39e9122dda239e200cec4a503d02cb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enabled_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a604de2ee35e031d51bfe6c637e53ec3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::QuadProgDense</type>
      <name>qpSolver_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a017bc4102822276a88a60ae683c46627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmAverageError_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa588b56d52973ccad6a81e719f669614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmError_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae1f0f546550766ef228fc687e556c8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmVelError_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a488812c1669547a3b416bc203026832c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredCoM_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a5ba652e24e17842a3a0e7d00157a0416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredCoMd_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa44333b1b7aa2db2ae3f82162fe00536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredCoMdd_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aca1f80d2f2d2daf7c758bd98a81ab610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredZMP_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a6863d425eff4e098af4abc8a38ee2326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredDCM_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a0b4b1c28b4e34a2f4c4600b4f2ec2245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredDCMUnbiased_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a2747ce4f19500c9313bd38400d6c4c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredCoMUnbiased_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a35e9e734fe506e426a866ccbb5b790f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>measuredNetWrench_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a1d3d079514e89bcafe3d35b1ea2c1018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>zmpccOnlyDS_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aafe66416fe947aab7f6de7cd369df88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZMPCC</type>
      <name>zmpcc_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a0e3c1c45795642a29285fa96ef46808f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stateObservation::LipmDcmEstimator</type>
      <name>dcmEstimator_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a32c48e17c2c451c67d804098b17b27e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dcmEstimatorNeedsReset_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a4b355d04025f1a2489cc9e5b579d27ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torsoPitch</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>adc4360c9ae88e17ad408826deaeeb1c9</anchor>
      <arglist>(double pitch) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torsoWeight</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ad8304c9dda559e368bae68116dfad3d5</anchor>
      <arglist>(double weight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torsoStiffness</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a15becbde64e05238765cbb514f9163b0</anchor>
      <arglist>(double stiffness) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pelvisWeight</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>abdc4a7009a01993765860ad699cf587e</anchor>
      <arglist>(double weight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pelvisStiffness</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a0128311eb332240ff25a3c0ada010148</anchor>
      <arglist>(double stiffness) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcmGains</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a255c7b9c2e0434e97d450f4089908299</anchor>
      <arglist>(double p, double i, double d) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcmGains</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a58c5a5511acce6250f822dddf65e0a2d</anchor>
      <arglist>(const Eigen::Vector2d &amp;p, const Eigen::Vector2d &amp;i, const Eigen::Vector2d &amp;d) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcmIntegratorTimeConstant</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac26f74f6c9313363b2691105da3eae52</anchor>
      <arglist>(double dcmIntegratorTimeConstant) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>dcmDerivatorTimeConstant</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae203e35dbd5418acb8ec2650f020a6b5</anchor>
      <arglist>(double T) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcmDerivatorCutoffPeriod</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a3984d932742f5329d85f805b4723e7d2</anchor>
      <arglist>(double T) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extWrenchSumLowPassCutoffPeriod</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae0837cd5e41e827e59bfcae07f3b0c7b</anchor>
      <arglist>(double cutoffPeriod) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comOffsetLowPassCutoffPeriod</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae25dfdb1beb2bdc5536aac8a933d5293</anchor>
      <arglist>(double cutoffPeriod) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comOffsetLowPassCoMCutoffPeriod</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa2efd683545dd3072d7d3aa04dfe96fa</anchor>
      <arglist>(double cutoffPeriod) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comOffsetDerivatorTimeConstant</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa9516bd1875642db8c5ca3f278063e21</anchor>
      <arglist>(double timeConstant) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comWeight</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>af16c27e6e64e0c3bf0a3ee8a84f14aee</anchor>
      <arglist>(double weight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comStiffness</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>abffee740af84bea06469fdb39fa22e27</anchor>
      <arglist>(const Eigen::Vector3d &amp;stiffness) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contactWeight</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a3c6c91f136cf063c621fc841bff276ff</anchor>
      <arglist>(double weight) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contactStiffness</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a1a89ad7ab4194e7fadb94d17769f4b28</anchor>
      <arglist>(const sva::MotionVecd &amp;stiffness) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>contactDamping</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a8826dde36c6bbc913699999b10947e55</anchor>
      <arglist>(const sva::MotionVecd &amp;damping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copAdmittance</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a5b6105d75689301db9d974c1119069da</anchor>
      <arglist>(const Eigen::Vector2d &amp;copAdmittance) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copMaxVel</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a4d023011b4bb8a38750097910f91b76a</anchor>
      <arglist>(const sva::MotionVecd &amp;copMaxVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copVelFilterGain</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a74e21f2251aece81dbf19552fab22744</anchor>
      <arglist>(double gain) noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>copVelFilterGain</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a856264c2501b219ecb345d77794bc311</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vdcFrequency</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a87e39ffd522ed054a2f5d066d04f98f2</anchor>
      <arglist>(double freq) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vdcStiffness</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a902360523f74d1b286d46e5d3743c7b6</anchor>
      <arglist>(double stiffness) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dfAdmittance</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a69f288875e64cd0d86f876dca9f3ef3e</anchor>
      <arglist>(Eigen::Vector3d dfAdmittance) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dfDamping</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ad95c2c21d090a13680ccd51b542688ac</anchor>
      <arglist>(Eigen::Vector3d dfDamping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fdqpWeights</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a61511c4f2321084adc649936db38ca70</anchor>
      <arglist>(const FDQPWeights &amp;fdqp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safetyThresholds</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a41a809b5612edf600a57d53917f6fc62</anchor>
      <arglist>(const SafetyThresholds &amp;thresholds) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcmBiasEstimatorConfiguration</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a46080b804a13b9c7856cfc629470e51b</anchor>
      <arglist>(const DCMBiasEstimatorConfiguration &amp;biasConfig) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DCMBiasEstimatorConfiguration &amp;</type>
      <name>dcmBiasEstimatorConfiguration</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>acc69d3ef42354f7f8f104773de7c544d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>externalWrenchConfiguration</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a7b4d0a866a7eb38fdb14567d4ef78995</anchor>
      <arglist>(const ExternalWrenchConfiguration &amp;extWrenchConfig) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ExternalWrenchConfiguration &amp;</type>
      <name>externalWrenchConfiguration</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa8e7a8dde0d29233a6eee898f128361a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac7709c43f16a9b418ecf2619d69821a6</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a1bef48c5f1f58cf958f55c9fb2c9e6e1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromGUI</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a47f242d0db7ed96a17dc3aea2726c473</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a5015b2c830f229580727098d7b769d1d</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a0806e753efb5d4a75ea474d775ccadf4</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a18352e8c8269aabbd125f8d49a9c5b2f</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a50bd7771e0e45cd45b507af97b285544</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configure_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a19464c74ed88aa569d1b0a3a5f4c505b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkConfiguration</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>abfb302989c1f34fe7131c72bd74e33a5</anchor>
      <arglist>(const StabilizerConfiguration &amp;config)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ExternalWrench &gt;</type>
      <name>extWrenches_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a0993fc2ce03fd1856f69165cb3731f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>extWrenchSumTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a16db8e5921026c24b38ac1bd298443af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>extWrenchSumMeasured_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a40e319f4a2cadb78b98f47b7ef930bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a157a2ca5ae25905e6db6c0a522e38b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetMeasured_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a8f0dfeb868178dce27d2ea0553c10c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zmpCoefTarget_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a78d13362383ec74a8c60e18c6b2a58f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>zmpCoefMeasured_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a9b25af3fa9fd413a3d1060e601ca92b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetErr_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ae9df595049e717e34a82d0630c343720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetErrCoM_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a9c8e267e4ec305048932bc4345a5f53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffsetErrZMP_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a3ca80b3de904c482671181d285cb0678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPass&lt; sva::ForceVecd &gt;</type>
      <name>extWrenchSumLowPass_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>a5094aa1b658e2b4ddf331365b722502f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPass&lt; Eigen::Vector3d &gt;</type>
      <name>comOffsetLowPass_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aa2ed3dfcd791e23381b75323a91e78af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LowPass&lt; Eigen::Vector3d &gt;</type>
      <name>comOffsetLowPassCoM_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>ac8c2388cc9072d464325878e4ffaa7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::StationaryOffset&lt; Eigen::Vector3d &gt;</type>
      <name>comOffsetDerivator_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1StabilizerTask.html</anchorfile>
      <anchor>aab92a8406c48cafe9353ca84b2cfb9c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::State</name>
    <filename>structmc__control_1_1fsm_1_1State.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~State</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a361292f4c1af52fb11fb081142832e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a32a8ea03359d52b9c7b096c3b9c6a890</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>acb573a0d4be2001f1e6820d9d75d3a94</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a70d93ac4ef5012911b48890e8108141f</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a88b6bae6fed3e5b9897bcab3feb27621</anchor>
      <arglist>(Controller &amp;ctl)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a8a7a9e7bb388af127cf54b748c01c069</anchor>
      <arglist>(Controller &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read_msg</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a282c4e94aea17f84229e16f2496560df</anchor>
      <arglist>(std::string &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read_write_msg</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a870b4c681a830419af9f482d1891893f</anchor>
      <arglist>(std::string &amp;, std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>output</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a0a94b4c21887b3bc710d040a31c5a2dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a6a5b441d6b4c08f462903b243484e02e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>af62e0496fbbe60350808ba3cfe574fd1</anchor>
      <arglist>(const std::string &amp;n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>output</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a1e115a009309410f0eadabf118a6fb49</anchor>
      <arglist>(const std::string &amp;o)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>ad091fd2b869127470275f0c0555e350c</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>aabbb5ad8636a504d50d0fe5a6b4b6267</anchor>
      <arglist>(Controller &amp;ctl)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>teardown</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a0feca48f8402f89d6e453d7739b7dab3</anchor>
      <arglist>(Controller &amp;ctl)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_contacts_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>ad5e8acab9275900efb0a32ffaf155bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_contacts_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a902a5522347fbb8aa78872ae4ee0042c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_contacts_after_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a57c8d5de04fd74feef0699a82a72123f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_contacts_after_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a68a4a86a3ee1b873a53add96ead9c064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_collisions_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a6f84b8e24821763df3524fa551df0875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_collisions_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>abb0a79ae8a940e3138f9bbce2a508b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_collisions_after_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>ac82605212b9b9341bebc091bd24922d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_collisions_after_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a0b2e5163abce708367767793befab639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>constraints_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>adfd0f7b25b1e6041c0d0a9b808b3b205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>tasks_config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>abb1470d64de00e33e117399d032be2f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_posture_task_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>ae8e6561d454f213d28affc5c6df51238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a8ad9f237c2c99f289f10a883a00e4c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_solver::ConstraintSetPtr &gt;</type>
      <name>constraints_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a4989c66932df4eec55273c47f2f1e706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; mc_tasks::MetaTaskPtr, mc_rtc::Configuration &gt; &gt;</type>
      <name>tasks_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a511405fda381c0a02ed23cf0475b1128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_tasks::PostureTaskPtr &gt;</type>
      <name>postures_</name>
      <anchorfile>structmc__control_1_1fsm_1_1State.html</anchorfile>
      <anchor>a03a05dd1fc9942911d73ea2cdb28478f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::StateBuilder</name>
    <filename>structmc__rtc_1_1gui_1_1StateBuilder.html</filename>
    <member kind="function">
      <type></type>
      <name>StateBuilder</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a3aa8133f132bbcedc5520b0b69ee7e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>aed8f9f487c0f4c2eb629bccfdf262bd0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, T element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>ab91c91de88282e9b1e43c4bcdd8ced0c</anchor>
      <arglist>(SourceT *source, const std::vector&lt; std::string &gt; &amp;category, T element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a34dca1ccbd1c170433f4265d4952d89c</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, T element, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a510b430a96f175e4bf69ce9787f048cb</anchor>
      <arglist>(SourceT *source, const std::vector&lt; std::string &gt; &amp;category, T element, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a46ae231a115404bd810b7d3c3477d048</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, ElementsStacking stacking, T element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a3ca6eb8eab44ca9889a0f3a4a5e2a7dd</anchor>
      <arglist>(SourceT *source, const std::vector&lt; std::string &gt; &amp;category, ElementsStacking stacking, T element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a78762a4504185f92715143948ddd37e5</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, ElementsStacking stacking, T element, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>aec5f7783c5a99f73ae1275f372cdfc6e</anchor>
      <arglist>(SourceT *source, const std::vector&lt; std::string &gt; &amp;category, ElementsStacking stacking, T element, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a24c22667330cfd452b165afeff3979d0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a6668b50fa6ceaf6beaa730f401ab553c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCategory</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a3c57321e693a7631a5f06800817bbe5d</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a1b626d1b71f63fe2741232e8e3881db8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeElements</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a0317b43c046301a1d5cbb5b272b7a3c7</anchor>
      <arglist>(void *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeElements</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a1d108b4d3259d72574aa1e95400e32ce</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, void *source, bool recurse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a284bf32be420948b57f1ab69f5fa4a62</anchor>
      <arglist>(const std::string &amp;name, plot::AxisConfiguration xConfig, plot::AxisConfiguration yLeftConfig, plot::AxisConfiguration yRightConfig, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a9d2f14dac31913f3f57809ec56512801</anchor>
      <arglist>(const std::string &amp;name, plot::AxisConfiguration xConfig, plot::AxisConfiguration yLeftConfig, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>aca332ace060011a3c0ebac4202fd2dd1</anchor>
      <arglist>(const std::string &amp;name, plot::AxisConfiguration xConfig, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a2ae3f8cb79109828cb658eade196835b</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a6416827891d83ecc4f45db66072c59a4</anchor>
      <arglist>(const std::string &amp;name, T abscissa, plot::AxisConfiguration yLeftConfig, plot::AxisConfiguration yRightConfig, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>ad6961d06ac675bd1229a7ca91b8ae20e</anchor>
      <arglist>(const std::string &amp;name, T abscissa, plot::AxisConfiguration yLeftConfig, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a03129def93d1437c326595686cba93ef</anchor>
      <arglist>(const std::string &amp;name, T abscissa, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPlotData</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a9b0cc50c6146449aaa359f2f8a346b44</anchor>
      <arglist>(const std::string &amp;name, T data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePlot</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a8988ff74a597f9a7aa546524e6287e9c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>aa251549720e40fd68b267308e5fdc765</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a895a6c18a775e400171a1a01e3db55e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a42d3a738f1e4e019d740b8b6870d3a6c</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>data</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>ac8808344c0006e52d845f38ed202afd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a7e6582bb6ecddab6159fab5a71c95cfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int8_t</type>
      <name>PROTOCOL_VERSION</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StateBuilder.html</anchorfile>
      <anchor>a2b426f74f8ce2efd0a881684a8eaa52e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::StateFactory::StateConfiguration</name>
    <filename>structmc__control_1_1fsm_1_1StateFactory_1_1StateConfiguration.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>base</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory_1_1StateConfiguration.html</anchorfile>
      <anchor>a879847502b21f11a0827f06e90776ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>arg</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory_1_1StateConfiguration.html</anchorfile>
      <anchor>ab5bac5f10b2f603cb0354d0fcaef22c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::Configuration</type>
      <name>config</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory_1_1StateConfiguration.html</anchorfile>
      <anchor>a7abaa51726b1ebe2a43e495e98efb7ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::StateFactory</name>
    <filename>structmc__control_1_1fsm_1_1StateFactory.html</filename>
    <base>ObjectLoader&lt; State &gt;</base>
    <class kind="struct">mc_control::fsm::StateFactory::StateConfiguration</class>
    <member kind="function">
      <type></type>
      <name>StateFactory</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a8617d64660e701cd57508cff626c673b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, const std::vector&lt; std::string &gt; &amp;files, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a0825995ae6cfda039a931a8c17681931</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_files</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a8218cc8f646019ae30eb81aecd9344f7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>af1f40204d80bc5ec43239f56d8d7c88d</anchor>
      <arglist>(const std::map&lt; std::string, mc_rtc::Configuration &gt; &amp;states)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>ad5370f6e17ce0cfc1c99702b410ca99e</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;base, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr</type>
      <name>create</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a482d7fc90e58abcb0ab8390e54be3ed8</anchor>
      <arglist>(const std::string &amp;state, Controller &amp;ctl, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr</type>
      <name>create</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>abd6942d6b9061d9c1c7de1b6a7ff33d2</anchor>
      <arglist>(const std::string &amp;state, Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr</type>
      <name>create</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>aeaf208a61f76ffd7aa7ea2023734326b</anchor>
      <arglist>(const std::string &amp;state, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr</type>
      <name>create</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a40cbcb48b1c4a3efd06b51cb12a5c363</anchor>
      <arglist>(const std::string &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasState</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a1302d798bbbbe79d0d5c9df9a1cdc506</anchor>
      <arglist>(const std::string &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>states</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a5f07722fb8e17b4711973ff782face63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_with_loader</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a22fb3a0cea2bbb2e18ca6e4bed3f18b0</anchor>
      <arglist>(const std::string &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_object</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a51a55b568355289e40c8a77222f533f3</anchor>
      <arglist>(const std::string &amp;name, std::function&lt; RetT *(const Args &amp;...)&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>const StateConfiguration &amp;</type>
      <name>configuration</name>
      <anchorfile>structmc__control_1_1fsm_1_1StateFactory.html</anchorfile>
      <anchor>a9fb2412a3db4e1dd2e333864bcfc73bc</anchor>
      <arglist>(const std::string &amp;state) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::StaticTableImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1StaticTableImpl.html</filename>
    <templarg>GetData</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>StaticTableImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1StaticTableImpl.html</anchorfile>
      <anchor>a53e7fd555139aa959ce1b1888cdea868</anchor>
      <arglist>(const std::string &amp;name, std::vector&lt; std::string &gt; header, std::vector&lt; std::string &gt; format, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1StaticTableImpl.html</anchorfile>
      <anchor>aa1637233b6dfef48f4df4d34280865f8</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1StaticTableImpl.html</anchorfile>
      <anchor>a4c18cb0b2d452e4578ae4ee8150171db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1StaticTableImpl.html</anchorfile>
      <anchor>a85d2e883cbe84a8eb19f9ff1099bcc84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::StationaryOffset</name>
    <filename>structmc__filter_1_1StationaryOffset.html</filename>
    <templarg>VectorT</templarg>
    <member kind="function">
      <type></type>
      <name>StationaryOffset</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>aa24fa819655846548ac382ba218e051b</anchor>
      <arglist>(double dt, double timeConstant, const VectorT &amp;initValue=VectorT::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>ac9dfa7c0425d04a71c179ee05f477d0a</anchor>
      <arglist>(const VectorT &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const VectorT &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>a5db8a63c61b7305d04f3fcd20793ba79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>aa529e044d21dfc42d5a5e6ff8938a7c6</anchor>
      <arglist>(const VectorT &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>ac19e584e7e9172a67709b2187f533069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>a19bbac77cc974f0b7463e493965d5999</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>afd7e9222057cfac1eb12fa155e4c97d8</anchor>
      <arglist>(double limit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StationaryOffset&lt; Eigen::Vector3d &gt;</name>
    <filename>structmc__filter_1_1StationaryOffset.html</filename>
    <member kind="function">
      <type></type>
      <name>StationaryOffset</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>aa24fa819655846548ac382ba218e051b</anchor>
      <arglist>(double dt, double timeConstant, const Eigen::Vector3d &amp;initValue=Eigen::Vector3d ::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>ac9dfa7c0425d04a71c179ee05f477d0a</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>a5db8a63c61b7305d04f3fcd20793ba79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>aa529e044d21dfc42d5a5e6ff8938a7c6</anchor>
      <arglist>(const Eigen::Vector3d &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>ac19e584e7e9172a67709b2187f533069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>a19bbac77cc974f0b7463e493965d5999</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>structmc__filter_1_1StationaryOffset.html</anchorfile>
      <anchor>afd7e9222057cfac1eb12fa155e4c97d8</anchor>
      <arglist>(double limit)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::StringInputImpl</name>
    <filename>structmc__rtc_1_1gui_1_1StringInputImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>StringInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StringInputImpl.html</anchorfile>
      <anchor>a7bb61ec13b057633c8fde818c5013a52</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringInputImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StringInputImpl.html</anchorfile>
      <anchor>a350ed0e71968dfab7a2abe8ff9429b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1StringInputImpl.html</anchorfile>
      <anchor>a252d8382e7f5b9df9d46d805f8265fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Surface</name>
    <filename>structmc__rbdyn_1_1Surface.html</filename>
    <member kind="function">
      <type></type>
      <name>Surface</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a8c4fe07a3ad4392974c63722916b28db</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Surface</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a3f8d3cd62afe2e13709b86f5b027a699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>aca2614ce25d784597de6ef3e53f68c96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a4fc1541848283d5095e25bbbd044020a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>bodyName</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a9dbcfd0f33b37801a81c2229a84466e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>materialName</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a6a83f90ee05eb45299d239c701a40f99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>points</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a9ba0501f73d2f4907de1bbffc0933bc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bodyIndex</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a1ac46d99ec12cfb01e58745b5a364588</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a66394541590f20a259e662ee995833b4</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>af30be45b61b6a2d617ff2e18bb2f4903</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const rbd::MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_s</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a608e48ae09decafa9c66caf47368a800</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_s</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a2ce6f078f8d8822cc9f5fa230ad4edee</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computePoints</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a33acf44c62df472853a89de4d24b8c93</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toStr</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>adc29cfce0c121597c6805119fd4419b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a7c7f119cc271f7ff2c076a31cbe9b4df</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>type</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>ad9239b4ea2aad13c55bd6ba6698826ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>ac98cc668051445fd3b94aaac36c4db58</anchor>
      <arglist>(const Surface &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>a80309f23f677b1441f6e8c922b67fe8f</anchor>
      <arglist>(const Surface &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>points</name>
      <anchorfile>structmc__rbdyn_1_1Surface.html</anchorfile>
      <anchor>ad714df25bed40fed15f512f0a09db694</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::TableImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1TableImpl.html</filename>
    <templarg>GetHeader</templarg>
    <templarg>GetData</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>TableImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1TableImpl.html</anchorfile>
      <anchor>a89c897966d440e80a2c13884f51fa69d</anchor>
      <arglist>(const std::string &amp;name, GetHeader get_header_fn, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1TableImpl.html</anchorfile>
      <anchor>a8920ca35975825d364222609aadd5019</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1TableImpl.html</anchorfile>
      <anchor>abb8c823897c6460bfa03a98de022c4e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1TableImpl.html</anchorfile>
      <anchor>a1b7522c84b927c1d76878eea1076592f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MetaTasksState::TaskCriteria</name>
    <filename>structmc__control_1_1fsm_1_1MetaTasksState_1_1TaskCriteria.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>idx</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState_1_1TaskCriteria.html</anchorfile>
      <anchor>a15631f7cb4afab3665d62197f9b0aa67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_control::CompletionCriteria</type>
      <name>criteria</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState_1_1TaskCriteria.html</anchorfile>
      <anchor>aa1d90135dc97508bf146a086b7b8305e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_output</name>
      <anchorfile>structmc__control_1_1fsm_1_1MetaTasksState_1_1TaskCriteria.html</anchorfile>
      <anchor>abc76ec57de7ebd6ad839c05d4d391cde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::TasksController</name>
    <filename>structmc__control_1_1fsm_1_1TasksController.html</filename>
    <base>BackendSpecificController&lt; MCController::Backend::Tasks, mc_solver::TasksQPSolver &gt;</base>
  </compound>
  <compound kind="struct">
    <name>mc_control::TasksController</name>
    <filename>structmc__control_1_1TasksController.html</filename>
    <base>mc_control::details::BackendSpecificController</base>
  </compound>
  <compound kind="struct">
    <name>mc_solver::TasksQPSolver</name>
    <filename>structmc__solver_1_1TasksQPSolver.html</filename>
    <base>mc_solver::QPSolver</base>
    <member kind="function">
      <type></type>
      <name>TasksQPSolver</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a7b965ed4c8b2ebb40b2e3b7f627fd0bb</anchor>
      <arglist>(mc_rbdyn::RobotsPtr robots, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TasksQPSolver</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>afd99824587bfcb6f81227032da44de8d</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TasksQPSolver</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a3febf55306d3265969ed2a8fc3520fd4</anchor>
      <arglist>() final=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a8defbb56e09c911ce2fa1bf7c7f6e16d</anchor>
      <arglist>(tasks::qp::Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a8986c60afb661c3db30651498f2900d2</anchor>
      <arglist>(std::shared_ptr&lt; tasks::qp::Task &gt; task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>aadb0f869617aeb4f193181944354ad52</anchor>
      <arglist>(tasks::qp::Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>af2b544574a42c1a063f7c762af4686c2</anchor>
      <arglist>(ControllerToken, const std::vector&lt; mc_rbdyn::Contact &gt; &amp;contacts) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>abf0c0bd4c2db5f3e0beb5fd9972de8c2</anchor>
      <arglist>(tasks::qp::ConstraintFunction&lt; Fun... &gt; *constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraint</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>aad7357de6b6d22e5784897ecd832ffd0</anchor>
      <arglist>(tasks::qp::ConstraintFunction&lt; Fun... &gt; *constraint)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; int, const tasks::qp::BilateralContact &amp; &gt;</type>
      <name>contactById</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a77e73f8c3c8f664478855ae3d76cb0c8</anchor>
      <arglist>(const tasks::qp::ContactId &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>lambdaVec</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>acdd9f18320b9590e5e53c8c892e3262b</anchor>
      <arglist>(int cIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd</type>
      <name>desiredContactForce</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a4d2fa167f45d6bc49594643bddc48aba</anchor>
      <arglist>(const mc_rbdyn::Contact &amp;id) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a58443a2b16c89ff6ee257e368a893aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a85e9d39703003fa2862bde2b79eff333</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateConstrSize</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>ac79c5dba70d636cdc378224c343b2d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tasks::qp::SolverData &amp;</type>
      <name>data</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a64fe2e049cbd3d7ebaf8258f27e83620</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tasks::qp::SolverData &amp;</type>
      <name>data</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>aa4c27f04da86b93b05a85dc596539472</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>tasks::qp::QPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a02c2f1d3959dd68e6d9042eb00cd0428</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tasks::qp::QPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a2c8d95010f7879241036661e0ddf09c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solveTime</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a6ccfd376fb7e4bcd5bcfa85fc4bd0369</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solveAndBuildTime</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a5b621d10a942844b56b7e63511bf7f56</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>ac12386fea0aac778e62bf8bd7ff8c52f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TasksQPSolver &amp;</type>
      <name>from_solver</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>ab5ffc7bce83403e099beaa7f21c8b0b7</anchor>
      <arglist>(QPSolver &amp;solver) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TasksQPSolver &amp;</type>
      <name>from_solver</name>
      <anchorfile>structmc__solver_1_1TasksQPSolver.html</anchorfile>
      <anchor>a22fc891d36a56b4c2ecfc3d14fa86fcd</anchor>
      <arglist>(const QPSolver &amp;solver) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::TrajectoryImpl</name>
    <filename>structmc__rtc_1_1gui_1_1TrajectoryImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>TrajectoryImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TrajectoryImpl.html</anchorfile>
      <anchor>aa5739c5b73ee002d3bd0857c1daf5695</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TrajectoryImpl.html</anchorfile>
      <anchor>ad07155be02930a5f4ca5ad25527f5180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TrajectoryImpl.html</anchorfile>
      <anchor>ab4ad9750f804e593ee1fcc52e35ff0e1</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TrajectoryImpl.html</anchorfile>
      <anchor>addbe3e273eb652e9b31e8fb2d15d0738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TrajectoryImpl.html</anchorfile>
      <anchor>ad6c1b7129408a35fa938b3a4e594e669</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::TrajectoryTaskGeneric</name>
    <filename>structmc__tasks_1_1TrajectoryTaskGeneric.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric</type>
      <name>TrajectoryBase</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>afcf5b9d58fb4102e5e5ef4deb6b91443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ac1fadcc861bb5b1bbf050146a135f6fb</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>aae10e5f031e8c9074e7a411f4694845c</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ace3e9ff562d04c476047aa635f2be052</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a60edffcfcd7fea85a7632184621eebcf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a900163d8f5477a2866d5661868ee1635</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a9de2471f6262ae554e71df517d8f19ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a7c566eaeab9b359df65abcf52005bbce</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a5f788408068897c33c6096c643252413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>aaec71d54b94af7e896d496d95e066387</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a826f8d9d901780584b43dfef92ccea75</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a0ccc1e5129d5d2fde32faf623099dfb8</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ab88b0c0018cb9c5651d763629198a330</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>acbd02ef88c59d27db19186f4eb9208fd</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>afe086f1f8b3996726aaa02367142fe51</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a4a6908db392416efb30c7926dca9ff6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a090ed0aec58f3365a03345b6ec2fca92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ab9c82b7e6f3e983af6608280e30004bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a3876234c31a123a2d12830ca8686b08c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a9023c41c17f12bf40543375174105940</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a99c44ce3bffb120065a472c8c37b4002</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a3de445ac2f54eccea632360d9ab74920</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a0fb783d5cbf1ca28eece422dd72496fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectActiveJoints</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a5dc719709bca5d65d1ad571190f9bee0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectActiveJoints</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a08cdcec63eee020721bad8ce2ddb7d11</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ad0d2c284eb90a96a10e6e532242512ac</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>aa99043d93deaaf6c695e106c840df7ef</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>abde6c831eab691e6c7662bd0b1ae7329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetJointsSelector</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a4166c0c288bbca68e04eb8485ccf849b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a95b6983273eee10e298b6776a2e4393d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a7326b703230a47c253e4a88202d14906</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ad7934da95aafbb164740323dad4c90ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a2ce1c710fe9e9383a6a8d1a7fd289d98</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a7b2596e9cfd1aba5fd0490484df228ec</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a86b2a1916777f82da14c037b187f81d2</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a3b0cd423e4e4f1ff855a85f018e22731</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ac936767bb83cb8e51d3bdaaf7a452a2a</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a33227c0add1f0a91e46706ceeffae11c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>aae4e14953cc1100c73ffe3a3146e9f3d</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a984a50ee1c6af634f7a9441f833fec57</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>aa2fde6bc5d7444ed24e634b73cc96294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a070f6317ac51d10d4bc2a405ced14a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::void_ptr</type>
      <name>errorT</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>aa44dba54b020c84ced2e6a47af15d0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ad4f104f2a346ce4663fcf34d5e9d3d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a5763d29873783be8fe95e04190ad83d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ac9d9498669ca0e1a82b0d307105a5e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::void_ptr</type>
      <name>trajectoryT_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a253689875a07bcded0eef4c12150104a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>stiffness_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ae3ee0f8359302d8ba71d77cc81394cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>damping_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>a6cd4b961f233e6c2fc3b70d0f3e6c70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>weight_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>aee3d0c1ae39e5ec71c410017d0b3ecec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::void_ptr</type>
      <name>selectorT_</name>
      <anchorfile>structmc__tasks_1_1TrajectoryTaskGeneric.html</anchorfile>
      <anchor>ac1e629f49bb9c961a4f44c66b4b23d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_tvm::TransformFunction</name>
    <filename>classmc__tvm_1_1TransformFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>TransformFunction</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a1bda2fd949f2bb3ed9c7b3d1de0aca85</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>ab48e3af3a67ed5b35f6d223e2feb29dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>pose</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>ab7c659e562a4085f952e4316eafc36b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pose</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a918bb2fbd2fe01e17b684f79686ae84e</anchor>
      <arglist>(const sva::PTransformd &amp;pose) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a45d5a3020c0ee3f3765cf48f6cceda4b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a3103989670bc9e45faaeca1d04eaddd3</anchor>
      <arglist>(const Eigen::Vector6d &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector6d &amp;</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>ac03b8877d976d6f79788297ad0248084</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a7096bdd9e6928df417844b69095f03b9</anchor>
      <arglist>(const Eigen::Vector6d &amp;refAccel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a034dce2565dbecef8380c171c655e71b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a51c8ce5753f01a0e9c5d5ba5d1988518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a04d68ff68f0910e7e664b2feb4d2ea5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a227e3b6090271c9ded8b82dfdf9f6562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>aa21b976629a6a17090393f791390f0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>ac572236132cc5dd92c16a1632f103093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::RobotFrame &amp;</type>
      <name>tvm_frame_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a46dd9d8ec51f68668814db8b69754c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Jacobian</type>
      <name>frameJac_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a57255fad5cd5e8e5e43e33a91f215333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>shortJacMat_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a8683e370a63deb781efef9504846efce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>jacMat_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a6970a68a2864c755579671037ada33ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>err_p_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a7f77123c815951bf1222f273b703118d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>w_p_p_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a4fdc0a87fbe5ceddb85917782e5efffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>V_err_p_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a60e9a17f5d443750f421616e04942fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>pose_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a2efe1289c0e2cbb6ad817bc863fd21c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector6d</type>
      <name>refVel_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a00c67aa50563318b394c6d8186eaa666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector6d</type>
      <name>refAccel_</name>
      <anchorfile>classmc__tvm_1_1TransformFunction.html</anchorfile>
      <anchor>a8bb2d1a912248897bc50634a5608ff6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::TransformImpl</name>
    <filename>structmc__rtc_1_1gui_1_1TransformImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>TransformImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformImpl.html</anchorfile>
      <anchor>a1483ccb550b761697c786f561b11e970</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformImpl.html</anchorfile>
      <anchor>aec9c9d90b11609bfa840aa7c3fd1a19c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformImpl.html</anchorfile>
      <anchor>acaf2d26843df186ed2ca354b90586163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformImpl.html</anchorfile>
      <anchor>a7f8b306036dedba08cb160068ea9b759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformImpl.html</anchorfile>
      <anchor>aeb03ff7486f988cc5a2f0ef8d96e793b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::TransformROImpl</name>
    <filename>structmc__rtc_1_1gui_1_1TransformROImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>TransformROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformROImpl.html</anchorfile>
      <anchor>ad88471593f6707749be38dc161ba68d3</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformROImpl.html</anchorfile>
      <anchor>a1fd1a86ab5dcbdae0718bf032aba51d3</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformROImpl.html</anchorfile>
      <anchor>addc021aab7f8a9deb4df511d332797df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformROImpl.html</anchorfile>
      <anchor>aa2d9aff3c8adfcf000c577c9e15df210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1TransformROImpl.html</anchorfile>
      <anchor>acc345b440558ab6f45437f2db8b23e53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::TransformTask</name>
    <filename>structmc__tasks_1_1TransformTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>TransformTask</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>af76f18eb60ebc27c1e8b7612535aecc9</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, double stiffness=2.0, double weight=500.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformTask</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a9d566e2a0f59e9b4ed91c9a5849e31af</anchor>
      <arglist>(const std::string &amp;surfaceName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a982e5360a5e5b068b6f4bf6180bce3ee</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>ae8f62ed47730c972c5bab0d287bef086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>ad23f8cbe9682a6fdc48fb1f98aa6fa94</anchor>
      <arglist>(const sva::PTransformd &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetSurface</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a49d3421e1859d9b36e4bc64ca6c29490</anchor>
      <arglist>(unsigned int robotIndex, const std::string &amp;surfaceName, const sva::PTransformd &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a50134b1f1bbb68f93e3b1235da3f15bd</anchor>
      <arglist>(const mc_rbdyn::Frame &amp;frame, const sva::PTransformd &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>surface</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>ab059f811cfba21cdc35c8109c1ffa05a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>aed8a30b4cb0b2efefdfcfb7c5c88e1c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>surfacePose</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a91855af37722789f0d3a33b884db17ca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a02daab9367d54190e6a5151d194504b2</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>ac5022750a20f51ed0943833faa9b29ed</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a910e8284e4e8d29f5099f2a4105e1ac4</anchor>
      <arglist>(const sva::MotionVecd &amp;stiffness, const sva::MotionVecd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>aed51021240e5eda4c056af715968efb3</anchor>
      <arglist>(const sva::MotionVecd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>mvStiffness</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>af7521819d429bcd89c4e22af6c482479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>ade15f0fe552c48b84e75d8f3fd408d40</anchor>
      <arglist>(const sva::MotionVecd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>mvDamping</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>af4eaed1d9f5b6eefc1da74cd7a76d562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVelB</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>aefda5e3d07a3c146371b74cfe0f58326</anchor>
      <arglist>(const sva::MotionVecd &amp;velB)</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>refVelB</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a23ad3f774d74e81633461ffe28c9335f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a144e87a49044adc220d50cba33a84c47</anchor>
      <arglist>(const sva::MotionVecd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a609b6aade63c3e65c3dfca82c7bcced4</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>abc682d060a6d0815896f02614c0f1014</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tasks_1_1TransformTask.html</anchorfile>
      <anchor>a078d35f229cfe10dfa0e4672cb3304d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::Transition</name>
    <filename>structmc__control_1_1fsm_1_1Transition.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>structmc__control_1_1fsm_1_1Transition.html</anchorfile>
      <anchor>ad0d49171493519fb008c73e58696edc1</anchor>
      <arglist></arglist>
      <enumvalue file="structmc__control_1_1fsm_1_1Transition.html" anchor="ad0d49171493519fb008c73e58696edc1a68d8c641ebe12c46d077d8ff720c3bbd">StepByStep</enumvalue>
      <enumvalue file="structmc__control_1_1fsm_1_1Transition.html" anchor="ad0d49171493519fb008c73e58696edc1a06b9281e396db002010bde1de57262eb">Auto</enumvalue>
      <enumvalue file="structmc__control_1_1fsm_1_1Transition.html" anchor="ad0d49171493519fb008c73e58696edc1a2e979835dd62324f5bfe217449ba4974">Strict</enumvalue>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>state</name>
      <anchorfile>structmc__control_1_1fsm_1_1Transition.html</anchorfile>
      <anchor>a9fc7e260a07a8da86ee5724d47f9664a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>type</name>
      <anchorfile>structmc__control_1_1fsm_1_1Transition.html</anchorfile>
      <anchor>aeb7c3f9f5d60af38b50cbd0caa1b2b65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::TransitionMap</name>
    <filename>structmc__control_1_1fsm_1_1TransitionMap.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>origin_t</name>
      <anchorfile>structmc__control_1_1fsm_1_1TransitionMap.html</anchorfile>
      <anchor>ae92ec157ad130676dc1caff84eebae94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, Transition &gt;</type>
      <name>transition</name>
      <anchorfile>structmc__control_1_1fsm_1_1TransitionMap.html</anchorfile>
      <anchor>ae22a9f786f98b01fe50849d23d690c93</anchor>
      <arglist>(const std::string &amp;state, const std::string &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_set&lt; std::string &gt;</type>
      <name>transitions</name>
      <anchorfile>structmc__control_1_1fsm_1_1TransitionMap.html</anchorfile>
      <anchor>a604c23080c7e278d843ec3d0452ee599</anchor>
      <arglist>(const std::string &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__control_1_1fsm_1_1TransitionMap.html</anchorfile>
      <anchor>a961cc6df4c21830bb75f60de6f5904d2</anchor>
      <arglist>(const StateFactory &amp;factory, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>initState</name>
      <anchorfile>structmc__control_1_1fsm_1_1TransitionMap.html</anchorfile>
      <anchor>a85cfacc20b7ca6c22181193031a0f922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>structmc__control_1_1fsm_1_1TransitionMap.html</anchorfile>
      <anchor>a0e247cf49772c5bade453bd823a75923</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::TVMController</name>
    <filename>structmc__control_1_1fsm_1_1TVMController.html</filename>
    <base>mc_control::fsm::details::BackendSpecificController</base>
  </compound>
  <compound kind="struct">
    <name>mc_control::TVMController</name>
    <filename>structmc__control_1_1TVMController.html</filename>
    <base>BackendSpecificController&lt; MCController::Backend::TVM, mc_solver::TVMQPSolver &gt;</base>
  </compound>
  <compound kind="struct">
    <name>mc_solver::TVMQPSolver</name>
    <filename>structmc__solver_1_1TVMQPSolver.html</filename>
    <base>mc_solver::QPSolver</base>
    <member kind="function">
      <type></type>
      <name>TVMQPSolver</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>ab23d31e556090bfcea3fb927c50c73e0</anchor>
      <arglist>(mc_rbdyn::RobotsPtr robots, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVMQPSolver</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>a3eb54ca2f2c0a873eeb8bd3ab82b4fdd</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TVMQPSolver</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>aa3ccaba4757e26b8bd4b2767323ee8ec</anchor>
      <arglist>() final=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>ac8cb70948b99762572221fe87d3ac243</anchor>
      <arglist>(ControllerToken, const std::vector&lt; mc_rbdyn::Contact &gt; &amp;contacts) final</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd</type>
      <name>desiredContactForce</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>ab34dfd037cceedc1bbec2236181e48fa</anchor>
      <arglist>(const mc_rbdyn::Contact &amp;id) const final</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solveTime</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>ac04df7dc7cec25e02f3bb0e6e21b8832</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solveAndBuildTime</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>ab8391ed460f7ef2471353e98ec7cb853</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>tvm::LinearizedControlProblem &amp;</type>
      <name>problem</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>ad8af1050b48036aa9983fc849457eaa8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const tvm::LinearizedControlProblem &amp;</type>
      <name>problem</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>a8e657754f2adc4ccb7e2f428efdbed43</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TVMQPSolver &amp;</type>
      <name>from_solver</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>aac77f0d879116c5805ee32284cb10d56</anchor>
      <arglist>(QPSolver &amp;solver) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TVMQPSolver &amp;</type>
      <name>from_solver</name>
      <anchorfile>structmc__solver_1_1TVMQPSolver.html</anchorfile>
      <anchor>aa7287bcbf388e207dab254456e9a1a29</anchor>
      <arglist>(const QPSolver &amp;solver) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::details::TVMTrajectoryTaskGeneric</name>
    <filename>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</filename>
    <member kind="typedef">
      <type>void(*)(void *, const Eigen::VectorXd &amp;)</type>
      <name>set_ref_vel_t</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>a3be6c87478fbc896cc12f056fdb4101e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(void *, const Eigen::VectorXd &amp;)</type>
      <name>set_ref_accel_t</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>a73ee1f6e3f1e8f4aa472964d15c68a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>afc77fd9f5ac84a9a9024994b101da0c8</anchor>
      <arglist>(ErrorT *error)</arglist>
    </member>
    <member kind="variable">
      <type>tvm::TaskWithRequirementsPtr</type>
      <name>task_</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>a9711a6e882d22bdca82a6a858539ffeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dynamicIsPD_</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>aea29b650bf510a48543c2c44cfcf7746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>dimWeight_</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>a0499745e42b86f92a2142130b73d1f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set_ref_vel_t</type>
      <name>setRefVel</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>a118ddccef4122355946277ea19db6cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set_ref_accel_t</type>
      <name>setRefAccel</name>
      <anchorfile>structmc__tasks_1_1details_1_1TVMTrajectoryTaskGeneric.html</anchorfile>
      <anchor>a048faf8441384bc7f98b99a2e8e6dffb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::unique_ptr</name>
    <filename>classmc__rtc_1_1unique__ptr.html</filename>
    <templarg>T</templarg>
    <templarg>Deleter</templarg>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__rtc_1_1unique__ptr.html</anchorfile>
      <anchor>a0d4a44133fd8982ced564945c180879b</anchor>
      <arglist>(typename std::unique_ptr&lt; T, Deleter &gt;::pointer ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>unique_ptr&lt; mc_solver::CollisionsConstraint &gt;</name>
    <filename>classmc__rtc_1_1unique__ptr.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__rtc_1_1unique__ptr.html</anchorfile>
      <anchor>a0d4a44133fd8982ced564945c180879b</anchor>
      <arglist>(typename std::unique_ptr&lt; mc_solver::CollisionsConstraint, std::default_delete&lt; mc_solver::CollisionsConstraint &gt; &gt;::pointer ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>unique_ptr&lt; mc_solver::CompoundJointConstraint &gt;</name>
    <filename>classmc__rtc_1_1unique__ptr.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__rtc_1_1unique__ptr.html</anchorfile>
      <anchor>a0d4a44133fd8982ced564945c180879b</anchor>
      <arglist>(typename std::unique_ptr&lt; mc_solver::CompoundJointConstraint, std::default_delete&lt; mc_solver::CompoundJointConstraint &gt; &gt;::pointer ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>unique_ptr&lt; mc_solver::ContactConstraint &gt;</name>
    <filename>classmc__rtc_1_1unique__ptr.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__rtc_1_1unique__ptr.html</anchorfile>
      <anchor>a0d4a44133fd8982ced564945c180879b</anchor>
      <arglist>(typename std::unique_ptr&lt; mc_solver::ContactConstraint, std::default_delete&lt; mc_solver::ContactConstraint &gt; &gt;::pointer ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>unique_ptr&lt; mc_solver::DynamicsConstraint &gt;</name>
    <filename>classmc__rtc_1_1unique__ptr.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__rtc_1_1unique__ptr.html</anchorfile>
      <anchor>a0d4a44133fd8982ced564945c180879b</anchor>
      <arglist>(typename std::unique_ptr&lt; mc_solver::DynamicsConstraint, std::default_delete&lt; mc_solver::DynamicsConstraint &gt; &gt;::pointer ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>unique_ptr&lt; mc_solver::KinematicsConstraint &gt;</name>
    <filename>classmc__rtc_1_1unique__ptr.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__rtc_1_1unique__ptr.html</anchorfile>
      <anchor>a0d4a44133fd8982ced564945c180879b</anchor>
      <arglist>(typename std::unique_ptr&lt; mc_solver::KinematicsConstraint, std::default_delete&lt; mc_solver::KinematicsConstraint &gt; &gt;::pointer ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::Update</name>
    <filename>structmc__solver_1_1utils_1_1Update.html</filename>
    <templarg>UpdateNrVars</templarg>
    <base>mc_solver::utils::UpdateTag</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>ad172325243564a16279d9392bd86efa5</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>a806d3dc017b28e570dfa268a32a55600</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>ab8ad71dd3414ee8bccc766c7bc8b4dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>a8f658eb01d91768ab6a4e9b095a894de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>A</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>adcc1dc8dc0563b2e14f962f26afbfa5f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateImpl</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>ab889dcd5361a420fe976146c40f56533</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;, const tasks::qp::SolverData &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>AFull_</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>a6ba3138c342b7e4efa2328ac11930706</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Update&lt; UpdateNrVarsLambda &gt;</name>
    <filename>structmc__solver_1_1utils_1_1Update.html</filename>
    <base>mc_solver::utils::UpdateNrVarsLambda</base>
    <base>mc_solver::utils::UpdateTag</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>ad172325243564a16279d9392bd86efa5</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>a806d3dc017b28e570dfa268a32a55600</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Update</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>ab8ad71dd3414ee8bccc766c7bc8b4dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>a8f658eb01d91768ab6a4e9b095a894de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>A</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>adcc1dc8dc0563b2e14f962f26afbfa5f</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateImpl</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>ab889dcd5361a420fe976146c40f56533</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;, const tasks::qp::SolverData &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>AFull_</name>
      <anchorfile>structmc__solver_1_1utils_1_1Update.html</anchorfile>
      <anchor>a6ba3138c342b7e4efa2328ac11930706</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateForce</name>
    <filename>structmc__solver_1_1utils_1_1UpdateForce.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>UpdateForce</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateForce.html</anchorfile>
      <anchor>ac7cfe8520ea50dc9cbf285f433769d11</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateImpl</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateForce.html</anchorfile>
      <anchor>a147dd26742af4a2879ffdead8b3ab93d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;, const tasks::qp::SolverData &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateNrVarsData</name>
    <filename>structmc__solver_1_1utils_1_1UpdateNrVarsData.html</filename>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrVars_</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsData.html</anchorfile>
      <anchor>a3c4a15ad329aedecdfd932aaffe4ff76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ABegin_</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsData.html</anchorfile>
      <anchor>ac7940f913dbc5037ed042609f685bfaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateNrVarsLambda</name>
    <filename>structmc__solver_1_1utils_1_1UpdateNrVarsLambda.html</filename>
    <base>mc_solver::utils::UpdateNrVarsData</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>UpdateNrVarsLambda</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsLambda.html</anchorfile>
      <anchor>a9d6f46e4b6e93b51903495758aecd406</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVarsImpl</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsLambda.html</anchorfile>
      <anchor>a3c7ce960742e1844186550b503af6207</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tasks::qp::ContactId</type>
      <name>cid_</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsLambda.html</anchorfile>
      <anchor>a855dd9e41399b5a6271e9b4e02576b23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateNrVarsRobot</name>
    <filename>structmc__solver_1_1utils_1_1UpdateNrVarsRobot.html</filename>
    <base>mc_solver::utils::UpdateNrVarsData</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>UpdateNrVarsRobot</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsRobot.html</anchorfile>
      <anchor>a31e4270c070674e663da7513abcec55d</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVarsImpl</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsRobot.html</anchorfile>
      <anchor>a7039825cc623155d75ab86f48a33e48e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex_</name>
      <anchorfile>structmc__solver_1_1utils_1_1UpdateNrVarsRobot.html</anchorfile>
      <anchor>a55f510b20375d30a9f432a1d4f5a773d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateTag</name>
    <filename>structmc__solver_1_1utils_1_1UpdateTag.html</filename>
  </compound>
  <compound kind="class">
    <name>mc_tvm::VectorOrientationFunction</name>
    <filename>classmc__tvm_1_1VectorOrientationFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorOrientationFunction</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>aa9d8e9a70e8ee46576da263784812a86</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const Eigen::Vector3d &amp;frameVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>ae89b0d1262e817f3183ce9664d9801cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>target</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a6fd65d0107c33c2594639c758b117e8b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a6e37e44352605ca0238974c0daa25465</anchor>
      <arglist>(const Eigen::Vector3d &amp;target) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>frameVector</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a7a8743a5b7f9e6b86baa3a76fe1d984f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frameVector</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>ad66d842fd85d9a9c9b2c8b600178ddf9</anchor>
      <arglist>(const Eigen::Vector3d &amp;frameVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>aeee579e7115ace1f147192f42e170844</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>ad9efb02b909b29f7cf131623fdced574</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a61dbdd355a591c0953b05c304ce7d84e</anchor>
      <arglist>(const Eigen::Vector3d &amp;refVel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a3a9e7a98d44a5178c190615916bfc839</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>acfbe4473cfb5e2e9526e36fe51adf2d5</anchor>
      <arglist>(const Eigen::Vector3d &amp;refAccel) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::RobotFrame &amp;</type>
      <name>frame</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a96153df54fbfcf1f1b699d821118d4ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a68692c20ff161269d9aac5920bb00bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a5e05e4ad3580f2ff302079272f84c6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a12ee5055b727e351850e7e4834e48c92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>ad946978d158a134ff404f2a18c3f3857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a3e35904bcc0ee980ffadf09bbefe1dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_tvm::RobotFrame &amp;</type>
      <name>body_frame_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a4f42d318c27df526f7c344ede6b788d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>frameVectorIn_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a2b1d6430ad3aa676010a89185749dc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::Jacobian</type>
      <name>jac_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a38cdf7fa9a91f562aeba1a7397cf65a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>actualVector_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a2db911d57e2b5df3dac3be7c1ca50ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>bodyVector_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a12e9e89d65cc03db772ef3382162574a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>bodyVectorHat_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>abd0a93f0d2e87a1fbf5fd0bb751bd2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>fullJacobian_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>aa11414ccfbba3a752622ee6f2850fbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>E_0_b_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a581f3177e3ef7bb8b4c00046d51f4f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>w_b_b_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a79f482853adfcd08ef216df0c23479f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>target_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>a44fc39c9b2c49de34fc0ae3201778247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>refVel_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>ab5dc3853ef36a209adf9ed45f73a03e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>refAccel_</name>
      <anchorfile>classmc__tvm_1_1VectorOrientationFunction.html</anchorfile>
      <anchor>aa89d987a10c4fbcb3f418182930546e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::VectorOrientationTask</name>
    <filename>structmc__tasks_1_1VectorOrientationTask.html</filename>
    <base>mc_tasks::TrajectoryTaskGeneric</base>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a844eb2ce900d9f81a3fd7933c6309a27</anchor>
      <arglist>(const mc_rbdyn::RobotFrame &amp;frame, const Eigen::Vector3d &amp;frameVector, double stiffness=2.0, double weight=500.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ac24b6093fa849811dd07a0ab2ace17c0</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetVector, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a60f2e467ea49160a0037f8aa2470bdbc</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>abf5eb7b4f6111f5141f6113a6aa80146</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetVector</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a8a2c67e86c6867c837129bb81834ccf4</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>targetVector</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a938503644b594b9f094d81b8fe90de6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>actual</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>aed1bb258013490d1ad518f514b7e4b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>body</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a9531e6144e6dd8823951374d95397d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ab389c34fd3c93b00643143d92ef257f2</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>aef3c3a8b836ba15e7bd062d841399ad4</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>ae2ea06fdeee5903edcbfb8da2bd55af4</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::ConstRobotFramePtr</type>
      <name>frame_</name>
      <anchorfile>structmc__tasks_1_1VectorOrientationTask.html</anchorfile>
      <anchor>a2b6708cf35c5c4b542f042d9dd60e56a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::VisualImpl</name>
    <filename>structmc__rtc_1_1gui_1_1details_1_1VisualImpl.html</filename>
    <templarg>GetVisual</templarg>
    <templarg>GetPos</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>VisualImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1VisualImpl.html</anchorfile>
      <anchor>a2e58a2b352d14220d82b1e617355b5a5</anchor>
      <arglist>(const std::string &amp;name, GetVisual get_visual_fn, GetPos get_pos_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisualImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1VisualImpl.html</anchorfile>
      <anchor>a4511aa8b84c4255283b8b2307cc42039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1VisualImpl.html</anchorfile>
      <anchor>afab77b99157866bd7fe837f09b9e6121</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1VisualImpl.html</anchorfile>
      <anchor>a7a1971b740238bf99df3d15cea1bd2d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1details_1_1VisualImpl.html</anchorfile>
      <anchor>ae34b64c2aa4d202fa2ab2f698857ef2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::VisualMap</name>
    <filename>structmc__rbdyn_1_1VisualMap.html</filename>
    <member kind="function">
      <type></type>
      <name>VisualMap</name>
      <anchorfile>structmc__rbdyn_1_1VisualMap.html</anchorfile>
      <anchor>abd6e8a7131d62002125d9cdc291719bf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisualMap</name>
      <anchorfile>structmc__rbdyn_1_1VisualMap.html</anchorfile>
      <anchor>ac58a4bfb954bb2596131d9dcf1bd54ec</anchor>
      <arglist>(const VisualMap &amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type>VisualMap &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1VisualMap.html</anchorfile>
      <anchor>a7b4d1a9917b3bc796db270228d699411</anchor>
      <arglist>(const VisualMap &amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisualMap</name>
      <anchorfile>structmc__rbdyn_1_1VisualMap.html</anchorfile>
      <anchor>a9ce12bfdd7e0edfaa4afbcce9764279a</anchor>
      <arglist>(VisualMap &amp;&amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type>VisualMap &amp;</type>
      <name>operator=</name>
      <anchorfile>structmc__rbdyn_1_1VisualMap.html</anchorfile>
      <anchor>a12a6994b9750a77e0543846be016a263</anchor>
      <arglist>(VisualMap &amp;&amp;v)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::void_ptr_caster</name>
    <filename>structmc__rtc_1_1void__ptr__caster.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T *</type>
      <name>operator()</name>
      <anchorfile>structmc__rtc_1_1void__ptr__caster.html</anchorfile>
      <anchor>a1dbc6d3b7c5ffcc77281f0a8ee8605e0</anchor>
      <arglist>(void_ptr &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator()</name>
      <anchorfile>structmc__rtc_1_1void__ptr__caster.html</anchorfile>
      <anchor>a80788b48e42b808f8200dd57eb871480</anchor>
      <arglist>(const void_ptr &amp;ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::VoidCallbackElement</name>
    <filename>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</filename>
    <templarg>ElementT</templarg>
    <templarg>Callback</templarg>
    <base>mc_rtc::gui::CallbackElement</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>ab8cda0e74e03f5e56ae5bd42bb7b9b41</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>a9d063c0de86c3ba0f038908d146ca298</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>a350d19023027682fb550a84099cd96da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoidCallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</filename>
    <base>CallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>ab8cda0e74e03f5e56ae5bd42bb7b9b41</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>a9d063c0de86c3ba0f038908d146ca298</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>a350d19023027682fb550a84099cd96da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoidCallbackElement&lt; Element, Callback &gt;</name>
    <filename>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</filename>
    <base>CallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>ab8cda0e74e03f5e56ae5bd42bb7b9b41</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>a9d063c0de86c3ba0f038908d146ca298</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>structmc__rtc_1_1gui_1_1VoidCallbackElement.html</anchorfile>
      <anchor>a350d19023027682fb550a84099cd96da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::XYThetaImpl</name>
    <filename>structmc__rtc_1_1gui_1_1XYThetaImpl.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>XYThetaImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaImpl.html</anchorfile>
      <anchor>a6de2e9a332b75b696ddbd1167dc31d1b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaImpl.html</anchorfile>
      <anchor>a247757b0f4f2f7537cd966304f6395fc</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYThetaImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaImpl.html</anchorfile>
      <anchor>ad69684bdac6275e7cd47e84f786cac2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaImpl.html</anchorfile>
      <anchor>ada9a5e8aafdff45f17263ae02a574970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaImpl.html</anchorfile>
      <anchor>a3db5a65e4c481b435a71e15ac8715c26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::XYThetaROImpl</name>
    <filename>structmc__rtc_1_1gui_1_1XYThetaROImpl.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>XYThetaROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaROImpl.html</anchorfile>
      <anchor>ac0153847ff6a36d76c47cae5292be192</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYThetaROImpl</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaROImpl.html</anchorfile>
      <anchor>a17aa4be99cbd7e12a198638912b80726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaROImpl.html</anchorfile>
      <anchor>a2a9635b525b47f997fffcf697ae4b2f5</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaROImpl.html</anchorfile>
      <anchor>a10d9c0c5738157dac5fdb0e5dec24c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>structmc__rtc_1_1gui_1_1XYThetaROImpl.html</anchorfile>
      <anchor>aff70a2c515c79366813abd70e1d09996</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::ZMPCC</name>
    <filename>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</filename>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</type>
      <name>ZMPCCConfiguration</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a1949eb437a14ae9ceb04a1ed238fa998</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a337c9b157af0808f644a5ca5a212540b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enabled</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>acdb0bbf4b891e1b1f980b49094d65f3d</anchor>
      <arglist>(bool state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a93c9cac97f5aed86b1188a82e9e250dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a62da3710011e7f88502562da48923be6</anchor>
      <arglist>(const ZMPCCConfiguration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const ZMPCCConfiguration &amp;</type>
      <name>config</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a281bb3e9109c0c16fdbaf7911ed98ec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a616fc85f14d61c0e6294489bad2e8e0a</anchor>
      <arglist>(const Eigen::Vector3d &amp;distribZMP, const Eigen::Vector3d &amp;measuredZMP, const sva::PTransformd &amp;zmpFrame, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>aada037584c879e69d66e658653912815</anchor>
      <arglist>(Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comd, Eigen::Vector3d &amp;comdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>aa6a76ddd8651adac9e8772a9ef2ca396</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromGUI</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>adf1a26be8c1a383107550957a6d40b13</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a35c033fbff0a99c72d70751d62f2a0b0</anchor>
      <arglist>(mc_rtc::Logger &amp;logger, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a9d4e0e9eaf138dfaa82dfea9c08495e4</anchor>
      <arglist>(mc_rtc::Logger &amp;logger, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZMPCCConfiguration</type>
      <name>config_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a22b7b347161460c0ac0ac763fea70afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comAccel_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a9860625ea9c4d86a42378e66afc72699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffset_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a2da2e9aad02100150a009ff6b411b765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comVel_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a2395abc9208874ea125454fce9e6981b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>error_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>af7d8d84e9eabf8762d42feae2ce8457d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LeakyIntegrator&lt; Eigen::Vector3d &gt;</type>
      <name>integrator_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>aeb470a80e8c6b811cbe485350f83d15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enabled_</name>
      <anchorfile>structmc__tasks_1_1lipm__stabilizer_1_1ZMPCC.html</anchorfile>
      <anchor>a29b2c8d74fda4601ddc13b86b6466b7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</name>
    <filename>structmc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration.html</filename>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration.html</anchorfile>
      <anchor>af93dd33b3fb24e8c64eaa42d7fd4d2f8</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration.html</anchorfile>
      <anchor>a60c44e27b3e8d70defe3353e7f17ca43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW Eigen::Vector2d</type>
      <name>comAdmittance</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration.html</anchorfile>
      <anchor>ad6b1427db5969e53c93eda40b82c29c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>integratorLeakRate</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration.html</anchorfile>
      <anchor>a3c05d238cf8b0b2803e502985898c9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxCoMOffset</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration.html</anchorfile>
      <anchor>a1d42904ddf94ae3ac2660f01dd5e8ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxCoMAdmitance</name>
      <anchorfile>structmc__rbdyn_1_1lipm__stabilizer_1_1ZMPCCConfiguration.html</anchorfile>
      <anchor>ab4355cd8a898d9fb511b6820b4573902</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fmt</name>
    <filename>namespacefmt.html</filename>
    <class kind="struct">fmt::formatter&lt; mc_rtc::Configuration &gt;</class>
    <class kind="struct">fmt::formatter&lt; mc_solver::QPSolver::Backend &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>geos</name>
    <filename>namespacegeos.html</filename>
    <namespace>geos::geom</namespace>
  </compound>
  <compound kind="namespace">
    <name>geos::geom</name>
    <filename>namespacegeos_1_1geom.html</filename>
  </compound>
  <compound kind="namespace">
    <name>mc_control</name>
    <filename>namespacemc__control.html</filename>
    <namespace>mc_control::details</namespace>
    <namespace>mc_control::fsm</namespace>
    <class kind="struct">mc_control::CompletionCriteria</class>
    <class kind="class">mc_control::Contact</class>
    <class kind="struct">mc_control::ControllerClient</class>
    <class kind="class">mc_control::ControllerLoader</class>
    <class kind="struct">mc_control::ControllerParameters</class>
    <class kind="class">mc_control::ControllerResetData</class>
    <class kind="struct">mc_control::ControllerServer</class>
    <class kind="struct">mc_control::ElementId</class>
    <class kind="struct">mc_control::GlobalPlugin</class>
    <class kind="class">mc_control::GlobalPluginLoader</class>
    <class kind="struct">mc_control::Gripper</class>
    <class kind="class">mc_control::MCController</class>
    <class kind="struct">mc_control::MCGlobalController</class>
    <class kind="struct">mc_control::MCPythonController</class>
    <class kind="struct">mc_control::PythonRWCallback</class>
    <class kind="struct">mc_control::SimulationContactPair</class>
    <class kind="struct">mc_control::TasksController</class>
    <class kind="struct">mc_control::TVMController</class>
    <member kind="typedef">
      <type>mc_rtc::Configuration</type>
      <name>Configuration</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a6e724381ca619d4c38da5fd7cdbfe9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_set&lt; Contact, std::hash&lt; Contact &gt;, std::equal_to&lt; Contact &gt;, Eigen::aligned_allocator&lt; Contact &gt; &gt;</type>
      <name>ContactSet</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>ac55a4e95c7c3aaab29499a0abe565e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Gripper &gt;</type>
      <name>GripperPtr</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a67d3b51822d3e7d0c56d9af675f9eaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reference_wrapper&lt; Gripper &gt;</type>
      <name>GripperRef</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a39b3dee4f4017bab0f389d9bfd7877dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GlobalPlugin, mc_rtc::ObjectLoader&lt; GlobalPlugin &gt;::ObjectDeleter &gt;</type>
      <name>GlobalPluginPtr</name>
      <anchorfile>namespacemc__control.html</anchorfile>
      <anchor>a077624dc5665df1a3e145d0283e10c78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_control::details</name>
    <filename>namespacemc__control_1_1details.html</filename>
    <class kind="struct">mc_control::details::BackendSpecificController</class>
  </compound>
  <compound kind="namespace">
    <name>mc_control::fsm</name>
    <filename>namespacemc__control_1_1fsm.html</filename>
    <namespace>mc_control::fsm::details</namespace>
    <class kind="struct">mc_control::fsm::AddRemoveContactState</class>
    <class kind="class">mc_control::fsm::Controller</class>
    <class kind="struct">mc_control::fsm::EnableControllerState</class>
    <class kind="class">mc_control::fsm::Executor</class>
    <class kind="struct">mc_control::fsm::Grippers</class>
    <class kind="struct">mc_control::fsm::HalfSittingState</class>
    <class kind="struct">mc_control::fsm::MessageState</class>
    <class kind="struct">mc_control::fsm::MetaState</class>
    <class kind="struct">mc_control::fsm::MetaTasksState</class>
    <class kind="struct">mc_control::fsm::ParallelState</class>
    <class kind="struct">mc_control::fsm::PauseState</class>
    <class kind="struct">mc_control::fsm::PostureState</class>
    <class kind="struct">mc_control::fsm::PythonState</class>
    <class kind="struct">mc_control::fsm::StabilizerStandingState</class>
    <class kind="class">mc_control::fsm::State</class>
    <class kind="class">mc_control::fsm::StateFactory</class>
    <class kind="struct">mc_control::fsm::TasksController</class>
    <class kind="class">mc_control::fsm::Transition</class>
    <class kind="class">mc_control::fsm::TransitionMap</class>
    <class kind="struct">mc_control::fsm::TVMController</class>
    <member kind="typedef">
      <type>mc_control::Contact</type>
      <name>Contact</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a52d7fbb8d8e312077694e5c761ddac8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_control::ContactSet</type>
      <name>ContactSet</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>ae900416c9a809910247882838e0d5599</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; State &gt;</type>
      <name>StatePtr</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a4c42d903de4c4a1e5ad50c37bc2d547a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_DLLAPI</type>
      <name>Controller</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a3d06e24faff23eaa588f3820e74042b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_STATE_DLLAPI</type>
      <name>AddRemoveContactStateImpl</name>
      <anchorfile>namespacemc__control_1_1fsm.html</anchorfile>
      <anchor>a2deb94750a61f8f86801bd02f4149d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_control::fsm::details</name>
    <filename>namespacemc__control_1_1fsm_1_1details.html</filename>
    <class kind="struct">mc_control::fsm::details::BackendSpecificController</class>
  </compound>
  <compound kind="namespace">
    <name>mc_filter</name>
    <filename>namespacemc__filter.html</filename>
    <namespace>mc_filter::utils</namespace>
    <class kind="struct">mc_filter::ExponentialMovingAverage</class>
    <class kind="struct">mc_filter::LeakyIntegrator</class>
    <class kind="struct">mc_filter::LowPass</class>
    <class kind="struct">mc_filter::LowPassCompose</class>
    <class kind="struct">mc_filter::LowPassFiniteDifferences</class>
    <class kind="struct">mc_filter::StationaryOffset</class>
  </compound>
  <compound kind="namespace">
    <name>mc_filter::utils</name>
    <filename>namespacemc__filter_1_1utils.html</filename>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>adfd3c18de5d65e94ce24d479f30dab1b</anchor>
      <arglist>(double value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ab8d9ca10808c933f3408d9b3f0fd72ab</anchor>
      <arglist>(double &amp;value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clampAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ae558cb782558a6fe59c9975f5e9dc2b4</anchor>
      <arglist>(double value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ac413b7125d296374adc252995e63570d</anchor>
      <arglist>(double &amp;value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a644eea0a16a707328be39ddd79f967f5</anchor>
      <arglist>(const VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a27751a2cc46af2d62717f6f52c518382</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clampAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>aab0443f3755eb02422bb0ed23308f220</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a7ee9282ad316cf4eef418c7060fcfcf9</anchor>
      <arglist>(VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>a4de43cd1afd6571c2b390ac00c3ed252</anchor>
      <arglist>(VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>ab82d5e06d06a98e2087aadce7be029ab</anchor>
      <arglist>(VectorT &amp;vector, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>namespacemc__filter_1_1utils.html</anchorfile>
      <anchor>aae7592fcc8c4adee0d0108bc9ffba659</anchor>
      <arglist>(VectorT &amp;vector, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_observers</name>
    <filename>namespacemc__observers.html</filename>
    <class kind="struct">mc_observers::BodySensorObserver</class>
    <class kind="struct">mc_observers::EncoderObserver</class>
    <class kind="struct">mc_observers::KinematicInertialObserver</class>
    <class kind="struct">mc_observers::KinematicInertialPoseObserver</class>
    <class kind="struct">mc_observers::Observer</class>
    <class kind="class">mc_observers::ObserverLoader</class>
    <class kind="struct">mc_observers::ObserverPipeline</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; mc_observers::Observer &gt;</type>
      <name>ObserverPtr</name>
      <anchorfile>namespacemc__observers.html</anchorfile>
      <anchor>a45c5f50ee1e5bcc4959faef24b334643</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_planning</name>
    <filename>namespacemc__planning.html</filename>
    <class kind="struct">mc_planning::Pendulum</class>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn</name>
    <filename>namespacemc__rbdyn.html</filename>
    <namespace>mc_rbdyn::detail</namespace>
    <namespace>mc_rbdyn::details</namespace>
    <namespace>mc_rbdyn::lipm_stabilizer</namespace>
    <class kind="struct">mc_rbdyn::Base</class>
    <class kind="struct">mc_rbdyn::BodySensor</class>
    <class kind="struct">mc_rbdyn::Collision</class>
    <class kind="struct">mc_rbdyn::CompoundJointConstraintDescription</class>
    <class kind="struct">mc_rbdyn::Contact</class>
    <class kind="struct">mc_rbdyn::CylindricalSurface</class>
    <class kind="struct">mc_rbdyn::Device</class>
    <class kind="struct">mc_rbdyn::DevicePtrVector</class>
    <class kind="struct">mc_rbdyn::Flexibility</class>
    <class kind="struct">mc_rbdyn::ForceSensor</class>
    <class kind="struct">mc_rbdyn::Frame</class>
    <class kind="struct">mc_rbdyn::Gains</class>
    <class kind="struct">mc_rbdyn::GripperSurface</class>
    <class kind="struct">mc_rbdyn::JointSensor</class>
    <class kind="struct">mc_rbdyn::LoadRobotParameters</class>
    <class kind="struct">mc_rbdyn::Mimic</class>
    <class kind="struct">mc_rbdyn::PlanarSurface</class>
    <class kind="struct">mc_rbdyn::Plane</class>
    <class kind="struct">mc_rbdyn::PolygonInterpolator</class>
    <class kind="struct">mc_rbdyn::QuadraticGenerator</class>
    <class kind="struct">mc_rbdyn::Robot</class>
    <class kind="struct">mc_rbdyn::RobotConverter</class>
    <class kind="struct">mc_rbdyn::RobotConverterConfig</class>
    <class kind="struct">mc_rbdyn::RobotData</class>
    <class kind="struct">mc_rbdyn::RobotFrame</class>
    <class kind="class">mc_rbdyn::RobotLoader</class>
    <class kind="struct">mc_rbdyn::RobotModule</class>
    <class kind="struct">mc_rbdyn::Robots</class>
    <class kind="struct">mc_rbdyn::Springs</class>
    <class kind="struct">mc_rbdyn::Surface</class>
    <class kind="struct">mc_rbdyn::VisualMap</class>
    <member kind="typedef">
      <type>std::vector&lt; BodySensor, Eigen::aligned_allocator&lt; BodySensor &gt; &gt;</type>
      <name>BodySensorVector</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a728d731db2806e7673f67b958970e558</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CompoundJointConstraintDescription, Eigen::aligned_allocator&lt; CompoundJointConstraintDescription &gt; &gt;</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a96a35f8f44c0b0eb301fabc4af2bd978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Device &gt;</type>
      <name>DevicePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a356f67585abd89ae94368d4644d6e865</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Device</type>
      <name>Sensor</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a243aca157f29f1aebb2c1210ac166a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DevicePtr</type>
      <name>SensorPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aa1e86054c466a23bfdcb3470f71c8aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robots &gt;</type>
      <name>RobotsPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ac024daf249dfc12f828218d5c2410b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ae201c3229c7e6f97eebcda8db1d4233d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Robot &gt;</type>
      <name>ConstRobotPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a628807423df2a6107db3c5c63eb98d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotFrame &gt;</type>
      <name>RobotFramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5a52a2394099019321a0411da30ea5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const RobotFrame &gt;</type>
      <name>ConstRobotFramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a1d750a36f101823e43d108ec5c8231cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Frame &gt;</type>
      <name>FramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a6124c67ac9b136813eae7227f70c17cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Frame &gt;</type>
      <name>ConstFramePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a2dbebe10445fe21fb342ac391a10ba24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Gains&lt; 2 &gt;</type>
      <name>Gains2d</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a579a5a84c1619ddaae2108661c3241f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Gains&lt; 3 &gt;</type>
      <name>Gains3d</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a568b6e5798e01953165c11cd12fe415b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Gains&lt; 6 &gt;</type>
      <name>Gains6d</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a63313c08848a1cdd1461b077c1a83a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotData &gt;</type>
      <name>RobotDataPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a33ca728cc2ff802237e8135754f359a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; sch::S_Object &gt;</type>
      <name>S_ObjectPtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ac3517607389b845ee6ffdee65cbc8a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotModule &gt;</type>
      <name>RobotModulePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>af67e459a90b9a864418fca7d55d959a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RobotModule, Eigen::aligned_allocator&lt; RobotModule &gt; &gt;</type>
      <name>RobotModuleVector</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a95605f5cb57b7c5b39027072bedbbc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>SurfacePtr</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a848cf0b2e8f6ca6f18ceba1769d9a426</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>accbb9a0b34219e39b1dad5d93f5fa05d</anchor>
      <arglist>(const mc_rbdyn::BodySensor &amp;lhs, const mc_rbdyn::BodySensor &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aca0a2bc620d221c02c834716d875c1e0</anchor>
      <arglist>(std::ostream &amp;os, const Collision &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; sva::PTransformd &gt;</type>
      <name>computePoints</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a736c36f68b3eff9f08124c8b1a58cba3</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;robotSurface, const mc_rbdyn::Surface &amp;envSurface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>planar</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aca49bff3651cf81d0b834813b80fcdf6</anchor>
      <arglist>(const double &amp;T, const double &amp;B, const double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>cylindrical</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a44fdec158ad0a6005388d1f2296b154f</anchor>
      <arglist>(const double &amp;T, const double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>planarParam</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ad2a0e2d6fd6cdece777a838b76a7c1da</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;B, double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>cylindricalParam</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a611ca01f8c4f76581c96c8df0202f195</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; double &gt;</type>
      <name>jointParam</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ac6670e00a7e663e03a4709533a706e89</anchor>
      <arglist>(const Surface &amp;r1Surface, const Surface &amp;r2Surface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5aa4dab41fa3cd48e13c4fd628bcb630</anchor>
      <arglist>(const mc_rbdyn::ForceSensor &amp;lhs, const mc_rbdyn::ForceSensor &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>hat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>adfd1b3b7507cf3de890aeb3eca8376d0</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a8925faa2c281c5667b4227aee573c835</anchor>
      <arglist>(const JointSensor &amp;lhs, const JointSensor &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>acc171bbf6f9fa58525ac71fa8c54a2f4</anchor>
      <arglist>(const Mimic &amp;lhs, const Mimic &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Plane &gt;</type>
      <name>planes_from_polygon</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a3313c1739e7847d2155cd1e8eb248c1e</anchor>
      <arglist>(const std::shared_ptr&lt; geos::geom::Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>points_from_polygon</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a8b64034329a5f248185cf1904c0732a0</anchor>
      <arglist>(std::shared_ptr&lt; geos::geom::Geometry &gt; geometry)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI const mc_rbdyn::Robot &amp;</type>
      <name>robotFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>ga70b316b2f0c0caf547e160e74c2a029d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string MC_RBDYN_DLLAPI</type>
      <name>robotNameFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>ga40325ac769295d23f270976eead26245</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int MC_RBDYN_DLLAPI</type>
      <name>robotIndexFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>gaf9b711ec2baa5684b8f422d740464b5f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotModule::bounds_t</type>
      <name>urdf_limits_to_bounds</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>ae02615325b483661411e4eb7d76e0522</anchor>
      <arglist>(const rbd::parsers::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI bool</type>
      <name>check_module_compatibility</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a8ac23895f52ccc0e6ea9f77dfc83c84a</anchor>
      <arglist>(const RobotModule &amp;lhs, const RobotModule &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>abaf5b2b5f77f9658f757b3a1dbdcf030</anchor>
      <arglist>(const RobotModule::Gripper::Safety &amp;lhs, const RobotModule::Gripper::Safety &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5e07749ee4441c7ee3c8d1b9508f6126</anchor>
      <arglist>(const RobotModule::Gripper &amp;lhs, const RobotModule::Gripper &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobot</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a7ac28a8438587660a42d241937783322</anchor>
      <arglist>(const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobot</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a023b9824634ace45cf7ebb23a5abdc00</anchor>
      <arglist>(const std::string &amp;name, const RobotModule &amp;module, const LoadRobotParameters &amp;params={})</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobots</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a4db76cbebcf7d350a4b7182cccfbe399</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobotAndEnv</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aa833d20a49375cc17cd9b18370531657</anchor>
      <arglist>(const RobotModule &amp;module, const RobotModule &amp;envModule)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI RobotsPtr</type>
      <name>loadRobotFromUrdf</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a23af9e4069ba5394163c390df9d48dba</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, const rbd::parsers::ParserParameters &amp;parser_params={}, const LoadRobotParameters &amp;load_params={})</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a5f178afee4c03533ae15c4dc04c143e2</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a04f15be86a9827b0d076764f344406ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>afa2b9eed96e67a1bdb6abf90bb597063</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a4626f965b6c407b0bd14e10f98ec42b9</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromMat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a0948fb6dc9382e116f65c76261d26ea0</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromQuat</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a058cd1f189f02e2c4986b6aacffa8195</anchor>
      <arglist>(const Eigen::Quaterniond &amp;quat)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>surface_to_sch</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>adf1399b68c68126e373f564e95bc7531</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;surface, const double &amp;depth=0.01, const unsigned int &amp;slice=8)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>sch_polyhedron</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a3db1776d4f8f36e1eb2a8c51bc157867</anchor>
      <arglist>(const std::vector&lt; sva::PTransformd &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>planar_hull</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a96cab2abc78656a41b2b56987c5fbbfa</anchor>
      <arglist>(const mc_rbdyn::PlanarSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>cylindrical_hull</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>adcd59f0c2e8c9cd94a6f9800c164e723</anchor>
      <arglist>(const mc_rbdyn::CylindricalSurface &amp;surface, const unsigned int &amp;slice)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>gripper_hull</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a70b7277a0499a32774e608f8def99043</anchor>
      <arglist>(const mc_rbdyn::GripperSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; std::shared_ptr&lt; Surface &gt; &gt;</type>
      <name>readRSDFFromDir</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a01a984b0ca29b3b20b799b01e7239a9b</anchor>
      <arglist>(const std::string &amp;dirname)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a329453006944dae96fa60d86dca66db8</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>a16ead89124e40e3331ca5342b6bff282</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>aa9d4155584b04e51fdb5c24f5739fc24</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>namespacemc__rbdyn.html</anchorfile>
      <anchor>add217737ef65a4059123036de289c029</anchor>
      <arglist>(Eigen::Vector3d &amp;zmpOut, const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn::detail</name>
    <filename>namespacemc__rbdyn_1_1detail.html</filename>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn::details</name>
    <filename>namespacemc__rbdyn_1_1details.html</filename>
    <class kind="struct">mc_rbdyn::details::are_strings</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T &gt;</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T, Args... &gt;</class>
    <member kind="function">
      <type>std::conditional&lt; std::is_same&lt; std::string, T &gt;::value, const std::string &amp;, std::string &gt;::type</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rbdyn_1_1details.html</anchorfile>
      <anchor>a71fcd7fe46e75452f9c6302bb1c40412</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn::lipm_stabilizer</name>
    <filename>namespacemc__rbdyn_1_1lipm__stabilizer.html</filename>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::FDQPWeights</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::SafetyThresholds</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</class>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc</name>
    <filename>namespacemc__rtc.html</filename>
    <namespace>mc_rtc::constants</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::internal</namespace>
    <namespace>mc_rtc::io</namespace>
    <namespace>mc_rtc::log</namespace>
    <namespace>mc_rtc::utils</namespace>
    <class kind="struct">mc_rtc::Configuration</class>
    <class kind="struct">mc_rtc::ConfigurationArrayIterator</class>
    <class kind="struct">mc_rtc::ConfigurationFile</class>
    <class kind="struct">mc_rtc::ConfigurationLoader</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_control::Contact &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::CompoundJointConstraintDescription &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::Contact &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::FDQPWeights &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::SafetyThresholds &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModule &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModulePtr &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::ArrowConfig &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::Color &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::ForceConfig &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::LineConfig &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::PointConfig &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rtc::gui::PolyhedronConfig &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_tasks::force::ImpedanceGains &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_tasks::lipm_stabilizer::ContactState &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; void &gt;</class>
    <class kind="struct">mc_rtc::DataStore</class>
    <class kind="class">mc_rtc::Loader</class>
    <class kind="class">mc_rtc::LoaderException</class>
    <class kind="struct">mc_rtc::Logger</class>
    <class kind="class">mc_rtc::LTDLHandle</class>
    <class kind="class">mc_rtc::LTDLMutex</class>
    <class kind="struct">mc_rtc::MessagePackBuilder</class>
    <class kind="class">mc_rtc::ObjectLoader</class>
    <class kind="struct">mc_rtc::RobotPublisher</class>
    <class kind="struct">mc_rtc::ROSBridge</class>
    <class kind="struct">mc_rtc::shared</class>
    <class kind="struct">mc_rtc::SharedPtrVectorConstIterator</class>
    <class kind="struct">mc_rtc::SharedPtrVectorIterator</class>
    <class kind="class">mc_rtc::unique_ptr</class>
    <class kind="struct">mc_rtc::void_ptr_caster</class>
    <member kind="typedef">
      <type>std::chrono::duration&lt; double, std::milli &gt;</type>
      <name>duration_ms</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>afd4119022924596532a073fc5a0c6f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::chrono::duration&lt; double, std::micro &gt;</type>
      <name>duration_us</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>adc728153d578b83ef5eef7a24396ffed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock &gt;::type</type>
      <name>clock</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a5a9a29b4e1cc43e334c4ca10059ef277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; LTDLHandle &gt;</type>
      <name>LTDLHandlePtr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a04f4430d990b320f494b3a21112c7e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; void, void(*)(void *)&gt;</type>
      <name>void_ptr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a180392c9544bd202410478d8a4fb623d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>ac1107b5d5bcf197a41add86ce445c866</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key, const std::vector&lt; T &gt; &amp;defaultVec)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a9c308b4400fb83031251be1f6ab0adb2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>debug</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a0bd63387904206fef1971ac84987b3bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_name</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a8fb61bc6391bc9cd0ef2aa0efff2d641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void_ptr</type>
      <name>make_void_ptr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>aa0b92b93372ae4db1cf2eb6ee6cd0828</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void_ptr</type>
      <name>make_void_ptr</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a05e165ab46d424a119034202cbc79999</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; ptr)</arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>ConfigurationArrayIterator</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a781ea11d3b3f97742187d5910b74edfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>Configuration</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a9b620c9005d103e65363b518ba6dca23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_NONE</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>ab85e3cb123f11bf1f9290abe17a7d49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_BLUE</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a15b005678017d9608ff8f599e34e41de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_GREEN</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a7ab584d4904b2b1695ae2cb04ca984ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_PURPLE</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>aeb1d99e566cb5c454074579fcfa712f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_RED</name>
      <anchorfile>namespacemc__rtc.html</anchorfile>
      <anchor>a9003469324d75c8934d51654d98ef862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::constants</name>
    <filename>namespacemc__rtc_1_1constants.html</filename>
    <member kind="function">
      <type>constexpr double</type>
      <name>toDeg</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a9790fd3b6c0100cac0f0f7d86c4bec83</anchor>
      <arglist>(const double rad)</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>toRad</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a42486cc28b8ed4721ee34ec2e1be876b</anchor>
      <arglist>(const double degrees)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>GRAVITY</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a04b344c34834432afcfcc1ac86bff22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>gravity</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>acf271123cee2ac958b9ae0f9220ea422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>vertical</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>aaaeaab7136aa7d17fa172fde905c2cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>PI</name>
      <anchorfile>namespacemc__rtc_1_1constants.html</anchorfile>
      <anchor>a8cb2b2837ea283890b185cfef0631602</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui</name>
    <filename>namespacemc__rtc_1_1gui.html</filename>
    <namespace>mc_rtc::gui::details</namespace>
    <namespace>mc_rtc::gui::internal</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <class kind="struct">mc_rtc::gui::ArrayInputImpl</class>
    <class kind="struct">mc_rtc::gui::ArrayLabelImpl</class>
    <class kind="struct">mc_rtc::gui::ArrowConfig</class>
    <class kind="struct">mc_rtc::gui::ArrowImpl</class>
    <class kind="struct">mc_rtc::gui::ArrowROImpl</class>
    <class kind="struct">mc_rtc::gui::ButtonImpl</class>
    <class kind="struct">mc_rtc::gui::CallbackElement</class>
    <class kind="struct">mc_rtc::gui::CheckboxImpl</class>
    <class kind="struct">mc_rtc::gui::Color</class>
    <class kind="struct">mc_rtc::gui::ComboInputImpl</class>
    <class kind="struct">mc_rtc::gui::CommonInputImpl</class>
    <class kind="struct">mc_rtc::gui::DataComboInputImpl</class>
    <class kind="struct">mc_rtc::gui::DataElement</class>
    <class kind="struct">mc_rtc::gui::Element</class>
    <class kind="struct">mc_rtc::gui::ForceConfig</class>
    <class kind="struct">mc_rtc::gui::ForceImpl</class>
    <class kind="struct">mc_rtc::gui::ForceROImpl</class>
    <class kind="struct">mc_rtc::gui::FormComboInput</class>
    <class kind="struct">mc_rtc::gui::FormDataComboInput</class>
    <class kind="struct">mc_rtc::gui::FormElement</class>
    <class kind="struct">mc_rtc::gui::FormImpl</class>
    <class kind="struct">mc_rtc::gui::IntegerInputImpl</class>
    <class kind="struct">mc_rtc::gui::LabelImpl</class>
    <class kind="struct">mc_rtc::gui::LineConfig</class>
    <class kind="struct">mc_rtc::gui::NumberInputImpl</class>
    <class kind="struct">mc_rtc::gui::NumberSliderImpl</class>
    <class kind="struct">mc_rtc::gui::Point3DImpl</class>
    <class kind="struct">mc_rtc::gui::Point3DROImpl</class>
    <class kind="struct">mc_rtc::gui::PointConfig</class>
    <class kind="struct">mc_rtc::gui::PolygonImpl</class>
    <class kind="struct">mc_rtc::gui::PolyhedronConfig</class>
    <class kind="struct">mc_rtc::gui::RotationImpl</class>
    <class kind="struct">mc_rtc::gui::RotationROImpl</class>
    <class kind="struct">mc_rtc::gui::SchemaImpl</class>
    <class kind="struct">mc_rtc::gui::StateBuilder</class>
    <class kind="struct">mc_rtc::gui::StringInputImpl</class>
    <class kind="struct">mc_rtc::gui::TrajectoryImpl</class>
    <class kind="struct">mc_rtc::gui::TransformImpl</class>
    <class kind="struct">mc_rtc::gui::TransformROImpl</class>
    <class kind="struct">mc_rtc::gui::VoidCallbackElement</class>
    <class kind="struct">mc_rtc::gui::XYThetaImpl</class>
    <class kind="struct">mc_rtc::gui::XYThetaROImpl</class>
    <member kind="enumeration">
      <type></type>
      <name>Elements</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a32d283e5c35e7fd7dcddbc0199bfdc06</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ab021df6aac4654c454f46c77646e745f">Label</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93bead7e77b18cbfc7d0c892eb65a69f">ArrayLabel</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a87b7760f14fbff78d8819291f36ab9a0">Button</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4f8222964f9a317cef99dddc23a121bd">Checkbox</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a6e2d1c6d37623990d2d3e0919ee03ff1">StringInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad9da16a5098cfbf3002491c43df151af">IntegerInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7be1677ccab64a74bebea1ab86131da8">NumberInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2e9c5f285f5ff6be9348942eac1cc6ad">NumberSlider</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ed2cbbe9de17e308d54422d43f3deaf">ArrayInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad7e38bc04789bd7093fa285ba7a91f4d">ComboInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06aa8aea7afab217ab8095ef9c7404aa6c9">DataComboInput</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a1685c4cb9754df6a8c65c8564d8d0d74">Point3D</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2c1f43c429c5e00feaef7ba3327375dc">Trajectory</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06af1a42bd417390fc63b030a519624607a">Rotation</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ff4148554480a37f85efd299df04850">Transform</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7146a60667b422e69fd050fe1df6859a">Schema</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad359c6df99b25183d81f7d728b71de0e">Form</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a9eb6b78a99cdb6ffd3d40d18621d9f80">Force</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a0f4e1aaabd074689b7d3ead824d1ee8e">Arrow</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93b34e4f6ff555f9cc248bae9cd00386">XYTheta</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a51c45b795d5d18a3e4e0c37e8b20a141">Table</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a5d1eca158c00250d9c4c32d947b7c433">Robot</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4557e77491fe3dbd9a6055aeb0ed00d7">Visual</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a94c8141fc670449195562629a2055edf">PolyhedronTrianglesList</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a35ddbf0f6429fc2aabd5fadc20766153">PolyhedronVerticesTriangles</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ElementsStacking</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a649ddcaedb769dede3922fa845e71ca4</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a649ddcaedb769dede3922fa845e71ca4a06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a649ddcaedb769dede3922fa845e71ca4ac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineStyle</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a23166295a3983f35cb0fa510b4c156c9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a23166295a3983f35cb0fa510b4c156c9ae41480b6bbfbf7407974a88d3d34f4fa">Solid</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui.html" anchor="a23166295a3983f35cb0fa510b4c156c9a90c09393a4c0970bc9a6703ad527781c">Dotted</enumvalue>
    </member>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ad70775c90f4b00f10abc4c5a5721e557</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a7f24f6599b905f3caf6ad3ec29def6bf</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a308b0967f9f6dc43f0f27bcc7d1c2b69</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ab51ab91bf57f9e53c1b5c69ab3d8bc61</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aae7d8d2d90a01712f0f57ba5f5ec0faf</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ab5cef94f254edfaaa52e300ef9d9287b</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a910fc94e100370b4eaa72737398268aa</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a35479664be1d4b8d4c55baf5e76e16ae</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ButtonImpl&lt; Callback &gt;</type>
      <name>Button</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a7d2e7edd5eaf913a973c519cdd6affa2</anchor>
      <arglist>(const std::string &amp;name, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>CheckboxImpl&lt; GetT, Callback &gt;</type>
      <name>Checkbox</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>afc7e12ae3accc04250d14da90634986b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>ComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>ComboInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aea7948a0427bfd1acd2a28803e5559e1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>DataComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>DataComboInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a5baa34dd8ac370b60f3ffbf0b2fd9dda</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a1dfaa55db99fac62693744326d7f1cb9</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ae5e645b29b00acb907a3080e35a66697</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aed7593a02cc0bcc3b045e2c85a3a2284</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>af532dce0703aff08a435a2c53182de1b</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>internal::FormArrayInput&lt; T &gt;</type>
      <name>FormArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a7dfdb12d58d770f35ea3c3643d2ac95c</anchor>
      <arglist>(const std::string &amp;name, bool required, bool fixed_size=false)</arglist>
    </member>
    <member kind="function">
      <type>internal::FormArrayInput&lt; T &gt;</type>
      <name>FormArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a373b1db44b534128d823f218885daaa4</anchor>
      <arglist>(const std::string &amp;name, bool required, const T &amp;value, bool fixed_size=true)</arglist>
    </member>
    <member kind="function">
      <type>internal::FormArrayInput&lt; details::ReturnTypeT&lt; Callback &gt;, Callback &gt;</type>
      <name>FormArrayInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aa4362ee6c9e772360facce9dea5d1874</anchor>
      <arglist>(const std::string &amp;name, bool required, Callback callback, bool fixed_size=true)</arglist>
    </member>
    <member kind="function">
      <type>FormImpl&lt; Callback &gt;</type>
      <name>Form</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a94d2215e324dad2adb958327c16bf167</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>IntegerInputImpl&lt; GetT, SetT &gt;</type>
      <name>IntegerInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ac4f13804b0853d4e3ee9d53afed5b06c</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>LabelImpl&lt; GetT &gt;</type>
      <name>Label</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a4b4617f09036971e7ccbf6917ee37c19</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>NumberInputImpl&lt; GetT, SetT &gt;</type>
      <name>NumberInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a42ba0a1ea0c4890a7941cf76892e1268</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>NumberSliderImpl&lt; GetT, SetT &gt;</type>
      <name>NumberSlider</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a5c6714af47a8cb199c7345ed1c2e8ffe</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ac40c7c59cc19e0fe7be9d8a5a8564f74</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0c1802e2d8623ee22fffc408e69eaf56</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ad2db10f53541f7b6a925d724023de7ee</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a6a9e684830b60a463c848a290d2b910b</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>ac7c7c596bdb09e8c01e26e8fb53ce360</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a2b137bae8372a9a84cdb28508e7de1dd</anchor>
      <arglist>(const std::string &amp;name, const Color &amp;color, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aed41b5cb5e5b9e7fff1670617e2584be</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a1cadd149b5d41c11735dbd88babe8682</anchor>
      <arglist>(const std::string &amp;name, GetTrianglesT get_triangles_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0844bcf3f749bc2c3bcfb36bab3248b7</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetTrianglesT get_triangles_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a81c80807fb522ea42e550d8afef97d96</anchor>
      <arglist>(const std::string &amp;name, GetVerticesOrTrianglesT get_vertices_or_triangles_fn, GetTrianglesOrColorsT get_triangles_or_colors_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a67f435aeffc46d95c478578d86aef732</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetVerticesOrTrianglesT get_vertices_or_triangles_fn, GetTrianglesOrColorsT get_triangles_or_colors_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ColoredPolyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a5171220f7e195ae9fab9affc5b648973</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetTrianglesT get_triangles_fn, GetColorT get_color_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a8f62834ebdac62261d49bf4582df541c</anchor>
      <arglist>(const std::string &amp;name, GetVerticesT get_vertices_fn, GetTrianglesT get_triangles_fn, GetColorT get_color_fn)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Polyhedron</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0074155dfebc9c355c338024df640aa5</anchor>
      <arglist>(const std::string &amp;name, const PolyhedronConfig &amp;config, GetVerticesT get_vertices_fn, GetTrianglesT get_triangles_fn, GetColorT get_color_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::RobotImpl&lt; GetT &gt;</type>
      <name>Robot</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a62100aa06fcd2571172fe1f3f2d1183a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>RotationROImpl&lt; GetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a9dc809d7e99978fe3f5e2439d1a20771</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>RotationImpl&lt; GetT, SetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a6440392ea4b48778f6d4012e0400ee5b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>SchemaImpl&lt; Callback &gt;</type>
      <name>Schema</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a0c892f6b2ba9e06d4bda32a16b76b75b</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;schema, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>StringInputImpl&lt; GetT, SetT &gt;</type>
      <name>StringInput</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a4f8c1eb018c71e856f48cee90d7ea65d</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::StaticTableImpl&lt; GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a05cd899ebf8c1a1bf56acd3f44ce0b57</anchor>
      <arglist>(const std::string &amp;name, std::vector&lt; std::string &gt; header, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::StaticTableImpl&lt; GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a2d55934be28cf780ebdd662095eb5d1a</anchor>
      <arglist>(const std::string &amp;name, std::vector&lt; std::string &gt; header, std::vector&lt; std::string &gt; format, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::TableImpl&lt; GetHeader, GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a25d7b1c4f525b8357ff241d726e506b2</anchor>
      <arglist>(const std::string &amp;name, GetHeader get_header_fn, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::FormattedTableImpl&lt; GetHeader, GetFormat, GetData &gt;</type>
      <name>Table</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a6785282ae9524556f7069b9a87076eef</anchor>
      <arglist>(const std::string &amp;name, GetHeader get_header_fn, GetFormat get_format_fn, GetData get_data_fn)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a062a5442d4cabf7a31d7f83008751a6a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aa175899f8868d419050975dc9f79ed97</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TransformROImpl&lt; GetT &gt;</type>
      <name>Transform</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aa5342b74063b005e6a03efd66adef74e</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TransformImpl&lt; GetT, SetT &gt;</type>
      <name>Transform</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a96cb90761dce6d6e3441d779e7184847</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>details::VisualImpl&lt; GetVisual, GetPos &gt;</type>
      <name>Visual</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a1cf7a01c7c66698472b6299464cd40c5</anchor>
      <arglist>(const std::string &amp;name, GetVisual get_visual_fn, GetPos get_pos_fn)</arglist>
    </member>
    <member kind="function">
      <type>XYThetaROImpl&lt; GetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>aaaa2ebe2ecb490f266fe541318646561</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>XYThetaImpl&lt; GetT, SetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>namespacemc__rtc_1_1gui.html</anchorfile>
      <anchor>a98fa40132858d1d9c0091acb36ce9f32</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui::details</name>
    <filename>namespacemc__rtc_1_1gui_1_1details.html</filename>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T &gt;</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T, Args... &gt;</class>
    <class kind="struct">mc_rtc::gui::details::ColoredPolyhedronImpl</class>
    <class kind="struct">mc_rtc::gui::details::FormattedTableImpl</class>
    <class kind="struct">mc_rtc::gui::details::NotAGetter</class>
    <class kind="struct">mc_rtc::gui::details::PolyhedronTrianglesListImpl</class>
    <class kind="struct">mc_rtc::gui::details::PolyhedronVerticesTrianglesImpl</class>
    <class kind="struct">mc_rtc::gui::details::ReturnType</class>
    <class kind="struct">mc_rtc::gui::details::ReturnTypeImpl</class>
    <class kind="struct">mc_rtc::gui::details::ReturnTypeImpl&lt; GetT, false &gt;</class>
    <class kind="struct">mc_rtc::gui::details::RobotImpl</class>
    <class kind="struct">mc_rtc::gui::details::StaticTableImpl</class>
    <class kind="struct">mc_rtc::gui::details::TableImpl</class>
    <class kind="struct">mc_rtc::gui::details::VisualImpl</class>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a437b4050328d7178f5872223cf9f7f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ReturnType&lt; GetT &gt;::type</type>
      <name>ReturnTypeT</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a62d70a1c5467de8404eceee15a80da68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_getter_impl</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a8e445bc0e47af1ff42f00cec4cbacbf7</anchor>
      <arglist>(void_t&lt; decltype(std::declval&lt; GetT &gt;()())&gt; *)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_getter_impl</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a664fd97ecf7ee798c1fcace58d4f8a21</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_getter</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1details.html</anchorfile>
      <anchor>a3f24a46e2245c7951863c943009a6b3c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui::internal</name>
    <filename>namespacemc__rtc_1_1gui_1_1internal.html</filename>
    <class kind="struct">mc_rtc::gui::internal::CallbackOrValue</class>
    <class kind="struct">mc_rtc::gui::internal::CallbackOrValue&lt; T, void &gt;</class>
    <class kind="struct">mc_rtc::gui::internal::FormArrayInput</class>
    <class kind="struct">mc_rtc::gui::internal::FormDataInput</class>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui::plot</name>
    <filename>namespacemc__rtc_1_1gui_1_1plot.html</filename>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <class kind="struct">mc_rtc::gui::plot::AxisConfiguration</class>
    <class kind="struct">mc_rtc::gui::plot::PolygonDescription</class>
    <class kind="struct">mc_rtc::gui::plot::Range</class>
    <member kind="enumeration">
      <type></type>
      <name>Plot</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>ae8d436e1212bee55dfdb14d50b0d6be9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9aeb6d8ae6f20283755b339c0dc273988b">Standard</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9a74c53bcd3dcb2bb79993b2fec37d362a">XY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a6e2b70125fa1d433838b9a8f2bf28c4d</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dac9812e629ac3822b86f7c19704983d0e">Abscissa</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da5d32a72e2819aaf62362fcc862b37c5e">Ordinate</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4daa7a7e14b2a005870ba134e6c92bb7b51">Polygons</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1gui_1_1plot.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dab83f39f54c4bd7f3a02f9a45fd996031">AbscissaOrdinate</enumvalue>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a13155e82e2012b946c5c973369b1db56</anchor>
      <arglist>(AxisConfiguration config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a243fda4292af83b9a3c37610efb76e2f</anchor>
      <arglist>(std::string_view legend, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::AbscissaOrdinate&lt; GetXT, GetYT &gt;</type>
      <name>XY</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>ab22cf8c8dfe0090e06c4a4ddd484d82a</anchor>
      <arglist>(std::string_view name, GetXT get_x_fn, GetYT get_y_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::AbscissaOrdinateWithColor&lt; GetXT, GetYT, GetColor &gt;</type>
      <name>XY</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a7b441029a734fc7579954b5cd15122a8</anchor>
      <arglist>(std::string_view name, GetXT get_x_fn, GetYT get_y_fn, GetColor get_color_fn, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::Ordinate&lt; GetT &gt;</type>
      <name>Y</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a09e783ef208faafb14fb04a4d269619a</anchor>
      <arglist>(std::string_view name, GetT get_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::OrdinateWithColor&lt; GetT, GetColor &gt;</type>
      <name>Y</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a6c606d5a78632224ad064015a385e81c</anchor>
      <arglist>(std::string_view name, GetT get_fn, GetColor get_color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::Polygon&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a455aeb83363d1c76669333ae6827f638</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::Polygons&lt; GetT &gt;</type>
      <name>Polygons</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a2bfb0562e6093e2274530cb22f523030</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_Abscissa</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a73e5c8e2228efe9d85770fa3233df148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>ad9dd006fddf621ad45bc2ed39819cb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a807bb49afba6fffd36b8eaeb1f305805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a4670673e25f4957cc8b1d6933601fbb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>namespacemc__rtc_1_1gui_1_1plot.html</anchorfile>
      <anchor>a1e919d3536d792111197f12de304db37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui::plot::impl</name>
    <filename>namespacemc__rtc_1_1gui_1_1plot_1_1impl.html</filename>
    <class kind="struct">mc_rtc::gui::plot::impl::Abscissa</class>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinateWithColor</class>
    <class kind="struct">mc_rtc::gui::plot::impl::Ordinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::OrdinateWithColor</class>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygon</class>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygons</class>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::internal</name>
    <filename>namespacemc__rtc_1_1internal.html</filename>
    <class kind="struct">mc_rtc::internal::_has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::_has_configuration_save_object</class>
    <class kind="struct">mc_rtc::internal::Allocator</class>
    <class kind="struct">mc_rtc::internal::Allocator&lt; T, typename T::eigen_aligned_operator_new_marker_type &gt;</class>
    <class kind="struct">mc_rtc::internal::args_t</class>
    <class kind="struct">mc_rtc::internal::has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::has_configuration_save_object</class>
    <class kind="struct">mc_rtc::internal::lambda_traits</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...) const &gt;</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...)&gt;</class>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a759676405e1815363e6d9094dd1919b1</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a0f0cc0f5914bc62d93b19fda0ed53e75</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_name</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>ae1593091ff32313db1baa24bf770172c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_name</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a149f9b7b1184a0044b4f351e534e26ef</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_like</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>acba6fe117d8807e358abe0a19f91362c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI std::string</type>
      <name>demangle</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>af017e274f3cf4699850fdbf753d07fa2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integral_v</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a71205a048e877fdade723bb88b6bbbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int8_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a1916e10919c876ca3ec9601e5fa6110d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int16_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>aea3a30b04f5e1536751b6b0eb2a2d8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int32_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>afdbadbf7cd608469cc1b986f907b0590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_int64_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a5d81455351f259d743932cff9fb14442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint8_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>aabd034adefcd3f66b71c74173a942cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint16_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a11741a3b42edf962a451b31c84ec9c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint32_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>a8f487774ba8a847c81c631e8c44509b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_like_uint64_t</name>
      <anchorfile>namespacemc__rtc_1_1internal.html</anchorfile>
      <anchor>aaa486786eded3072808be5972a79c15a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::io</name>
    <filename>namespacemc__rtc_1_1io.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rtc_1_1io.html</anchorfile>
      <anchor>af24adad562092ccd4f760a38c86fcf95</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
      <docanchor file="namespacemc__rtc_1_1io">to_string</docanchor>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rtc_1_1io.html</anchorfile>
      <anchor>a38fc0c2f37aa3befdc6ab09b25c11f1f</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const unsigned precision=std::numeric_limits&lt; typename Container::value_type &gt;::digits10)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemc__rtc_1_1io.html</anchorfile>
      <anchor>a288c60b8869f856d23c8a94ac085438e</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::log</name>
    <filename>namespacemc__rtc_1_1log.html</filename>
    <namespace>mc_rtc::log::details</namespace>
    <class kind="struct">mc_rtc::log::callback_is_serializable</class>
    <class kind="struct">mc_rtc::log::callback_is_serializable&lt; T, void_t&lt; typename std::result_of&lt; T()&gt;::type &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::FlatLog</class>
    <class kind="struct">mc_rtc::log::GetLogType</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; Eigen::Ref&lt; Type, Options, StrideType &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; std::array&lt; double, N &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; std::vector&lt; double, A &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::is_serializable</class>
    <class kind="struct">mc_rtc::log::is_serializable_getter</class>
    <class kind="struct">mc_rtc::log::is_serializable_getter&lt; MethodRetT(T::*)() const &gt;</class>
    <class kind="struct">mc_rtc::log::is_serializable_member</class>
    <class kind="struct">mc_rtc::log::is_serializable_member&lt; MemberT T::* &gt;</class>
    <class kind="struct">mc_rtc::log::LogWriter</class>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double)&gt;</type>
      <name>binary_log_callback</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a2e5bbb4664bc287ec78732a63a7cd646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(mc_rtc::MessagePackBuilder &amp;, const std::vector&lt; std::string &gt; &amp;)&gt;</type>
      <name>copy_callback</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9c09aed839e3ee87a5be3e286a3e8903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double, const copy_callback &amp;, const char *, uint64_t)&gt;</type>
      <name>binary_log_copy_callback</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a1c86e8f30b914960080029679897a749</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a50801f83a6ed3945d8cc199c9b3c4ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogType</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>ae623e7dc6e6722fd48752713664b3549</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ac26f15e86e3de4c398a8273272aba034">Bool</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a310554dc6901f24b84131602f5aa7728">Int8_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a52b8419558c2745bb3f452f5dba89c0e">Int16_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a31da5bff69db770ab36fc4197417eb6e">Int32_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a6ee9244c64454706197c23f12163b3e4">Int64_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549aaa8a6d419e8de319fc0fb8151154a3c8">Uint8_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a2cf01fdc4d5b4b49bd5531cea84517ae">Uint16_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a114753c09137e486b349fb7ded3a738e">Uint32_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a752da4dabeb6a21c46c62388107f2b53">Uint64_t</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a22ae0e2b89e5e3d477f988cc36d3272b">Float</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ad909d38d705ce75386dd86e611a82f5b">Double</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a27118326006d3829667a400ad23d5d98">String</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ae9b0a766c9aba1f88f69157593dcade3">Vector2d</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549abd18c4378a1b42df9061eb5bd43755c9">Vector3d</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ada57d50e3cb02d10e15d0dab71fb846f">Vector6d</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549ab2e07f7f9214839944e939b29de2252b">VectorXd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a9dea906d4e9243ea050120f8f4a1f1c9">Quaterniond</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a2ec69636c565a422c59d7fc675bcd836">PTransformd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a9fd99a0871090c0c75a35ac57944e044">ForceVecd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a08efd42d00b69280268271026472b237">MotionVecd</enumvalue>
      <enumvalue file="namespacemc__rtc_1_1log.html" anchor="ae623e7dc6e6722fd48752713664b3549a18f1829c8dab599745c7d5bc84585aa2">VectorDouble</enumvalue>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI void</type>
      <name>deprecated</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a44519212b524404c86c6a6f354d58d2c</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;old, const std::string &amp;replace)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>ae939074ac3cce1fde0bb5e0ea7e90c86</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_copy_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a51b18863af2ea7f3e981b32be6b2174f</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>LogTypeNames</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9979086ae04c2369f6ea39d42ec2fcb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>LogTypeName</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a6351f9d1bb2bb7f8f3508cc9f0e36e5e</anchor>
      <arglist>(LogType t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9aa92bc1668b9218bf395ae4fc92e795</anchor>
      <arglist>(bool, Bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a4a530e246a423018eb4757de9a38fe0a</anchor>
      <arglist>(int8_t, Int8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a701b7606804a3db8de4c0e7a52d928c0</anchor>
      <arglist>(int16_t, Int16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a2bf6ab72f6469b3269f31e5bba5a2e53</anchor>
      <arglist>(int32_t, Int32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a8bfaf29781e441da25c30cbeba3acf09</anchor>
      <arglist>(int64_t, Int64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9e592f5c13ba9f39d5b1a71a53bdfd8e</anchor>
      <arglist>(uint8_t, Uint8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a70fc3b45c7d5e2602b6c0967efa4b4f0</anchor>
      <arglist>(uint16_t, Uint16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a5725243119abb09aa142128b7fc9f40f</anchor>
      <arglist>(uint32_t, Uint32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>ad6b297b2129cec68c11ffa52c448d8ae</anchor>
      <arglist>(uint64_t, Uint64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a7349ebfd4a26447bfa3c1d087924b8ed</anchor>
      <arglist>(float, Float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a254cbef473857a8f7300c4893e025070</anchor>
      <arglist>(double, Double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a209c2c06d48dddd58e98eb20b6537fbf</anchor>
      <arglist>(std::string, String)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a3832207f7dfe9bb0a76bd55c40141aa0</anchor>
      <arglist>(Eigen::Vector2d, Vector2d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a8a95695038f7381e9ff63fb77021fe22</anchor>
      <arglist>(Eigen::Vector3d, Vector3d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>abde1c442a27ca22960f0a2c42c12e1e5</anchor>
      <arglist>(Eigen::Vector6d, Vector6d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a40e42a14f68a8cacf3f5c14bdc235422</anchor>
      <arglist>(Eigen::VectorXd, VectorXd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a77ff7d3e9889df9292a6575c95b473a8</anchor>
      <arglist>(Eigen::Quaterniond, Quaterniond)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a85a6ea306358c1ae94b79e65b22cb252</anchor>
      <arglist>(sva::PTransformd, PTransformd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a42e9d70a432b1bc02a1f5dcff729bfb5</anchor>
      <arglist>(sva::ForceVecd, ForceVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a70d34eabb941deeb9f0dea2280ae1201</anchor>
      <arglist>(sva::MotionVecd, MotionVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>aae268af9ba09c4178e3d3711b5e3a32a</anchor>
      <arglist>(sva::ImpedanceVecd, MotionVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a924ed0ac7a53f8d0f36281e6e9d337a5</anchor>
      <arglist>(mc_rbdyn::Gains2d, Vector2d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a5dc69800593dae0a5002db3668e9294d</anchor>
      <arglist>(mc_rbdyn::Gains3d, Vector3d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>aa0c490e185c40165c27a46a5a22517f3</anchor>
      <arglist>(mc_rbdyn::Gains6d, Vector6d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error_and_throw</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a2bad497e8a4c7a7f29f7ab908c83274e</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>critical</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a82d6969aa78c74fbe4716532661ea0d8</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>aa189b2ec856ad8f96d632d635efc05ce</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a9e944001fd155fd1621157e450cf3d06</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a0d3a4bb8b582e5c1795b8ae9cd5f3ec9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>success</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a4493319384c54d938a70d54193ed2dbc</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>namespacemc__rtc_1_1log.html</anchorfile>
      <anchor>a54ebcc7be85c707e724b30af37292667</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::log::details</name>
    <filename>namespacemc__rtc_1_1log_1_1details.html</filename>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>success</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a4be6522543b254e76db5d80f58a4e290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>info</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a2e57684e4d69b10eb5c9f41cf59c11ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>cerr</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>aa8cc2cc8dc25d49fa533f32a67f73c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI void</type>
      <name>notify</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a825688a25acf02d7518a7a1f19c83e04</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI void</type>
      <name>disable_notifications</name>
      <anchorfile>namespacemc__rtc_1_1log_1_1details.html</anchorfile>
      <anchor>a61a4f2b21a3c9e57114e8d852bc125ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::utils</name>
    <filename>namespacemc__rtc_1_1utils.html</filename>
    <member kind="function">
      <type>T</type>
      <name>heatmap</name>
      <anchorfile>namespacemc__rtc_1_1utils.html</anchorfile>
      <anchor>a82fe941770f36f355a999699984b5943</anchor>
      <arglist>(double minimum, double maximum, double value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_solver</name>
    <filename>namespacemc__solver.html</filename>
    <namespace>mc_solver::details</namespace>
    <namespace>mc_solver::utils</namespace>
    <class kind="class">mc_solver::BoundedSpeedConstr</class>
    <class kind="class">mc_solver::CollisionsConstraint</class>
    <class kind="class">mc_solver::CoMIncPlaneConstr</class>
    <class kind="struct">mc_solver::CompoundJointConstraint</class>
    <class kind="class">mc_solver::ConstraintSet</class>
    <class kind="struct">mc_solver::ConstraintSetLoader</class>
    <class kind="class">mc_solver::ContactConstraint</class>
    <class kind="class">mc_solver::DynamicsConstraint</class>
    <class kind="class">mc_solver::EqualityConstraintForce</class>
    <class kind="class">mc_solver::EqualityConstraintLambda</class>
    <class kind="class">mc_solver::EqualityConstraintRobot</class>
    <class kind="struct">mc_solver::GenericLoader</class>
    <class kind="class">mc_solver::GenInequalityConstraintForce</class>
    <class kind="class">mc_solver::GenInequalityConstraintLambda</class>
    <class kind="class">mc_solver::GenInequalityConstraintRobot</class>
    <class kind="class">mc_solver::InequalityConstraintForce</class>
    <class kind="class">mc_solver::InequalityConstraintLambda</class>
    <class kind="class">mc_solver::InequalityConstraintRobot</class>
    <class kind="class">mc_solver::KinematicsConstraint</class>
    <class kind="struct">mc_solver::QPContactPtr</class>
    <class kind="struct">mc_solver::QPContactPtrWPoints</class>
    <class kind="class">mc_solver::QPSolver</class>
    <class kind="struct">mc_solver::TasksQPSolver</class>
    <class kind="struct">mc_solver::TVMQPSolver</class>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescription</type>
      <name>CompoundJointConstraintDescription</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>afa4d95156100f691a3f35392f403217f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescriptionVector</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a2503fc4f7d91a2f6c53349f2a12effd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a9bce96d8d352ebedfffce2e42e0300ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_diagnostic_push</type>
      <name>MC_RTC_diagnostic_ignored</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a619a755cd27458e3c3e0203be40caf76</anchor>
      <arglist>(GCC, &quot;-Wattributes&quot;) enum class MC_SOLVER_DLLAPI FeedbackType</arglist>
    </member>
    <member kind="function">
      <type>TasksQPSolver &amp;</type>
      <name>tasks_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a872e96c8071f94103eb253899e73347f</anchor>
      <arglist>(QPSolver &amp;solver) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TasksQPSolver &amp;</type>
      <name>tasks_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>a5abdc1715119d0de677d6942c18c88d3</anchor>
      <arglist>(const QPSolver &amp;solver) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TVMQPSolver &amp;</type>
      <name>tvm_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>aa8880c7b3b89f3256f848c45c4baf87e</anchor>
      <arglist>(QPSolver &amp;solver) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TVMQPSolver &amp;</type>
      <name>tvm_solver</name>
      <anchorfile>namespacemc__solver.html</anchorfile>
      <anchor>ad9b799fc8f7724cfac400ee9f2c1c0df</anchor>
      <arglist>(const QPSolver &amp;solver) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_solver::details</name>
    <filename>namespacemc__solver_1_1details.html</filename>
    <class kind="struct">mc_solver::details::CompoundJointConstraint</class>
  </compound>
  <compound kind="namespace">
    <name>mc_solver::utils</name>
    <filename>namespacemc__solver_1_1utils.html</filename>
    <class kind="class">mc_solver::utils::Constraint</class>
    <class kind="struct">mc_solver::utils::ContactWrenchMatrixToLambdaMatrix</class>
    <class kind="class">mc_solver::utils::EqualityConstraint</class>
    <class kind="class">mc_solver::utils::GenInequalityConstraint</class>
    <class kind="class">mc_solver::utils::InequalityConstraint</class>
    <class kind="struct">mc_solver::utils::IsUpdate</class>
    <class kind="struct">mc_solver::utils::Update</class>
    <class kind="struct">mc_solver::utils::UpdateForce</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsData</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsLambda</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsRobot</class>
    <class kind="struct">mc_solver::utils::UpdateTag</class>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsRobot &gt;</type>
      <name>UpdateRobot</name>
      <anchorfile>namespacemc__solver_1_1utils.html</anchorfile>
      <anchor>a3fef857fcf6a819b7f8061f33248d0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsLambda &gt;</type>
      <name>UpdateLambda</name>
      <anchorfile>namespacemc__solver_1_1utils.html</anchorfile>
      <anchor>a51609ca39a4099935af3983ff08a0c50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks</name>
    <filename>namespacemc__tasks.html</filename>
    <namespace>mc_tasks::details</namespace>
    <namespace>mc_tasks::force</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
    <class kind="struct">mc_tasks::AddContactTask</class>
    <class kind="struct">mc_tasks::AddRemoveContactTask</class>
    <class kind="struct">mc_tasks::BSplineTrajectoryTask</class>
    <class kind="struct">mc_tasks::CoMTask</class>
    <class kind="struct">mc_tasks::EndEffectorTask</class>
    <class kind="struct">mc_tasks::ExactCubicTrajectoryTask</class>
    <class kind="struct">mc_tasks::GazeTask</class>
    <class kind="struct">mc_tasks::LookAtFrameTask</class>
    <class kind="struct">mc_tasks::LookAtTask</class>
    <class kind="struct">mc_tasks::LookAtTFTask</class>
    <class kind="struct">mc_tasks::MetaTask</class>
    <class kind="struct">mc_tasks::MetaTaskLoader</class>
    <class kind="struct">mc_tasks::MomentumTask</class>
    <class kind="struct">mc_tasks::OrientationTask</class>
    <class kind="struct">mc_tasks::PositionBasedVisServoTask</class>
    <class kind="struct">mc_tasks::PositionTask</class>
    <class kind="struct">mc_tasks::PostureTask</class>
    <class kind="struct">mc_tasks::RelativeEndEffectorTask</class>
    <class kind="struct">mc_tasks::RemoveContactTask</class>
    <class kind="struct">mc_tasks::SmoothTask</class>
    <class kind="struct">mc_tasks::SplineTrajectoryTask</class>
    <class kind="struct">mc_tasks::TrajectoryTaskGeneric</class>
    <class kind="struct">mc_tasks::TransformTask</class>
    <class kind="struct">mc_tasks::VectorOrientationTask</class>
    <member kind="typedef">
      <type>LookAtFrameTask</type>
      <name>LookAtSurfaceTask</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>ace28b694118e322db35e47ac966047b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaTask &gt;</type>
      <name>MetaTaskPtr</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>a3ce36af538f25151dc006eb3d50e8b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PostureTask &gt;</type>
      <name>PostureTaskPtr</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>a20b4cf1d7ce78ab29822e5d5d6616489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TransformTask</type>
      <name>SurfaceTransformTask</name>
      <anchorfile>namespacemc__tasks.html</anchorfile>
      <anchor>a68fe384fc8c455a604bb80d86aca6f46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::details</name>
    <filename>namespacemc__tasks_1_1details.html</filename>
    <class kind="struct">mc_tasks::details::TVMTrajectoryTaskGeneric</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TVMTrajectoryTaskGeneric &gt;</type>
      <name>TVMTrajectoryTaskGenericPtr</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a4a3797f114f4b0cc6f3bbec5cefd0d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_GETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a3879d2140f4289cb5858a8420ca5a18e</anchor>
      <arglist>(refVel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_SETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a93b74a0597cdef0fbdec07692eb06f0a</anchor>
      <arglist>(refVel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_GETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a56a0daa6cee99be6277169bd4c4387aa</anchor>
      <arglist>(refAccel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MAKE_SETTER_DETECTOR</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a96a3a6b9106c2dc4dfa8f22d301302c3</anchor>
      <arglist>(refAccel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ref_vel</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>adc966662844095b73bed36f7e5bd0232</anchor>
      <arglist>(void *task, const Eigen::VectorXd &amp;refVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ref_accel</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>af42f3e8fb984722d3f40522533610f9a</anchor>
      <arglist>(void *task, const Eigen::VectorXd &amp;refAccel)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_refVel_v</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a76f0d5b92ab362dcfc65d4183f34998a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_refAccel_v</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>a980685e35817ee139bf44bec647b744b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>always_false_v</name>
      <anchorfile>namespacemc__tasks_1_1details.html</anchorfile>
      <anchor>afc5e9c803ae12160c8d3e863dcbb33ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::force</name>
    <filename>namespacemc__tasks_1_1force.html</filename>
    <namespace>mc_tasks::force::details</namespace>
    <class kind="struct">mc_tasks::force::AdmittanceTask</class>
    <class kind="struct">mc_tasks::force::ComplianceTask</class>
    <class kind="struct">mc_tasks::force::CoPTask</class>
    <class kind="struct">mc_tasks::force::DampingTask</class>
    <class kind="struct">mc_tasks::force::FirstOrderImpedanceTask</class>
    <class kind="struct">mc_tasks::force::ImpedanceGains</class>
    <class kind="struct">mc_tasks::force::ImpedanceTask</class>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::force::details</name>
    <filename>namespacemc__tasks_1_1force_1_1details.html</filename>
    <class kind="struct">mc_tasks::force::details::ImpedanceVecd</class>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::lipm_stabilizer</name>
    <filename>namespacemc__tasks_1_1lipm__stabilizer.html</filename>
    <namespace>mc_tasks::lipm_stabilizer::internal</namespace>
    <class kind="struct">mc_tasks::lipm_stabilizer::ContactDescription</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::ZMPCC</class>
    <member kind="typedef">
      <type>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXd &gt;</type>
      <name>HrepXd</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>af644950088ef46324f20a7214021a824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ContactDescription, Eigen::aligned_allocator&lt; ContactDescription &gt; &gt;</type>
      <name>ContactDescriptionVector</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a4ca092c9a2df0b34b399ff21a8bc938f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</type>
      <name>ZMPCCConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a61ba26bc4aeec5031be001df091b4b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>StabilizerConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a8e6d2236262d21dcc7ab589b6d6844ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::FDQPWeights</type>
      <name>FDQPWeights</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a6237f0269786bf01feaf316a6259b712</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::SafetyThresholds</type>
      <name>SafetyThresholds</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a5f51d2adfa451cd98a1b3f3b2ed68ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::DCMBiasEstimatorConfiguration</type>
      <name>DCMBiasEstimatorConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>aa199242c8c0d202153b338771c1a5ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::ExternalWrenchConfiguration</type>
      <name>ExternalWrenchConfiguration</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a8a1b1cfcd83c685c2836975375af2251</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>StabilizerTask::computeWrenchOffsetAndCoefficient&lt;&amp;StabilizerTask::ExternalWrench::target &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>ac38a37625b74268c51a9ae8efa42b3d8</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, Eigen::Vector3d &amp;offset_gamma, double &amp;coef_kappa) const</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>StabilizerTask::computeWrenchOffsetAndCoefficient&lt;&amp;StabilizerTask::ExternalWrench::measured &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>acdaf79a7c1b60d8b1c1aee6805951e0b</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, Eigen::Vector3d &amp;offset_gamma, double &amp;coef_kappa) const</arglist>
    </member>
    <member kind="function">
      <type>template sva::ForceVecd</type>
      <name>StabilizerTask::computeExternalWrenchSum&lt;&amp;StabilizerTask::ExternalWrench::target &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>ae21f6735cfe70bc1be33b8d4013434b3</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;, const Eigen::Vector3d &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>template sva::ForceVecd</type>
      <name>StabilizerTask::computeExternalWrenchSum&lt;&amp;StabilizerTask::ExternalWrench::measured &gt;</name>
      <anchorfile>namespacemc__tasks_1_1lipm__stabilizer.html</anchorfile>
      <anchor>a0d8b50c213771d3e5677471854ada3cd</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;, const Eigen::Vector3d &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::lipm_stabilizer::internal</name>
    <filename>namespacemc__tasks_1_1lipm__stabilizer_1_1internal.html</filename>
    <class kind="struct">mc_tasks::lipm_stabilizer::internal::Contact</class>
  </compound>
  <compound kind="namespace">
    <name>mc_trajectory</name>
    <filename>namespacemc__trajectory.html</filename>
    <class kind="struct">mc_trajectory::BSpline</class>
    <class kind="struct">mc_trajectory::ExactCubic</class>
    <class kind="struct">mc_trajectory::InterpolatedRotation</class>
    <class kind="struct">mc_trajectory::LinearInterpolation</class>
    <class kind="struct">mc_trajectory::SequenceInterpolator</class>
    <class kind="struct">mc_trajectory::Spline</class>
    <member kind="function">
      <type>MC_TRAJECTORY_DLLAPI Eigen::MatrixXd</type>
      <name>generateInterpolatedWaypoints</name>
      <anchorfile>namespacemc__trajectory.html</anchorfile>
      <anchor>a9fbcf4dd49d2e09b5d33208fae44f11b</anchor>
      <arglist>(const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;stop, unsigned int nrWP)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tvm</name>
    <filename>namespacemc__tvm.html</filename>
    <class kind="class">mc_tvm::CollisionFunction</class>
    <class kind="struct">mc_tvm::CoM</class>
    <class kind="struct">mc_tvm::CoMFunction</class>
    <class kind="struct">mc_tvm::CoMInConvexFunction</class>
    <class kind="struct">mc_tvm::CompoundJointFunction</class>
    <class kind="class">mc_tvm::ContactFunction</class>
    <class kind="struct">mc_tvm::Convex</class>
    <class kind="struct">mc_tvm::DynamicFunction</class>
    <class kind="struct">mc_tvm::Frame</class>
    <class kind="struct">mc_tvm::FrameVelocity</class>
    <class kind="struct">mc_tvm::GazeFunction</class>
    <class kind="class">mc_tvm::JointsSelectorFunction</class>
    <class kind="struct">mc_tvm::Limits</class>
    <class kind="struct">mc_tvm::Momentum</class>
    <class kind="struct">mc_tvm::MomentumFunction</class>
    <class kind="class">mc_tvm::OrientationFunction</class>
    <class kind="struct">mc_tvm::PositionBasedVisServoFunction</class>
    <class kind="class">mc_tvm::PositionFunction</class>
    <class kind="class">mc_tvm::PostureFunction</class>
    <class kind="struct">mc_tvm::Robot</class>
    <class kind="struct">mc_tvm::RobotFrame</class>
    <class kind="class">mc_tvm::TransformFunction</class>
    <class kind="class">mc_tvm::VectorOrientationFunction</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CollisionFunction &gt;</type>
      <name>CollisionFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>aa6335c40b8165a9482acfa7d6595f293</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CoMInConvexFunction &gt;</type>
      <name>CoMInConvexFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a235c942b4a62a637f7ab48d5355090bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CompoundJointFunction &gt;</type>
      <name>CompoundJointFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a20900d9e7637f3028a3e1ea59dd2f496</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; mc_tvm::ContactFunction &gt;</type>
      <name>ContactFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a00b8935e036238598507530122aa6b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DynamicFunction &gt;</type>
      <name>DynamicFunctionPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>af181c4775ffd6123afe1286668ccc6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; FrameVelocity &gt;</type>
      <name>FrameVelocityPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a617a72af19f2c7df9c68c994dfa922f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CoM &gt;</type>
      <name>CoMPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a6b3e6f3b517f90f44e4056830bb66218</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Convex &gt;</type>
      <name>ConvexPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a2056a33d9e4c876c1715009a59dded59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Frame &gt;</type>
      <name>FramePtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>afd0f97cca283c1511c87e76f5dee4cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Momentum &gt;</type>
      <name>MomentumPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a36f851b703f67948d4d0bd33f4f65a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>a7c567e7ae320072cd16633637c1ed14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RobotFrame &gt;</type>
      <name>RobotFramePtr</name>
      <anchorfile>namespacemc__tvm.html</anchorfile>
      <anchor>ae9d6c0748e1cd84c1140cc266e6c0f14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ros</name>
    <filename>namespaceros.html</filename>
  </compound>
  <compound kind="namespace">
    <name>sch</name>
    <filename>namespacesch.html</filename>
    <namespace>sch::mc_rbdyn</namespace>
  </compound>
  <compound kind="namespace">
    <name>sch::mc_rbdyn</name>
    <filename>namespacesch_1_1mc__rbdyn.html</filename>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>transform</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a3c0ffcdf6b05980ab8ca56474c431bc7</anchor>
      <arglist>(S_Object &amp;obj, const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI STP_BV *</type>
      <name>STPBV</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a30354c6b845b9f2c2bf59342c84f9e0d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI S_Polyhedron *</type>
      <name>Polyhedron</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a1d8bc5539da072c12d1f76bc317f8af3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI double</type>
      <name>distance</name>
      <anchorfile>namespacesch_1_1mc__rbdyn.html</anchorfile>
      <anchor>a8e193a456c2d3dab3ad5f12ed049e3b1</anchor>
      <arglist>(CD_Pair &amp;pair, Eigen::Vector3d &amp;p1, Eigen::Vector3d &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::hash&lt; mc_control::Contact &gt;</class>
  </compound>
  <compound kind="group">
    <name>robotFromConfig</name>
    <title>Helpers to obtain robot index/name from configuration</title>
    <filename>group__robotFromConfig.html</filename>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI const mc_rbdyn::Robot &amp;</type>
      <name>robotFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>ga70b316b2f0c0caf547e160e74c2a029d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string MC_RBDYN_DLLAPI</type>
      <name>robotNameFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>ga40325ac769295d23f270976eead26245</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int MC_RBDYN_DLLAPI</type>
      <name>robotIndexFromConfig</name>
      <anchorfile>group__robotFromConfig.html</anchorfile>
      <anchor>gaf9b711ec2baa5684b8f422d740464b5f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>mc_rtc</title>
    <filename>index</filename>
  </compound>
</tagfile>
