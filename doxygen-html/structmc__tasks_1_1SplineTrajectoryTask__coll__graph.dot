digraph "mc_tasks::SplineTrajectoryTask&lt; Derived &gt;"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="mc_tasks::SplineTrajectory\lTask\< Derived \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Generic CRTP implementation for a task tracking a curve in both position and orientation...."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="mc_tasks::TrajectoryTask\lGeneric",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__tasks_1_1TrajectoryTaskGeneric.html",tooltip="Generic wrapper for a trajectory dynamic over an error function."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="mc_tasks::MetaTask",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__tasks_1_1MetaTask.html",tooltip="Represents a generic task."];
  Node4 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" robots" ,fontname="Helvetica"];
  Node4 [label="mc_rbdyn::Robots",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__rbdyn_1_1Robots.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="mc_rtc::shared\< Robots \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__rtc_1_1shared.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="std::conditional\< std\l::is_same\< void , void\l \>::value, std::enable\l_shared_from_this\< Robots\l  \>, void  \>::type",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" oriSpline_" ,fontname="Helvetica"];
  Node7 [label="mc_trajectory::Interpolated\lRotation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__trajectory_1_1InterpolatedRotation.html",tooltip="Describes a trajectory with smoothly interpolate rotation between waypoints."];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="mc_trajectory::Spline\l\< Eigen::Matrix3d, std\l::vector\< std::pair\< double,\l Eigen::Matrix3d \> \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__trajectory_1_1Spline.html",tooltip=" "];
  Node9 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dampingInterpolator\l_\ndimWeightInterpolator\l_\nstiffnessInterpolator_" ,fontname="Helvetica"];
  Node9 [label="mc_trajectory::SequenceInterpolator\l\< Eigen::Vector6d, mc_trajectory\l::LinearInterpolation\< Eigen::Vector6d \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__trajectory_1_1SequenceInterpolator.html",tooltip=" "];
  Node10 -> Node9 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" interpolator_" ,fontname="Helvetica"];
  Node10 [label="mc_trajectory::LinearInterpolation\l\< Eigen::Vector6d \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structmc__trajectory_1_1LinearInterpolation.html",tooltip=" "];
}
